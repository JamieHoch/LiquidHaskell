(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((PopPush.List 1)) ((par (T0) ((PopPush.Cons (PopPush.Cons$35$$35$lqdc$35$$35$$36$select$35$$35$PopPush.Cons$35$$35$1 T0) (PopPush.Cons$35$$35$lqdc$35$$35$$36$select$35$$35$PopPush.Cons$35$$35$2 (PopPush.List T0))) PopPush.Nil))))
(declare-datatypes ((Language.Haskell.Liquid.RTick.Tick 1)) ((par (T0) ((Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.tcost Int) (Language.Haskell.Liquid.RTick.tval T0))))))
(declare-datatypes ((GHC.Maybe.Maybe 1)) ((par (T0) (GHC.Maybe.Nothing (GHC.Maybe.Just (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 T0))))))
(declare-fun lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO () Int)
(declare-fun papp7 () Int)
(declare-fun PopPush.pot () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun Language.Haskell.Liquid.RTick.pure () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun PopPush.length () Int)
(declare-fun totalityError () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.step () Int)
(declare-fun Language.Haskell.Liquid.RTick.fmap () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_karg$36$PopPush.push$35$$35$k_$35$$35$1169 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$47$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803255$35$$35$d2vJ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS$35$$35$k_$35$$35$1144 () Int)
(declare-fun VV$35$$35$F$35$$35$39 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.ap () Int)
(declare-fun tail () Int)
(declare-fun Language.Haskell.Liquid.RTick.geqBind () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803252$35$$35$d2vG () Int)
(declare-fun VV$35$$35$F$35$$35$27 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_karg$36$ds_d2va$35$$35$k_$35$$35$1169 () Int)
(declare-fun Language.Haskell.Liquid.RTick.goN () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$92$$62$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803250$35$$35$d2vE () Int)
(declare-fun isJust () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.wmapN () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.List.span () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun VV$35$$35$F$35$$35$11 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$952 () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1117 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$62$$61$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1169 () Int)
(declare-fun snd () Int)
(declare-fun lq_karg$36$xs$35$$35$a1uY$35$$35$k_$35$$35$1144 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT$35$$35$k_$35$$35$1144 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lit$36$lh$45$thesis$45$0.1.0.0$45$4ESBdU8fV2WEjDoiChJ6aP () Str)
(declare-fun lq_tmp$36$x$35$$35$905 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV$35$$35$k_$35$$35$1144 () Int)
(declare-fun Language.Haskell.Liquid.RTick.go () Int)
(declare-fun xs$35$$35$a1uS () Int)
(declare-fun lq_tmp$36$x$35$$35$1278 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1024 () Int)
(declare-fun lq_karg$36$PopPush.push$35$$35$k_$35$$35$1024 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1026 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lq_tmp$36$x$35$$35$1140 () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR$35$$35$k_$35$$35$1026 () Str)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803251$35$$35$d2vF () Int)
(declare-fun lq_tmp$36$x$35$$35$930 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$47$$47$$60$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftM () Int)
(declare-fun lq_tmp$36$x$35$$35$960 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_tmp$36$x$35$$35$1322 () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun lq_karg$36$ds_d2va$35$$35$k_$35$$35$1144 () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun Language.Haskell.Liquid.RTick.wait () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun lq_karg$36$ds_d2va$35$$35$k_$35$$35$1024 () Int)
(declare-fun lq_tmp$36$x$35$$35$923 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$47$$60$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.wmap () Int)
(declare-fun lit$36$$39$Nil () Str)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1024 () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1024 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_tmp$36$x$35$$35$764 () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun PopPush.pop () Int)
(declare-fun lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1169 () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftM2 () Int)
(declare-fun lq_tmp$36$x$35$$35$1020 () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_tmp$36$x$35$$35$680 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803253$35$$35$d2vH () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1144 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803257$35$$35$d2vL () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_karg$36$PopPush.push$35$$35$k_$35$$35$1144 () Int)
(declare-fun Language.Haskell.Liquid.RTick.pay () Int)
(declare-fun Language.Haskell.Liquid.RTick.zipWithM () Int)
(declare-fun Language.Haskell.Liquid.RTick.leqBind () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1026 () Int)
(declare-fun lq_karg$36$PopPush.push$35$$35$k_$35$$35$1026 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1024 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$946 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$47$$62$ () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR$35$$35$k_$35$$35$1024 () Str)
(declare-fun xs$35$$35$a1uQ () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.pleUnfold () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun PopPush.push () Int)
(declare-fun lq_tmp$36$x$35$$35$876 () Int)
(declare-fun lit$36$PopPush () Str)
(declare-fun cast_as () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$92$$61$ () Int)
(declare-fun GHC.List.head () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$92$$92$$62$ () Int)
(declare-fun ds_d2vh () Int)
(declare-fun cast_as_int () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Str)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$92$$92$$60$ () Int)
(declare-fun ls$35$$35$a1uT () Int)
(declare-fun lq_tmp$36$x$35$$35$1295 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$16 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_karg$36$ds_d2va$35$$35$k_$35$$35$1026 () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$965 () Int)
(declare-fun ds_d2vs () Int)
(declare-fun lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1026 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1026 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1169 () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_karg$36$VV$35$$35$1025$35$$35$k_$35$$35$1026 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun VV$35$$35$F$35$$35$41 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803258$35$$35$d2vM () Int)
(declare-fun papp6 () Int)
(declare-fun lit$36$$39$Cons () Str)
(declare-fun GHC.Real.mod () Int)
(declare-fun a$35$$35$a1uU () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$92$$92$$61$ () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun prop () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1024 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ () Int)
(declare-fun Language.Haskell.Liquid.RTick.gmapN () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1302 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1169 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU () Int)
(declare-fun Language.Haskell.Liquid.RTick.waitN () Int)
(declare-fun lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1026 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1169 () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun isAdmit () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$42$$62$ () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun VV$35$$35$F$35$$35$38 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$60$$60$ () Int)
(declare-fun lit$36$List () Str)
(declare-fun lq_tmp$36$x$35$$35$1171 () Int)
(declare-fun xs$35$$35$a1uY () Int)
(declare-fun lq_karg$36$x$35$$35$a1uX$35$$35$k_$35$$35$1144 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun VV$35$$35$F$35$$35$24 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun Language.Haskell.Liquid.RTick.$61$$92$$60$ () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun x$35$$35$a1uP () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX$35$$35$k_$35$$35$1144 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_karg$36$VV$35$$35$949$35$$35$k_$35$$35$950 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftA2 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun lq_tmp$36$x$35$$35$966 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun autolen () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$47$$47$$62$ () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1144 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.List.take () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lq_karg$36$VV$35$$35$1168$35$$35$k_$35$$35$1169 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1026 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun ds_d2uM () Int)
(declare-fun lq_tmp$36$x$35$$35$1146 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT () Int)
(declare-fun Language.Haskell.Liquid.RTick.return () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1024 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun charX () Int)
(declare-fun lq_tmp$36$x$35$$35$906 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun head () Int)
(declare-fun Language.Haskell.Liquid.RTick.gmap () Int)
(declare-fun lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1144 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun Language.Haskell.Liquid.RTick.eqBind () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN$35$$35$k_$35$$35$950 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$47$$47$$61$ () Int)
(declare-fun ds_d2va () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803256$35$$35$d2vK () Int)
(declare-fun ys$35$$35$a1uV () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun x$35$$35$a1uR () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun lit$36$src$47$PopPush.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop () Str)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$1165 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun lq_karg$36$VV$35$$35$1023$35$$35$k_$35$$35$1024 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$792 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_karg$36$VV$35$$35$1143$35$$35$k_$35$$35$1144 () Int)
(declare-fun lq_karg$36$a$35$$35$a1uU$35$$35$k_$35$$35$950 () Int)
(declare-fun lq_karg$36$ls$35$$35$a1uT$35$$35$k_$35$$35$950 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun x$35$$35$a1uX () Int)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$25 (Int (GHC.Maybe.Maybe Int)) Bool)
(declare-fun apply$35$$35$28 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$29 (Int (GHC.Maybe.Maybe Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$4 (Int Int) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$27 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$26 (Int (GHC.Maybe.Maybe Int)) Str)
(declare-fun apply$35$$35$31 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Bool)
(declare-fun apply$35$$35$11 (Int Bool) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$35 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$5 (Int Int) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$16 (Int Str) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$32 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Str)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$33 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$10 (Int Bool) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$24 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun apply$35$$35$17 (Int Str) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$34 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$30 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$25 ((GHC.Maybe.Maybe Int)) Bool)
(declare-fun coerce$35$$35$28 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$29 ((GHC.Maybe.Maybe Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$4 (Int) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$27 ((GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$26 ((GHC.Maybe.Maybe Int)) Str)
(declare-fun coerce$35$$35$31 ((Language.Haskell.Liquid.RTick.Tick Int)) Bool)
(declare-fun coerce$35$$35$11 (Bool) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$35 ((Language.Haskell.Liquid.RTick.Tick Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$5 (Int) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$16 (Str) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$32 ((Language.Haskell.Liquid.RTick.Tick Int)) Str)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$33 ((Language.Haskell.Liquid.RTick.Tick Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$10 (Bool) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$24 ((GHC.Maybe.Maybe Int)) Int)
(declare-fun coerce$35$$35$17 (Str) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$34 ((Language.Haskell.Liquid.RTick.Tick Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$30 ((Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$25 ((GHC.Maybe.Maybe Int) Bool) Int)
(declare-fun smt_lambda$35$$35$28 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$29 ((GHC.Maybe.Maybe Int) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$27 ((GHC.Maybe.Maybe Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$26 ((GHC.Maybe.Maybe Int) Str) Int)
(declare-fun smt_lambda$35$$35$31 ((Language.Haskell.Liquid.RTick.Tick Int) Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$35 ((Language.Haskell.Liquid.RTick.Tick Int) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$5 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$16 (Str (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$32 ((Language.Haskell.Liquid.RTick.Tick Int) Str) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$33 ((Language.Haskell.Liquid.RTick.Tick Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$24 ((GHC.Maybe.Maybe Int) Int) Int)
(declare-fun smt_lambda$35$$35$17 (Str (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$34 ((Language.Haskell.Liquid.RTick.Tick Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$30 ((Language.Haskell.Liquid.RTick.Tick Int) Int) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$1$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))



(assert (distinct lit$36$src$47$PopPush.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop lit$36$List lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$$39$Cons lit$36$PopPush lit$36$$39$Nil lit$36$lh$45$thesis$45$0.1.0.0$45$4ESBdU8fV2WEjDoiChJ6aP))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (= (strLen lit$36$lh$45$thesis$45$0.1.0.0$45$4ESBdU8fV2WEjDoiChJ6aP) 40))
(assert (= (strLen lit$36$$39$Nil) 4))
(assert (= (strLen lit$36$PopPush) 7))
(assert (= (strLen lit$36$$39$Cons) 5))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$List) 4))
(assert (= (strLen lit$36$src$47$PopPush.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop) 42))
(push 1)
(define-fun b$36$$35$$35$160 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD ds_d2vs) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0)))
(define-fun b$36$$35$$35$288 () Bool (and (= VV$35$$35$F$35$$35$21 xs$35$$35$a1uY) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$21) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$21) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21) 0)))
(define-fun b$36$$35$$35$161 () Bool (= lq_anf$36$$35$$35$7205759403792803250$35$$35$d2vE 0))
(define-fun b$36$$35$$35$193 () Bool (and (= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO ds_d2uM) (= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO ds_d2va) (= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO ds_d2va) (>= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO 0)))
(define-fun b$36$$35$$35$289 () Bool (and (= VV$35$$35$F$35$$35$23 lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW) (= VV$35$$35$F$35$$35$23 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$45$ Int) ds_d2uM) lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV)) (= VV$35$$35$F$35$$35$23 (- ds_d2uM lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV))))
(define-fun b$36$$35$$35$162 () Bool (and (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD ds_d2vs) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0)))
(define-fun b$36$$35$$35$194 () Bool (= lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP ds_d2va))
(define-fun b$36$$35$$35$195 () Bool (and (= lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP ds_d2va) (not (= lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP 0))))
(define-fun b$36$$35$$35$164 () Bool (and (= (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uQ) (apply$35$$35$0 (as len Int) xs$35$$35$a1uQ)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1uQ) 0)))
(define-fun b$36$$35$$35$196 () Bool (and (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ))))
(define-fun b$36$$35$$35$292 () Bool (and (= VV$35$$35$F$35$$35$26 lit$36$src$47$PopPush.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop) (= VV$35$$35$F$35$$35$26 lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR)))
(define-fun b$36$$35$$35$165 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD ds_d2vs) (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1uP) xs$35$$35$a1uQ)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (+ 1 (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uQ))) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uQ))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) x$35$$35$a1uP) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1uQ))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) x$35$$35$a1uP) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) xs$35$$35$a1uQ) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) xs$35$$35$a1uQ) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0)))
(define-fun b$36$$35$$35$197 () Bool (and (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ))))
(define-fun b$36$$35$$35$293 () Bool (and (= 1 (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$27)) (= lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$27)) (= VV$35$$35$F$35$$35$27 (apply$35$$35$5 (as Language.Haskell.Liquid.RTick.wait Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN)) (= VV$35$$35$F$35$$35$27 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) 1 lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN))))
(define-fun b$36$$35$$35$166 () Bool (= lq_anf$36$$35$$35$7205759403792803251$35$$35$d2vF 1))
(define-fun b$36$$35$$35$198 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ))))
(define-fun b$36$$35$$35$167 () Bool (and (= lq_anf$36$$35$$35$7205759403792803252$35$$35$d2vG (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803251$35$$35$d2vF)) (= lq_anf$36$$35$$35$7205759403792803252$35$$35$d2vG lq_anf$36$$35$$35$7205759403792803251$35$$35$d2vF)))
(define-fun b$36$$35$$35$199 () Bool (= lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR lit$36$src$47$PopPush.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop))
(define-fun b$36$$35$$35$295 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) VV$35$$35$F$35$$35$29) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) VV$35$$35$F$35$$35$29)) (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (= VV$35$$35$F$35$$35$29 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1uU) ls$35$$35$a1uT)) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as PopPush.length Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as head Int) VV$35$$35$F$35$$35$29) a$35$$35$a1uU) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) VV$35$$35$F$35$$35$29) a$35$$35$a1uU) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1uT) (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1uT) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0)))
(define-fun b$36$$35$$35$168 () Bool (and (= lq_anf$36$$35$$35$7205759403792803253$35$$35$d2vH (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uQ)) (= lq_anf$36$$35$$35$7205759403792803253$35$$35$d2vH (apply$35$$35$0 (as len Int) xs$35$$35$a1uQ))))
(define-fun b$36$$35$$35$200 () Bool (and (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ))))
(define-fun b$36$$35$$35$170 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) ds_d2vh) (apply$35$$35$0 (as len Int) ds_d2vh)) (>= (apply$35$$35$0 (as len Int) ds_d2vh) 0)))
(define-fun b$36$$35$$35$202 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uY) (apply$35$$35$0 (as len Int) xs$35$$35$a1uY)) (= (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uY) (apply$35$$35$0 (as len Int) xs$35$$35$a1uY)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1uY) 0)))
(define-fun b$36$$35$$35$171 () Bool (and (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI ds_d2vh) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0)))
(define-fun b$36$$35$$35$203 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ ys$35$$35$a1uV) (= lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1uX) xs$35$$35$a1uY)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (+ 1 (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uY))) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uY))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) x$35$$35$a1uX) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1uY))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) x$35$$35$a1uX) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) xs$35$$35$a1uY) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) xs$35$$35$a1uY) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ))))
(define-fun b$36$$35$$35$172 () Bool (and (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI ds_d2vh) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0)))
(define-fun b$36$$35$$35$204 () Bool (= lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS 1))
(define-fun b$36$$35$$35$45 () Bool (apply$35$$35$1 isAdmit Language.Haskell.Liquid.ProofCombinators.Admit))
(define-fun b$36$$35$$35$173 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI ds_d2vh) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0)))
(define-fun b$36$$35$$35$205 () Bool (and (= lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS)) (= lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS)))
(define-fun b$36$$35$$35$174 () Bool (= lq_anf$36$$35$$35$7205759403792803255$35$$35$d2vJ 0))
(define-fun b$36$$35$$35$206 () Bool (= lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU 1))
(define-fun b$36$$35$$35$175 () Bool (and (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI ds_d2vh) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0)))
(define-fun b$36$$35$$35$207 () Bool (and (= lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU)) (= lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU)))
(define-fun b$36$$35$$35$208 () Bool (and (= lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$45$ Int) ds_d2uM) lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV)) (= lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW (- ds_d2uM lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV))))
(define-fun b$36$$35$$35$177 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uS) (apply$35$$35$0 (as len Int) xs$35$$35$a1uS)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1uS) 0)))
(define-fun b$36$$35$$35$209 () Bool (and (= lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX (apply$35$$35$5 (apply$35$$35$0 (as PopPush.pop Int) lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW) xs$35$$35$a1uY)) (>= (+ (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uY) 2) (+ (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX) (apply$35$$35$0 (as PopPush.pot Int) (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX))))))
(define-fun b$36$$35$$35$178 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI ds_d2vh) (= lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1uR) xs$35$$35$a1uS)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (+ 1 (apply$35$$35$0 (as PopPush.length Int) xs$35$$35$a1uS))) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uS))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) x$35$$35$a1uR) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1uS))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) x$35$$35$a1uR) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) xs$35$$35$a1uS) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) xs$35$$35$a1uS) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803254$35$$35$d2vI) 0)))
(define-fun b$36$$35$$35$210 () Bool (and (= lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP 0) (= lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP ds_d2va)))
(define-fun b$36$$35$$35$179 () Bool (= lq_anf$36$$35$$35$7205759403792803256$35$$35$d2vK 1))
(define-fun b$36$$35$$35$180 () Bool (and (= lq_anf$36$$35$$35$7205759403792803257$35$$35$d2vL (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803256$35$$35$d2vK)) (= lq_anf$36$$35$$35$7205759403792803257$35$$35$d2vL lq_anf$36$$35$$35$7205759403792803256$35$$35$d2vK)))
(define-fun b$36$$35$$35$181 () Bool (and (= lq_anf$36$$35$$35$7205759403792803258$35$$35$d2vM (apply$35$$35$0 (as PopPush.pot Int) xs$35$$35$a1uS)) (= lq_anf$36$$35$$35$7205759403792803258$35$$35$d2vM (apply$35$$35$0 (as len Int) xs$35$$35$a1uS))))
(define-fun b$36$$35$$35$182 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) ls$35$$35$a1uT) (apply$35$$35$0 (as len Int) ls$35$$35$a1uT)) (= (apply$35$$35$0 (as PopPush.pot Int) ls$35$$35$a1uT) (apply$35$$35$0 (as len Int) ls$35$$35$a1uT)) (>= (apply$35$$35$0 (as len Int) ls$35$$35$a1uT) 0)))
(define-fun b$36$$35$$35$278 () Bool (and (= VV$35$$35$F$35$$35$36 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$43$ Int) lq_anf$36$$35$$35$7205759403792803257$35$$35$d2vL) lq_anf$36$$35$$35$7205759403792803258$35$$35$d2vM)) (= VV$35$$35$F$35$$35$36 (+ lq_anf$36$$35$$35$7205759403792803257$35$$35$d2vL lq_anf$36$$35$$35$7205759403792803258$35$$35$d2vM))))
(define-fun b$36$$35$$35$279 () Bool (and (= VV$35$$35$F$35$$35$38 (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803255$35$$35$d2vJ)) (= VV$35$$35$F$35$$35$38 lq_anf$36$$35$$35$7205759403792803255$35$$35$d2vJ)))
(define-fun b$36$$35$$35$280 () Bool (and (= VV$35$$35$F$35$$35$39 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$43$ Int) lq_anf$36$$35$$35$7205759403792803252$35$$35$d2vG) lq_anf$36$$35$$35$7205759403792803253$35$$35$d2vH)) (= VV$35$$35$F$35$$35$39 (+ lq_anf$36$$35$$35$7205759403792803252$35$$35$d2vG lq_anf$36$$35$$35$7205759403792803253$35$$35$d2vH))))
(define-fun b$36$$35$$35$25 () Bool (= GHC.Num.$36$fNumInt GHC.Num.$36$fNumInt))
(define-fun b$36$$35$$35$89 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$185 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN)) (= lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1uU) ls$35$$35$a1uT)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN)) (= (apply$35$$35$0 (as PopPush.length Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (+ 1 (apply$35$$35$0 (as PopPush.length Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN)) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) a$35$$35$a1uU) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) a$35$$35$a1uU) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) ls$35$$35$a1uT) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) ls$35$$35$a1uT) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) 0)))
(define-fun b$36$$35$$35$281 () Bool (and (= VV$35$$35$F$35$$35$41 (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803250$35$$35$d2vE)) (= VV$35$$35$F$35$$35$41 lq_anf$36$$35$$35$7205759403792803250$35$$35$d2vE)))
(define-fun b$36$$35$$35$282 () Bool (and (= 0 (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$11)) (= VV$35$$35$F$35$$35$11 (apply$35$$35$5 (as Language.Haskell.Liquid.RTick.return Int) ys$35$$35$a1uV)) (= VV$35$$35$F$35$$35$11 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) 0 ys$35$$35$a1uV)) (= ys$35$$35$a1uV (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$11))))
(define-fun b$36$$35$$35$188 () Bool (>= ds_d2uM 0))
(define-fun b$36$$35$$35$284 () Bool (and (= VV$35$$35$F$35$$35$13 ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13))))
(define-fun b$36$$35$$35$157 () Bool (and (= (apply$35$$35$0 (as PopPush.pot Int) ds_d2vs) (apply$35$$35$0 (as len Int) ds_d2vs)) (>= (apply$35$$35$0 (as len Int) ds_d2vs) 0)))
(define-fun b$36$$35$$35$189 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) ys$35$$35$a1uV) (apply$35$$35$0 (as len Int) ys$35$$35$a1uV)) (= (apply$35$$35$0 (as PopPush.pot Int) ys$35$$35$a1uV) (apply$35$$35$0 (as len Int) ys$35$$35$a1uV)) (>= (apply$35$$35$0 (as len Int) ys$35$$35$a1uV) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) ys$35$$35$a1uV))))
(define-fun b$36$$35$$35$285 () Bool (and (= VV$35$$35$F$35$$35$16 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) (+ lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX)) (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX))) (= VV$35$$35$F$35$$35$16 (apply$35$$35$35 (apply$35$$35$0 (as Language.Haskell.Liquid.RTick.step Int) lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT) lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX)) (= (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$16)) (= (+ lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX)) (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$16))))
(define-fun b$36$$35$$35$158 () Bool (and (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD ds_d2vs) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0)))
(define-fun b$36$$35$$35$190 () Bool (and (= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO ds_d2uM) (>= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO 0)))
(define-fun b$36$$35$$35$95 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$159 () Bool (and (= lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD ds_d2vs) (= (apply$35$$35$0 (as PopPush.pot Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803249$35$$35$d2vD) 0)))
(define-fun b$36$$35$$35$191 () Bool (and (= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO ds_d2uM) (>= lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO 0)))
(define-fun b$36$$35$$35$287 () Bool (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) (- (apply$35$$35$0 (as len Int) xs$35$$35$a1uY) lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) 0)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$45 b$36$$35$$35$175 b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$179 b$36$$35$$35$180 b$36$$35$$35$181 b$36$$35$$35$278 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$95))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$36 (apply$35$$35$0 (as len Int) ds_d2vh))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$172 b$36$$35$$35$45 b$36$$35$$35$173 b$36$$35$$35$174 b$36$$35$$35$279 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$95))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$38 (apply$35$$35$0 (as len Int) ds_d2vh))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$162 b$36$$35$$35$164 b$36$$35$$35$165 b$36$$35$$35$166 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$45 b$36$$35$$35$280 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$157 b$36$$35$$35$158 b$36$$35$$35$95))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$39 (apply$35$$35$0 (as len Int) ds_d2vs))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$160 b$36$$35$$35$161 b$36$$35$$35$45 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$281 b$36$$35$$35$157 b$36$$35$$35$158 b$36$$35$$35$95 b$36$$35$$35$159))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$41 (apply$35$$35$0 (as len Int) ds_d2vs))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$45 b$36$$35$$35$210 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$282 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as PopPush.pot Int) ys$35$$35$a1uV) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$11) (apply$35$$35$0 (as PopPush.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$11))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$PopPush.push$35$$35$k_$35$$35$1169 Int) (lq_karg$36$ds_d2va$35$$35$k_$35$$35$1169 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1169 Int) (lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1169 Int) (lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1169 Int) (lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1169 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1169 Int) (lq_karg$36$VV$35$$35$1168$35$$35$k_$35$$35$1169 Int)) (and (= lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1169 PopPush.pop) (= lq_karg$36$PopPush.push$35$$35$k_$35$$35$1169 PopPush.push) (= lq_karg$36$VV$35$$35$1168$35$$35$k_$35$$35$1169 VV$35$$35$F$35$$35$12) (= lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1169 ds_d2uM) (= lq_karg$36$ds_d2va$35$$35$k_$35$$35$1169 ds_d2va) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1169 lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1169 lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP) (= lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1169 ys$35$$35$a1uV) (exists ((VV$35$$35$F$35$$35$13 Int)) (and (= VV$35$$35$F$35$$35$13 ys$35$$35$a1uV) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13) 0) (<= ds_d2uM (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1169 PopPush.pop) (= lq_karg$36$PopPush.push$35$$35$k_$35$$35$1169 PopPush.push) (= lq_karg$36$VV$35$$35$1168$35$$35$k_$35$$35$1169 VV$35$$35$F$35$$35$13) (= lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1169 ds_d2uM) (= lq_karg$36$ds_d2va$35$$35$k_$35$$35$1169 ds_d2va) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1169 lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1169 lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP) (= lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1169 ys$35$$35$a1uV))))) b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$45 b$36$$35$$35$210 b$36$$35$$35$25 b$36$$35$$35$89 (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$12) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$12) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) 0)) b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1uV) ds_d2uM))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$200 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$45 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$209 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$285 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as PopPush.pot Int) ys$35$$35$a1uV) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$16) (apply$35$$35$0 (as PopPush.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$16))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS$35$$35$k_$35$$35$1144 Int) (lq_karg$36$xs$35$$35$a1uY$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV$35$$35$k_$35$$35$1144 Int) (lq_karg$36$ds_d2va$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1144 Int) (lq_karg$36$PopPush.push$35$$35$k_$35$$35$1144 Int) (lq_karg$36$x$35$$35$a1uX$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX$35$$35$k_$35$$35$1144 (Language.Haskell.Liquid.RTick.Tick Int)) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1144 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW$35$$35$k_$35$$35$1144 Int) (lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1144 Int) (lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1144 Int) (lq_karg$36$VV$35$$35$1143$35$$35$k_$35$$35$1144 Int)) (and (= lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1144 PopPush.pop) (= lq_karg$36$PopPush.push$35$$35$k_$35$$35$1144 PopPush.push) (= lq_karg$36$VV$35$$35$1143$35$$35$k_$35$$35$1144 VV$35$$35$F$35$$35$17) (= lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1144 ds_d2uM) (= lq_karg$36$ds_d2va$35$$35$k_$35$$35$1144 ds_d2va) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX) (= lq_karg$36$x$35$$35$a1uX$35$$35$k_$35$$35$1144 x$35$$35$a1uX) (= lq_karg$36$xs$35$$35$a1uY$35$$35$k_$35$$35$1144 xs$35$$35$a1uY) (= lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1144 ys$35$$35$a1uV) (exists ((VV$35$$35$F$35$$35$18 Int)) (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) (- (apply$35$$35$0 (as len Int) xs$35$$35$a1uY) lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) 0) (= lq_karg$36$PopPush.pop$35$$35$k_$35$$35$1144 PopPush.pop) (= lq_karg$36$PopPush.push$35$$35$k_$35$$35$1144 PopPush.push) (= lq_karg$36$VV$35$$35$1143$35$$35$k_$35$$35$1144 VV$35$$35$F$35$$35$18) (= lq_karg$36$ds_d2uM$35$$35$k_$35$$35$1144 ds_d2uM) (= lq_karg$36$ds_d2va$35$$35$k_$35$$35$1144 ds_d2va) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803260$35$$35$d2vO) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803261$35$$35$d2vP) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803262$35$$35$d2vQ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803264$35$$35$d2vS) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803265$35$$35$d2vT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803266$35$$35$d2vU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803267$35$$35$d2vV) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX$35$$35$k_$35$$35$1144 lq_anf$36$$35$$35$7205759403792803269$35$$35$d2vX) (= lq_karg$36$x$35$$35$a1uX$35$$35$k_$35$$35$1144 x$35$$35$a1uX) (= lq_karg$36$xs$35$$35$a1uY$35$$35$k_$35$$35$1144 xs$35$$35$a1uY) (= lq_karg$36$ys$35$$35$a1uV$35$$35$k_$35$$35$1144 ys$35$$35$a1uV))))) b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$200 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$45 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$209 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$17) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$17) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17) 0)) b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1uV) ds_d2uM))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$288 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$200 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$45 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792803268$35$$35$d2vW (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$193 b$36$$35$$35$289 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$200 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$45 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$23 0)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$193 b$36$$35$$35$194 (= VV$35$$35$F$35$$35$24 (apply$35$$35$17 (as Control.Exception.Base.patError Int) lq_anf$36$$35$$35$7205759403792803263$35$$35$d2vR)) b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$199 b$36$$35$$35$45 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as PopPush.pot Int) ys$35$$35$a1uV) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$24) (apply$35$$35$0 (as PopPush.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$24))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$25) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$25) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)) b$36$$35$$35$196 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$199 b$36$$35$$35$45 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1uV) ds_d2uM))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$292 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$199 b$36$$35$$35$45 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$95 b$36$$35$$35$191))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$293 b$36$$35$$35$45 b$36$$35$$35$182 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$185 b$36$$35$$35$95))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as PopPush.pot Int) ls$35$$35$a1uT) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$27) (apply$35$$35$0 (as PopPush.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$27))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$VV$35$$35$949$35$$35$k_$35$$35$950 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN$35$$35$k_$35$$35$950 Int) (lq_karg$36$a$35$$35$a1uU$35$$35$k_$35$$35$950 Int) (lq_karg$36$ls$35$$35$a1uT$35$$35$k_$35$$35$950 Int)) (and (= lq_karg$36$VV$35$$35$949$35$$35$k_$35$$35$950 VV$35$$35$F$35$$35$28) (= lq_karg$36$a$35$$35$a1uU$35$$35$k_$35$$35$950 a$35$$35$a1uU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN$35$$35$k_$35$$35$950 lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (= lq_karg$36$ls$35$$35$a1uT$35$$35$k_$35$$35$950 ls$35$$35$a1uT) (exists ((VV$35$$35$F$35$$35$29 Int)) (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) VV$35$$35$F$35$$35$29) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) VV$35$$35$F$35$$35$29)) (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (= VV$35$$35$F$35$$35$29 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1uU) ls$35$$35$a1uT)) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as PopPush.length Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as PopPush.pot Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as head Int) VV$35$$35$F$35$$35$29) a$35$$35$a1uU) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1uT))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) VV$35$$35$F$35$$35$29) a$35$$35$a1uU) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1uT) (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1uT) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0) (= lq_karg$36$VV$35$$35$949$35$$35$k_$35$$35$950 VV$35$$35$F$35$$35$29) (= lq_karg$36$a$35$$35$a1uU$35$$35$k_$35$$35$950 a$35$$35$a1uU) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN$35$$35$k_$35$$35$950 lq_anf$36$$35$$35$7205759403792803259$35$$35$d2vN) (= lq_karg$36$ls$35$$35$a1uT$35$$35$k_$35$$35$950 ls$35$$35$a1uT))))) (and (= (apply$35$$35$0 (as PopPush.length Int) VV$35$$35$F$35$$35$28) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28)) (= (apply$35$$35$0 (as PopPush.pot Int) VV$35$$35$F$35$$35$28) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28) 0)) b$36$$35$$35$45 b$36$$35$$35$182 b$36$$35$$35$25 b$36$$35$$35$89 b$36$$35$$35$185 b$36$$35$$35$95))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1uT)))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
