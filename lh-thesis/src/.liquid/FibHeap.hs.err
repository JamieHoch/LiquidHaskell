{"o_vars":null,"o_types":[[{"spanInfo":{"endLine":53,"filename":"src/FibHeap.hs","endCol":13,"startLine":53,"startCol":1},"realSpan":true},[[null,"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":27,"startLine":64,"startCol":20},"realSpan":true},[["lq_anf$##7205759403792805676","GHC.Types.Int"]]],[{"spanInfo":{"endLine":42,"filename":"src/FibHeap.hs","endCol":25,"startLine":41,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805589","{v : (FibHeap.FibHeap a) | (isEmptyFibHeap v\n                            && not (notEmptyFibHeap v))\n                           || (notEmptyFibHeap v\n                               && not (isEmptyFibHeap v))\n                           && 0 < fibsize v}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":44,"startLine":73,"startCol":38},"realSpan":true},[["minTr1","{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":1,"filename":"src/FibHeap.hs","endCol":1,"startLine":1,"startCol":1},"realSpan":true},[["FibHeap.$trModule","GHC.Types.Module"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":39,"startLine":87,"startCol":37},"realSpan":true},[["ds_d33M","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":35,"startLine":79,"startCol":1},"realSpan":true},[["$dOrd_a2bK","{v : (GHC.Classes.Ord a) | v == $dOrd_a2bK}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":34,"startLine":79,"startCol":33},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":28},"realSpan":true},[["r","{v : GHC.Types.Int | v == r\n                     && v >= 0}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805691","{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":9,"startLine":79,"startCol":8},"realSpan":true},[["h","(FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":12,"startLine":111,"startCol":10},"realSpan":true},[["xs","[a]"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":42,"startLine":65,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805673","{v : [(FibHeap.FibTree a)] | len v == 1 + len ts2\n                             && lqdc##$select v == ts2\n                             && tail v == ts2}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":17,"startLine":106,"startCol":14},"realSpan":true},[["ts'","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":68,"startLine":107,"startCol":65},"realSpan":true},[["ts'","{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":62,"startLine":73,"startCol":45},"realSpan":true},[["lq_anf$##7205759403792805610","{v : [(FibHeap.FibTree a)] | head v == minTr2\n                             && lqdc##$select v == minTr2}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":63,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805669","{v : GHC.Types.Bool | v <=> x < y}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":32,"startLine":111,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805613","{v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                           && not (notEmptyFibHeap v)\n                           && v == E}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":26,"startLine":65,"startCol":25},"realSpan":true},[["r","{v : GHC.Types.Int | v == r\n                     && v >= 0}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":49,"startLine":105,"startCol":36},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"]]],[{"spanInfo":{"endLine":53,"filename":"src/FibHeap.hs","endCol":9,"startLine":53,"startCol":1},"realSpan":true},[["FibHeap.makeHeap","forall a . {VV : (FibHeap.FibHeap a) | not (notEmptyFibHeap VV)}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":27,"startLine":111,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805612","x1:(FibHeap.FibHeap a) -> x2:a -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                             && (root (minTree v) == root (minTree x1)\n                                                                 && root (minTree x1) <= x2)\n                                                                || ((x2 <= root (minTree x1)\n                                                                     || not (notEmptyFibHeap x1))\n                                                                    && root (minTree v) == x2)}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":19,"startLine":90,"startCol":18},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":129,"filename":"src/FibHeap.hs","endCol":5,"startLine":129,"startCol":1},"realSpan":true},[["FibHeap.pow2","{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | 0 < VV}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":27},"realSpan":true},[["GHC.Types.:","{VV : forall a <p :: a a -> Bool>.\n      x1:a -> x2:[{VV : a<p x1> | true}]<\\x7 VV -> {VV : a<p x7> | true}> -> {v : [a]<\\x7 VV -> {VV : a<p x7> | true}> | v == : x1 x2\n                                                                                                                         && head v == x1\n                                                                                                                         && len v == 1 + len x2\n                                                                                                                         && lqdc##$select v == x1\n                                                                                                                         && lqdc##$select v == x2\n                                                                                                                         && lsize v == size x1 + lsize x2\n                                                                                                                         && tail v == x2} | VV == :}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":19},"realSpan":true},[["lq_anf$##7205759403792805684","GHC.Types.Int"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":7,"startLine":79,"startCol":1},"realSpan":true},[["FibHeap.insert","forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                              && (root (minTree VV) == root (minTree x2)\n                                                                  && root (minTree x2) <= x3)\n                                                                 || ((x3 <= root (minTree x2)\n                                                                      || not (notEmptyFibHeap x2))\n                                                                     && root (minTree VV) == x3)}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":25,"startLine":59,"startCol":24},"realSpan":true},[["lq_anf$##7205759403792805596","GHC.Types.Int"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":71,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805606","GHC.Types.Bool"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":11,"startLine":79,"startCol":10},"realSpan":true},[["x","a"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805703","GHC.Types.Bool"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":40},"realSpan":true},[["x'","{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":52,"startLine":108,"startCol":47},"realSpan":true},[["lq_anf$##7205759403792805719","{v : [(FibHeap.FibTree a)] | v == subtr\n                             && v == : x xs\n                             && head v == x\n                             && len v == 1 + len xs\n                             && lqdc##$select v == x\n                             && lqdc##$select v == xs\n                             && lsize v == size x + lsize xs\n                             && tail v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":26,"startLine":64,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805675","GHC.Types.Int"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":25,"startLine":82,"startCol":18},"realSpan":true},[[null,"{VV : forall a .\n      x1:(FibHeap.FibHeap a) -> {v : (FibHeap.FibTree a) | v == minTree x1} | VV == minTree}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":66,"startLine":91,"startCol":64},"realSpan":true},[["x'","{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":12,"startLine":106,"startCol":6},"realSpan":true},[["minTr'","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":36,"startLine":74,"startCol":30},"realSpan":true},[["minTr1","{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":34,"startLine":98,"startCol":32},"realSpan":true},[["ds_d318","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":28,"startLine":74,"startCol":22},"realSpan":true},[["minTr2","{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":9,"startLine":90,"startCol":5},"realSpan":true},[["meld","forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":104,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805720","{v : GHC.Prim.Addr# | v == \"src/FibHeap.hs:(104,1)-(108,58)|function deleteMin\"}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":26},"realSpan":true},[["minTr2","{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":61,"startLine":73,"startCol":53},"realSpan":true},[["lq_anf$##7205759403792805609","{v : [(FibHeap.FibTree a)] | len v == len ts2 + len ts1}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":61,"startLine":106,"startCol":56},"realSpan":true},[["ds_d35A","{v : (FibHeap.FibTree a) | size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":63,"startLine":91,"startCol":62},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":41,"filename":"src/FibHeap.hs","endCol":16,"startLine":41,"startCol":1},"realSpan":true},[["FibHeap.notEmptyFibHeap","forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | VV <=> notEmptyFibHeap x1}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":67,"startLine":106,"startCol":65},"realSpan":true},[["ds_d35B","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":31,"startLine":91,"startCol":30},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":12,"startLine":59,"startCol":11},"realSpan":true},[["x","a"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":9,"startLine":111,"startCol":1},"realSpan":true},[["FibHeap.fromList","forall a . (GHC.Classes.Ord<[]> a) => [a] -> (FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805723","{v : [(FibHeap.FibTree a)] | len v > 0}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":21},"realSpan":true},[[null,"((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":16},"realSpan":true},[["GHC.Num.$fNumInt","{v : (GHC.Num.Num GHC.Types.Int) | v == $fNumInt}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":44,"startLine":64,"startCol":15},"realSpan":true},[["FibHeap.Node","{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":8,"startLine":82,"startCol":1},"realSpan":true},[["FibHeap.findMin","forall a . (GHC.Classes.Ord<[]> a) => (FibHeap.FibHeap a) -> a"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":32,"startLine":111,"startCol":30},"realSpan":true},[["xs","{v : [a] | v == xs\n           && len v >= 0\n           && lsize v >= len v}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":31,"startLine":108,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805721","{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":41,"startLine":99,"startCol":34},"realSpan":true},[["GHC.Tuple.(,)","{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":44},"realSpan":true},[["ts","{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":55,"startLine":91,"startCol":53},"realSpan":true},[["xs","{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":35,"startLine":118,"startCol":30},"realSpan":true},[["minTr","{v : (FibHeap.FibTree a) | v == minTr\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":90,"startCol":5},"realSpan":true},[["lq_anf$##7205759403792805699","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":32,"startLine":87,"startCol":28},"realSpan":true},[["lq_anf$##7205759403792805707","x1:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x1 + 1}"]]],[{"spanInfo":{"endLine":47,"filename":"src/FibHeap.hs","endCol":15,"startLine":47,"startCol":1},"realSpan":true},[["FibHeap.isEmptyFibHeap","forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | (VV\n                                                  && not (notEmptyFibHeap x1))\n                                                 || (notEmptyFibHeap x1\n                                                     && not VV)\n                                                 && (VV <=> isEmptyFibHeap x1)}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":91,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805704","GHC.Types.Bool"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":62,"startLine":73,"startCol":35},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"]]],[{"spanInfo":{"endLine":123,"filename":"src/FibHeap.hs","endCol":13,"startLine":123,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805689","{v : GHC.Prim.Int# | v == 0}"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":6,"startLine":71,"startCol":1},"realSpan":true},[["FibHeap.merge","forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                                                                            && (root (minTree VV) == root (minTree x2)\n                                                                                                                && root (minTree x2) < root (minTree x3))\n                                                                                                               || ((root (minTree x3) <= root (minTree x2)\n                                                                                                                    || not (notEmptyFibHeap x2))\n                                                                                                                   && root (minTree VV) == root (minTree x3))}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":18,"startLine":73,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805603","{VV : a | VV == root minTr1}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":56,"startLine":73,"startCol":53},"realSpan":true},[["ts2","{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":35,"startLine":87,"startCol":34},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":36,"startLine":59,"startCol":31},"realSpan":true},[["GHC.Types.False","{v : GHC.Types.Bool | not v\n                      && v == False}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":18,"startLine":99,"startCol":17},"realSpan":true},[["t","{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":39,"startLine":87,"startCol":22},"realSpan":true},[["Data.Foldable.$fFoldable[]","{v : (Data.Foldable.Foldable []) | v == $fFoldable[]}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805705","{v : [(FibHeap.FibTree a)] | v == : x' xs\n                             && head v == x'\n                             && len v == 1 + len xs\n                             && lqdc##$select v == x'\n                             && lqdc##$select v == xs\n                             && lsize v == size x' + lsize xs\n                             && tail v == xs}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":30,"startLine":59,"startCol":28},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":5,"startLine":135,"startCol":1},"realSpan":true},[["FibHeap.size","forall a .\nx1:(FibHeap.FibTree a) -> {VV : GHC.Types.Int | VV == pow2 (rank x1)\n                                                && VV == size x1\n                                                && 0 < VV}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":20,"startLine":96,"startCol":19},"realSpan":true},[["t","{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":104,"filename":"src/FibHeap.hs","endCol":39,"startLine":104,"startCol":38},"realSpan":true},[[null,"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"]]],[{"spanInfo":{"endLine":41,"filename":"src/FibHeap.hs","endCol":26,"startLine":41,"startCol":21},"realSpan":true},[["GHC.Types.False","{v : GHC.Types.Bool | not v\n                      && v == False}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805620","{VV : a | VV == root t'}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":21},"realSpan":true},[[null,"((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":11,"startLine":96,"startCol":1},"realSpan":true},[["FibHeap.extractMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":10},"realSpan":true},[["GHC.Num.$fNumInt","{v : (GHC.Num.Num GHC.Types.Int) | v == $fNumInt}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":38,"startLine":64,"startCol":30},"realSpan":true},[["lq_anf$##7205759403792805677","{v : [(FibHeap.FibTree a)] | len v == 1 + len ts1\n                             && lqdc##$select v == ts1\n                             && tail v == ts1}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":33,"startLine":65,"startCol":32},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":23},"realSpan":true},[["FibHeap.pow2","x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v == pow2 x1\n                                                        && v == (if 0 == x1 then 1 else 2 * pow2 (x1 - 1))\n                                                        && 0 < v}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805693","{v : GHC.Prim.Addr# | v == \"src/FibHeap.hs:118:1-45|function fibsize\"}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":31,"startLine":91,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805701","{v : GHC.Types.Int | v == rank x\n                     && v >= 0}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":52,"startLine":73,"startCol":46},"realSpan":true},[["minTr2","{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":35,"startLine":79,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805611","{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && rank (minTree v) == 1\n                           && root (minTree v) == x\n                           && subtrees (minTree v) == []\n                           && trees v == []}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":31,"startLine":106,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805724","{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":14,"startLine":71,"startCol":13},"realSpan":true},[["h","{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && (isEmptyFibHeap v\n                               && not (notEmptyFibHeap v))\n                              || (notEmptyFibHeap v\n                                  && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":12,"startLine":108,"startCol":6},"realSpan":true},[["minTr'","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":123,"filename":"src/FibHeap.hs","endCol":6,"startLine":123,"startCol":1},"realSpan":true},[["FibHeap.lsize","forall a .\nx1:[(FibHeap.FibTree a)] -> {VV : GHC.Types.Int | VV == lsize x1\n                                                  && VV >= len x1}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":36,"startLine":99,"startCol":35},"realSpan":true},[["t","{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":22,"startLine":124,"startCol":21},"realSpan":true},[["t","{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":48,"filename":"src/FibHeap.hs","endCol":25,"startLine":48,"startCol":20},"realSpan":true},[["GHC.Types.False","{v : GHC.Types.Bool | not v\n                      && v == False}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":12,"startLine":64,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805668","{v : GHC.Types.Bool | v <=> x < y}"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":64,"startLine":107,"startCol":58},"realSpan":true},[["minTr'","{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":45,"startLine":105,"startCol":39},"realSpan":true},[["minTr'","{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":44,"startLine":64,"startCol":39},"realSpan":true},[["GHC.Types.False","{v : GHC.Types.Bool | not v\n                      && v == False}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":12,"startLine":86,"startCol":1},"realSpan":true},[["FibHeap.consolidate","forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> {v : [(FibHeap.FibTree a)] | len v > 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":45,"startLine":74,"startCol":42},"realSpan":true},[["ts2","{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":28,"startLine":63,"startCol":26},"realSpan":true},[["t2","{t2 : (FibHeap.FibTree a) | rank t1 == rank t2}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":14},"realSpan":true},[["lq_anf$##7205759403792805685","{VV : GHC.Types.Int | 0 < VV}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":65,"startCol":43},"realSpan":true},[["GHC.Types.False","{v : GHC.Types.Bool | not v\n                      && v == False}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":31,"startLine":92,"startCol":29},"realSpan":true},[["x'","{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805727","{v : [(FibHeap.FibTree a)] | len v > 0}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":31},"realSpan":true},[["ts","{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":45,"startLine":74,"startCol":37},"realSpan":true},[["lq_anf$##7205759403792805607","{v : [(FibHeap.FibTree a)] | len v == len ts1 + len ts2}"]]],[{"spanInfo":{"endLine":47,"filename":"src/FibHeap.hs","endCol":24,"startLine":47,"startCol":20},"realSpan":true},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":25,"startLine":96,"startCol":18},"realSpan":true},[["lq_anf$##7205759403792805624","{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":17,"startLine":108,"startCol":14},"realSpan":true},[["ts'","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":23,"startLine":130,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805683","GHC.Types.Int"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":34,"startLine":98,"startCol":21},"realSpan":true},[["FibHeap.extractMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805621","GHC.Types.Bool"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":61,"startLine":73,"startCol":58},"realSpan":true},[["ts1","{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805604","{VV : a | VV == root minTr2}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":35,"startLine":118,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805694","{v : GHC.Types.Int | v == pow2 (rank minTr)\n                     && v == size minTr\n                     && 0 < v}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":53,"startLine":99,"startCol":52},"realSpan":true},[["t","{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":68,"startLine":107,"startCol":55},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":49,"startLine":105,"startCol":46},"realSpan":true},[["ts'","{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":8,"startLine":64,"startCol":7},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":5,"startLine":63,"startCol":1},"realSpan":true},[["FibHeap.link","forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibTree a) -> x3:{t2 : (FibHeap.FibTree a) | rank x2 == rank t2} -> {v : (FibHeap.FibTree a) | (root v == root x2\n                                                                                                            && root x2 <= root x3)\n                                                                                                           || (root v == root x3\n                                                                                                               && root x3 <= root x2)\n                                                                                                           && rank v == 1 + rank x2}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":40,"startLine":59,"startCol":38},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":40,"startLine":74,"startCol":37},"realSpan":true},[["ts1","{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":123,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805688","{v : [(FibHeap.FibTree a)] | len v >= 0}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805687","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":26},"realSpan":true},[["t'","{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":8,"startLine":118,"startCol":1},"realSpan":true},[["FibHeap.fibsize","forall a .\nx1:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : GHC.Types.Int | VV == fibsize x1\n                                                                            && 0 < VV}"]]],[{"spanInfo":{"endLine":104,"filename":"src/FibHeap.hs","endCol":10,"startLine":104,"startCol":1},"realSpan":true},[["FibHeap.deleteMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> (FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":46},"realSpan":true},[["lq_anf$##7205759403792805726","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":33,"startLine":64,"startCol":31},"realSpan":true},[["lq_anf$##7205759403792805667","{v : (FibHeap.FibTree a) | v == t2\n                           && rank t1 == rank v\n                           && root v == y\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts2\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":67,"startLine":91,"startCol":48},"realSpan":true},[["meld","forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":35},"realSpan":true},[["lq_anf$##7205759403792805702","{v : GHC.Types.Int | v == rank x'\n                     && v >= 0}"]]],[{"spanInfo":{"endLine":42,"filename":"src/FibHeap.hs","endCol":25,"startLine":42,"startCol":21},"realSpan":true},[["GHC.Types.True","{v : GHC.Types.Bool | v\n                      && v == True}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":25},"realSpan":true},[["GHC.Num.$fNumInt","{v : (GHC.Num.Num GHC.Types.Int) | v == $fNumInt}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":14,"startLine":90,"startCol":13},"realSpan":true},[["x","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":18,"startLine":73,"startCol":12},"realSpan":true},[["minTr1","{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":21,"startLine":86,"startCol":20},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":37,"startLine":64,"startCol":34},"realSpan":true},[["ts1","{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":74,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805608","{v : [(FibHeap.FibTree a)] | head v == minTr1\n                             && lqdc##$select v == minTr1}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":29,"startLine":111,"startCol":28},"realSpan":true},[[null,"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":27,"startLine":59,"startCol":26},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":57,"startLine":99,"startCol":52},"realSpan":true},[["lq_anf$##7205759403792805623","{v : [(FibHeap.FibTree a)] | v == : t ts'\n                             && head v == t\n                             && len v == 1 + len ts'\n                             && lqdc##$select v == t\n                             && lqdc##$select v == ts'\n                             && lsize v == size t + lsize ts'\n                             && tail v == ts'}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":31,"startLine":65,"startCol":24},"realSpan":true},[["lq_anf$##7205759403792805672","GHC.Types.Int"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":21,"startLine":79,"startCol":20},"realSpan":true},[["h","{v : (FibHeap.FibHeap a) | (isEmptyFibHeap v\n                            && not (notEmptyFibHeap v))\n                           || (notEmptyFibHeap v\n                               && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":129,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805679","GHC.Prim.Int#"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":38},"realSpan":true},[["lq_anf$##7205759403792805695","{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":24,"startLine":96,"startCol":22},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":10,"startLine":71,"startCol":9},"realSpan":true},[["h","{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":32},"realSpan":true},[["xs","{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":58,"startLine":108,"startCol":56},"realSpan":true},[["ds_d35B","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":8,"startLine":63,"startCol":6},"realSpan":true},[["t1","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":28,"startLine":92,"startCol":27},"realSpan":true},[["x","{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":48,"filename":"src/FibHeap.hs","endCol":25,"startLine":47,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805592","{v : (FibHeap.FibHeap a) | 0 < fibsize v}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":17,"startLine":98,"startCol":14},"realSpan":true},[["ts'","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":74,"startCol":19},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":18,"startLine":99,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805619","{VV : a | VV == root t}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":15,"startLine":82,"startCol":11},"realSpan":true},[[null,"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> {VV : a | VV == root x1} | VV == root}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":65,"startCol":19},"realSpan":true},[["FibHeap.Node","{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":30,"startLine":65,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805671","GHC.Types.Int"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":12,"startLine":98,"startCol":10},"realSpan":true},[["t'","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":99,"startCol":47},"realSpan":true},[["GHC.Tuple.(,)","{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":25,"startLine":82,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805615","x1:(FibHeap.FibHeap a) -> {v : (FibHeap.FibTree a) | v == minTree x1}"]]],[{"spanInfo":{"endLine":129,"filename":"src/FibHeap.hs","endCol":11,"startLine":129,"startCol":10},"realSpan":true},[["lq_anf$##7205759403792805686","{v : GHC.Prim.Int# | v == 1}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":21,"startLine":130,"startCol":20},"realSpan":true},[["ds_d2ZD","{v : GHC.Types.Int | v >= 0}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":86,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805698","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":11,"startLine":130,"startCol":10},"realSpan":true},[["lq_anf$##7205759403792805681","GHC.Types.Int"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":98,"startCol":5},"realSpan":true},[["lq_anf$##7205759403792805622","GHC.Types.Bool"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":10,"startLine":59,"startCol":1},"realSpan":true},[["FibHeap.singleton","forall a .\nx1:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                    && rank (minTree VV) == 1\n                                    && root (minTree VV) == x1\n                                    && subtrees (minTree VV) == []\n                                    && trees VV == []}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":22,"startLine":124,"startCol":16},"realSpan":true},[["lq_anf$##7205759403792805690","{v : GHC.Types.Int | v == pow2 (rank t)\n                     && v == size t\n                     && 0 < v}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":41,"startLine":65,"startCol":38},"realSpan":true},[["ts2","{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":61,"startLine":106,"startCol":47},"realSpan":true},[["lq_anf$##7205759403792805725","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":22,"startLine":64,"startCol":21},"realSpan":true},[["r","{v : GHC.Types.Int | v == r\n                     && v >= 0}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":29,"startLine":64,"startCol":28},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":96,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805618","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":12,"startLine":64,"startCol":11},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":37,"startLine":65,"startCol":35},"realSpan":true},[["lq_anf$##7205759403792805666","{v : (FibHeap.FibTree a) | v == t1\n                           && rank v == r\n                           && root v == x\n                           && size v == pow2 r\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts1\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":22,"startLine":86,"startCol":19},"realSpan":true},[["lq_anf$##7205759403792805710","{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":20,"startLine":90,"startCol":17},"realSpan":true},[["lq_anf$##7205759403792805700","{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":46},"realSpan":true},[["lq_anf$##7205759403792805722","[(FibHeap.FibTree a)]"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":40,"startLine":99,"startCol":38},"realSpan":true},[["ds_d318","{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":50,"startLine":99,"startCol":48},"realSpan":true},[["t'","{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":57,"startLine":99,"startCol":54},"realSpan":true},[["ts'","{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":67,"startLine":91,"startCol":56},"realSpan":true},[["lq_anf$##7205759403792805706","{v : (FibHeap.FibTree a) | (root v == root x\n                            && root x <= root x')\n                           || (root v == root x'\n                               && root x' <= root x)\n                           && rank v == 1 + rank x}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":36,"startLine":87,"startCol":33},"realSpan":true},[["lq_anf$##7205759403792805709","{v : [(FibHeap.FibTree a)] | head v == x\n                             && lqdc##$select v == x}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":40,"startLine":59,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805599","{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":37,"startLine":59,"startCol":18},"realSpan":true},[["lq_anf$##7205759403792805598","{v : (FibHeap.FibTree a) | marked v == False\n                           && root v == x}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805605","GHC.Types.Bool"]]]],"o_templs":[[{"spanInfo":{"endLine":53,"filename":"src/FibHeap.hs","endCol":13,"startLine":53,"startCol":1},"realSpan":true},[[null,"{VV : forall a .\n      {lq_tmp$x##773 : (FibHeap.FibHeap a) | FibHeap.isEmptyFibHeap lq_tmp$x##773\n                                             && is$FibHeap.E lq_tmp$x##773\n                                             && not (FibHeap.notEmptyFibHeap lq_tmp$x##773)\n                                             && not (is$FibHeap.FH lq_tmp$x##773)\n                                             && lq_tmp$x##773 == FibHeap.E} | VV == FibHeap.E}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":27,"startLine":64,"startCol":20},"realSpan":true},[["lq_anf$##7205759403792805676","{lq_tmp$x##2923 : GHC.Types.Int | lq_tmp$x##2923 == r##a23G + lq_anf$##7205759403792805675##d38L}"]]],[{"spanInfo":{"endLine":42,"filename":"src/FibHeap.hs","endCol":25,"startLine":41,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805589","{lq_tmp$x##675 : (FibHeap.FibHeap a) | (FibHeap.isEmptyFibHeap lq_tmp$x##675\n                                        && not (FibHeap.notEmptyFibHeap lq_tmp$x##675))\n                                       || (FibHeap.notEmptyFibHeap lq_tmp$x##675\n                                           && not (FibHeap.isEmptyFibHeap lq_tmp$x##675))\n                                       && lq_tmp$x##675 == ds_d36A\n                                       && 0 < FibHeap.fibsize lq_tmp$x##675}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":44,"startLine":73,"startCol":38},"realSpan":true},[["minTr1","{lq_tmp$x##1263 : (FibHeap.FibTree a) | lq_tmp$x##1263 == minTr1##a23O\n                                        && FibHeap.size lq_tmp$x##1263 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1263)\n                                        && 0 < FibHeap.size lq_tmp$x##1263}"]]],[{"spanInfo":{"endLine":1,"filename":"src/FibHeap.hs","endCol":1,"startLine":1,"startCol":1},"realSpan":true},[["FibHeap.$trModule","{VV##2102 : GHC.Types.Module | $k_##2103}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":39,"startLine":87,"startCol":37},"realSpan":true},[["ds_d33M","{lq_tmp$x##4088 : [(FibHeap.FibTree a)] | lq_tmp$x##4088 == ds_d33M\n                                          && FibHeap.lsize lq_tmp$x##4088 >= len lq_tmp$x##4088\n                                          && len lq_tmp$x##4088 >= 0}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":35,"startLine":79,"startCol":1},"realSpan":true},[["$dOrd_a2bK","{lq_tmp$x##1309 : (GHC.Classes.Ord a) | lq_tmp$x##1309 == $dOrd_a2bK}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":34,"startLine":79,"startCol":33},"realSpan":true},[["x","{lq_tmp$x##1289 : a | lq_tmp$x##1289 == x##a23U}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":28},"realSpan":true},[["r","{lq_tmp$x##3143 : GHC.Types.Int | lq_tmp$x##3143 == r##a24v\n                                  && lq_tmp$x##3143 >= 0}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805691","{lq_tmp$x##3238 : GHC.Types.Int | lq_tmp$x##3238 == FibHeap.lsize ts##a24t\n                                  && lq_tmp$x##3238 >= len ts##a24t}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":9,"startLine":79,"startCol":8},"realSpan":true},[["h","(FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":12,"startLine":111,"startCol":10},"realSpan":true},[["xs","[a]"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":42,"startLine":65,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805673","{lq_tmp$x##2835 : [{lq_tmp$x##2848 : (FibHeap.FibTree {lq_tmp$x##2847 : a | $k_##2844[VV##2843:=lq_tmp$x##2847][VV##2845:=lq_tmp$x##2848][lq_tmp$x##2839:=lq_anf$##7205759403792805666##d38C][lq_tmp$x##2840:=ts2##a23L]}) | $k_##2846[VV##2845:=lq_tmp$x##2848][lq_tmp$x##2839:=lq_anf$##7205759403792805666##d38C][lq_tmp$x##2840:=ts2##a23L]}]<\\lq_tmp$x##2842 VV -> {lq_tmp$x##2848 : (FibHeap.FibTree {lq_tmp$x##2847 : a | $k_##2850[VV##2849:=lq_tmp$x##2847][VV##2851:=lq_tmp$x##2848][lq_tmp$x##2839:=lq_anf$##7205759403792805666##d38C][lq_tmp$x##2840:=ts2##a23L][lq_tmp$x##2853:=lq_tmp$x##2842]}) | $k_##2852[VV##2851:=lq_tmp$x##2848][lq_tmp$x##2839:=lq_anf$##7205759403792805666##d38C][lq_tmp$x##2840:=ts2##a23L][lq_tmp$x##2853:=lq_tmp$x##2842]}> | is$GHC.Types.: lq_tmp$x##2835\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         && not (is$GHC.Types.[] lq_tmp$x##2835)\nlq_tmp$x##2835 == GHC.Types.: lq_anf$##7205759403792805666##d38C ts2##a23L\nibHeap.lsize lq_tmp$x##2835 == FibHeap.size lq_anf$##7205759403792805666##d38C + FibHeap.lsize ts2##a23L\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         && head lq_tmp$x##2835 == lq_anf$##7205759403792805666##d38C\nlen lq_tmp$x##2835 == 1 + len ts2##a23L\nlqdc##$select##GHC.Types.:##1 lq_tmp$x##2835 == lq_anf$##7205759403792805666##d38C\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##2835 == ts2##a23L\ntail lq_tmp$x##2835 == ts2##a23L}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":17,"startLine":106,"startCol":14},"realSpan":true},[["ts'","{VV##6147 : [{VV##6140 : (FibHeap.FibTree {VV##6138 : a | $k_##6139}) | $k_##6141}]<\\lq_tmp$x##6142 VV -> {VV##6145 : (FibHeap.FibTree {VV##6143 : a | $k_##6144}) | $k_##6146}> | $k_##6148}"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":68,"startLine":107,"startCol":65},"realSpan":true},[["ts'","{lq_tmp$x##5803 : [{lq_tmp$x##5799 : (FibHeap.FibTree {lq_tmp$x##5798 : a | $k_##5715[VV##5714:=lq_tmp$x##5798][VV##5716:=lq_tmp$x##5799][VV##5723:=lq_tmp$x##5803]}) | $k_##5717[VV##5716:=lq_tmp$x##5799][VV##5723:=lq_tmp$x##5803]}]<\\lq_tmp$x##5804 VV -> {lq_tmp$x##5802 : (FibHeap.FibTree {lq_tmp$x##5801 : a | $k_##5720[VV##5719:=lq_tmp$x##5801][VV##5721:=lq_tmp$x##5802][VV##5723:=lq_tmp$x##5803][lq_tmp$x##5718:=lq_tmp$x##5804][lq_tmp$x##5800:=lq_tmp$x##5804]}) | $k_##5722[VV##5721:=lq_tmp$x##5802][VV##5723:=lq_tmp$x##5803][lq_tmp$x##5718:=lq_tmp$x##5804][lq_tmp$x##5800:=lq_tmp$x##5804]}> | lq_tmp$x##5803 == ts'##a2bn\nibHeap.lsize lq_tmp$x##5803 >= len lq_tmp$x##5803\nlen lq_tmp$x##5803 >= 0\nk_##5724[VV##5723:=lq_tmp$x##5803]}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":62,"startLine":73,"startCol":45},"realSpan":true},[["lq_anf$##7205759403792805610","{lq_tmp$x##1213 : [{lq_tmp$x##1226 : (FibHeap.FibTree {lq_tmp$x##1225 : a | $k_##1222[VV##1221:=lq_tmp$x##1225][VV##1223:=lq_tmp$x##1226][lq_tmp$x##1217:=minTr2##a23R][lq_tmp$x##1218:=lq_anf$##7205759403792805609##d37H]}) | $k_##1224[VV##1223:=lq_tmp$x##1226][lq_tmp$x##1217:=minTr2##a23R][lq_tmp$x##1218:=lq_anf$##7205759403792805609##d37H]}]<\\lq_tmp$x##1220 VV -> {lq_tmp$x##1226 : (FibHeap.FibTree {lq_tmp$x##1225 : a | $k_##1228[VV##1227:=lq_tmp$x##1225][VV##1229:=lq_tmp$x##1226][lq_tmp$x##1217:=minTr2##a23R][lq_tmp$x##1218:=lq_anf$##7205759403792805609##d37H][lq_tmp$x##1231:=lq_tmp$x##1220]}) | $k_##1230[VV##1229:=lq_tmp$x##1226][lq_tmp$x##1217:=minTr2##a23R][lq_tmp$x##1218:=lq_anf$##7205759403792805609##d37H][lq_tmp$x##1231:=lq_tmp$x##1220]}> | is$GHC.Types.: lq_tmp$x##1213\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     && not (is$GHC.Types.[] lq_tmp$x##1213)\nlq_tmp$x##1213 == GHC.Types.: minTr2##a23R lq_anf$##7205759403792805609##d37H\nibHeap.lsize lq_tmp$x##1213 == FibHeap.size minTr2##a23R + FibHeap.lsize lq_anf$##7205759403792805609##d37H\nhead lq_tmp$x##1213 == minTr2##a23R\nlen lq_tmp$x##1213 == 1 + len lq_anf$##7205759403792805609##d37H\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     && lqdc##$select##GHC.Types.:##1 lq_tmp$x##1213 == minTr2##a23R\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##1213 == lq_anf$##7205759403792805609##d37H\ntail lq_tmp$x##1213 == lq_anf$##7205759403792805609##d37H}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":63,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805669","{lq_tmp$x##2795 : GHC.Types.Bool | (lq_tmp$x##2795 <=> x##a23H < y##a23K)\n                                   && lq_tmp$x##2795 == lq_anf$##7205759403792805668##d38E}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":32,"startLine":111,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805613","{lq_tmp$x##1344 : (FibHeap.FibHeap {lq_tmp$x##1347 : a | $k_##1346[VV##1345:=lq_tmp$x##1347]}) | FibHeap.isEmptyFibHeap lq_tmp$x##1344\n                                                                                                 && is$FibHeap.E lq_tmp$x##1344\n                                                                                                 && not (FibHeap.notEmptyFibHeap lq_tmp$x##1344)\n                                                                                                 && not (is$FibHeap.FH lq_tmp$x##1344)\n                                                                                                 && lq_tmp$x##1344 == FibHeap.E}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":26,"startLine":65,"startCol":25},"realSpan":true},[["r","{lq_tmp$x##2824 : GHC.Types.Int | lq_tmp$x##2824 == r##a23G\n                                  && lq_tmp$x##2824 >= 0}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":49,"startLine":105,"startCol":36},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      lq_tmp$x##6214:(FibHeap.FibTree a) -> lq_tmp$x##6215:[(FibHeap.FibTree a)] -> {lq_tmp$x##6210 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap lq_tmp$x##6210\n                                                                                                                            && is$FibHeap.FH lq_tmp$x##6210\n                                                                                                                            && not (FibHeap.isEmptyFibHeap lq_tmp$x##6210)\n                                                                                                                            && not (is$FibHeap.E lq_tmp$x##6210)\n                                                                                                                            && lq_tmp$x##6210 == FibHeap.FH lq_tmp$x##6214 lq_tmp$x##6215\n                                                                                                                            && FibHeap.fibsize lq_tmp$x##6210 == FibHeap.size lq_tmp$x##6214 + FibHeap.lsize lq_tmp$x##6215\n                                                                                                                            && FibHeap.minTree lq_tmp$x##6210 == lq_tmp$x##6214\n                                                                                                                            && FibHeap.trees lq_tmp$x##6210 == lq_tmp$x##6215} | VV == FibHeap.FH}"]]],[{"spanInfo":{"endLine":53,"filename":"src/FibHeap.hs","endCol":9,"startLine":53,"startCol":1},"realSpan":true},[["FibHeap.makeHeap","forall a .\n{VV##0 : (FibHeap.FibHeap a) | not (FibHeap.notEmptyFibHeap VV##0)}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":27,"startLine":111,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805612","lq_tmp$x##1335:(FibHeap.FibHeap {lq_tmp$x##1339 : a | $k_##1338[VV##1337:=lq_tmp$x##1339][lq_tmp$x##1334:=fix$36$$36$dOrd_a2bR]}) -> lq_tmp$x##1336:{lq_tmp$x##1339 : a | $k_##1338[VV##1337:=lq_tmp$x##1339][lq_tmp$x##1334:=fix$36$$36$dOrd_a2bR]} -> {lq_tmp$x##1330 : (FibHeap.FibHeap {lq_tmp$x##1339 : a | $k_##1338[VV##1337:=lq_tmp$x##1339][lq_tmp$x##1334:=fix$36$$36$dOrd_a2bR]}) | FibHeap.notEmptyFibHeap lq_tmp$x##1330\n                                                                                                                                                                                                                                                                                                                                                                                               && (FibHeap.root (FibHeap.minTree lq_tmp$x##1330) == FibHeap.root (FibHeap.minTree lq_tmp$x##1335)\n                                                                                                                                                                                                                                                                                                                                                                                                   && FibHeap.root (FibHeap.minTree lq_tmp$x##1335) <= lq_tmp$x##1336)\n                                                                                                                                                                                                                                                                                                                                                                                                  || ((lq_tmp$x##1336 <= FibHeap.root (FibHeap.minTree lq_tmp$x##1335)\n                                                                                                                                                                                                                                                                                                                                                                                                       || not (FibHeap.notEmptyFibHeap lq_tmp$x##1335))\n                                                                                                                                                                                                                                                                                                                                                                                                      && FibHeap.root (FibHeap.minTree lq_tmp$x##1330) == lq_tmp$x##1336)}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":19,"startLine":90,"startCol":18},"realSpan":true},[["x","{lq_tmp$x##3680 : (FibHeap.FibTree a) | lq_tmp$x##3680 == x##a240\n                                        && FibHeap.size lq_tmp$x##3680 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3680)\n                                        && 0 < FibHeap.size lq_tmp$x##3680}"]]],[{"spanInfo":{"endLine":129,"filename":"src/FibHeap.hs","endCol":5,"startLine":129,"startCol":1},"realSpan":true},[["FibHeap.pow2","lq_tmp$x##3006:{VV##0 : GHC.Types.Int | VV##0 >= 0} -> {VV##0 : GHC.Types.Int | 0 < VV##0}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":27},"realSpan":true},[["GHC.Types.:","{VV : forall a <p :: a a -> Bool>.\n      lq_tmp$x##3824:a -> lq_tmp$x##3825:[{lq_tmp$x##3813 : a<p lq_tmp$x##3824> | true}]<\\lq_tmp$x##3826 VV -> {lq_tmp$x##3815 : a<p lq_tmp$x##3826> | true}> -> {lq_tmp$x##3820 : [a]<\\lq_tmp$x##3827 VV -> {lq_tmp$x##3819 : a<p lq_tmp$x##3827> | true}> | is$GHC.Types.: lq_tmp$x##3820\n                                                                                                                                                                                                                                                              && not (is$GHC.Types.[] lq_tmp$x##3820)\n                                                                                                                                                                                                                                                              && lq_tmp$x##3820 == GHC.Types.: lq_tmp$x##3824 lq_tmp$x##3825\n                                                                                                                                                                                                                                                              && FibHeap.lsize lq_tmp$x##3820 == FibHeap.size lq_tmp$x##3824 + FibHeap.lsize lq_tmp$x##3825\n                                                                                                                                                                                                                                                              && head lq_tmp$x##3820 == lq_tmp$x##3824\n                                                                                                                                                                                                                                                              && len lq_tmp$x##3820 == 1 + len lq_tmp$x##3825\n                                                                                                                                                                                                                                                              && lqdc##$select##GHC.Types.:##1 lq_tmp$x##3820 == lq_tmp$x##3824\n                                                                                                                                                                                                                                                              && lqdc##$select##GHC.Types.:##2 lq_tmp$x##3820 == lq_tmp$x##3825\n                                                                                                                                                                                                                                                              && tail lq_tmp$x##3820 == lq_tmp$x##3825} | VV == GHC.Types.:}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":19},"realSpan":true},[["lq_anf$##7205759403792805684","{lq_tmp$x##3053 : GHC.Types.Int | lq_tmp$x##3053 == ds_d2ZD - lq_anf$##7205759403792805683##d38T}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":7,"startLine":79,"startCol":1},"realSpan":true},[["FibHeap.insert","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##1276:(FibHeap.FibHeap a) -> lq_tmp$x##1277:a -> {VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0\n                                                                                         && (FibHeap.root (FibHeap.minTree VV##0) == FibHeap.root (FibHeap.minTree lq_tmp$x##1276)\n                                                                                             && FibHeap.root (FibHeap.minTree lq_tmp$x##1276) <= lq_tmp$x##1277)\n                                                                                            || ((lq_tmp$x##1277 <= FibHeap.root (FibHeap.minTree lq_tmp$x##1276)\n                                                                                                 || not (FibHeap.notEmptyFibHeap lq_tmp$x##1276))\n                                                                                                && FibHeap.root (FibHeap.minTree VV##0) == lq_tmp$x##1277)}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":25,"startLine":59,"startCol":24},"realSpan":true},[["lq_anf$##7205759403792805596","{lq_tmp$x##783 : GHC.Types.Int | lq_tmp$x##783 == (lq_anf$##7205759403792805595##d37t : int)}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":71,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805606","{lq_tmp$x##1043 : GHC.Types.Bool | (lq_tmp$x##1043 <=> lq_anf$##7205759403792805603##d37B < lq_anf$##7205759403792805604##d37C)\n                                   && lq_tmp$x##1043 == lq_anf$##7205759403792805605##d37D}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":11,"startLine":79,"startCol":10},"realSpan":true},[["x","a"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805703","{lq_tmp$x##3752 : GHC.Types.Bool | lq_tmp$x##3752 <=> lq_anf$##7205759403792805701##d39b == lq_anf$##7205759403792805702##d39c}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":40},"realSpan":true},[["x'","{lq_tmp$x##3746 : (FibHeap.FibTree a) | lq_tmp$x##3746 == x'##a241\n                                        && FibHeap.size lq_tmp$x##3746 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3746)\n                                        && 0 < FibHeap.size lq_tmp$x##3746}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":52,"startLine":108,"startCol":47},"realSpan":true},[["lq_anf$##7205759403792805719","{lq_tmp$x##5507 : [(FibHeap.FibTree a)] | is$GHC.Types.: lq_tmp$x##5507\n                                          && not (is$GHC.Types.[] lq_tmp$x##5507)\n                                          && lq_tmp$x##5507 == lq_anf$##7205759403792805719##d39t\n                                          && lq_tmp$x##5507 == subtr##a24j\n                                          && lq_tmp$x##5507 == GHC.Types.: x##a24k xs##a24l\n                                          && FibHeap.lsize lq_tmp$x##5507 == FibHeap.size x##a24k + FibHeap.lsize xs##a24l\n                                          && head lq_tmp$x##5507 == x##a24k\n                                          && len lq_tmp$x##5507 == 1 + len xs##a24l\n                                          && lqdc##$select##GHC.Types.:##1 lq_tmp$x##5507 == x##a24k\n                                          && lqdc##$select##GHC.Types.:##2 lq_tmp$x##5507 == xs##a24l\n                                          && tail lq_tmp$x##5507 == xs##a24l\n                                          && FibHeap.lsize lq_tmp$x##5507 >= len lq_tmp$x##5507\n                                          && len lq_tmp$x##5507 >= 0}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":26,"startLine":64,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805675","{lq_tmp$x##2907 : GHC.Types.Int | lq_tmp$x##2907 == (lq_anf$##7205759403792805674##d38K : int)}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":25,"startLine":82,"startCol":18},"realSpan":true},[[null,"{VV : forall a .\n      lq_tmp$x##1418:(FibHeap.FibHeap a) -> {lq_tmp$x##1416 : (FibHeap.FibTree a) | lq_tmp$x##1416 == FibHeap.minTree lq_tmp$x##1418} | VV == FibHeap.minTree}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":66,"startLine":91,"startCol":64},"realSpan":true},[["x'","{lq_tmp$x##3876 : (FibHeap.FibTree a) | lq_tmp$x##3876 == x'##a241\n                                        && FibHeap.size lq_tmp$x##3876 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3876)\n                                        && 0 < FibHeap.size lq_tmp$x##3876}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":12,"startLine":106,"startCol":6},"realSpan":true},[["minTr'","{VV##6089 : (FibHeap.FibTree {VV##6087 : a | $k_##6088}) | $k_##6090}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":36,"startLine":74,"startCol":30},"realSpan":true},[["minTr1","{lq_tmp$x##1121 : (FibHeap.FibTree a) | lq_tmp$x##1121 == minTr1##a23O\n                                        && FibHeap.size lq_tmp$x##1121 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1121)\n                                        && 0 < FibHeap.size lq_tmp$x##1121}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":34,"startLine":98,"startCol":32},"realSpan":true},[["ds_d318","{lq_tmp$x##1779 : [(FibHeap.FibTree a)] | lq_tmp$x##1779 == ds_d318\n                                          && FibHeap.lsize lq_tmp$x##1779 >= len lq_tmp$x##1779\n                                          && len lq_tmp$x##1779 >= 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":28,"startLine":74,"startCol":22},"realSpan":true},[["minTr2","{lq_tmp$x##1150 : (FibHeap.FibTree a) | lq_tmp$x##1150 == minTr2##a23R\n                                        && FibHeap.size lq_tmp$x##1150 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1150)\n                                        && 0 < FibHeap.size lq_tmp$x##1150}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":9,"startLine":90,"startCol":5},"realSpan":true},[["meld","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##3599:[(FibHeap.FibTree a)] -> lq_tmp$x##3600:(FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                                           && len v <= len lq_tmp$x##3599 + 1}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":104,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805720","{lq_tmp$x##5382 : GHC.Prim.Addr# | lq_tmp$x##5382 == \"src/FibHeap.hs:(104,1)-(108,58)|function deleteMin\"}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":26},"realSpan":true},[["minTr2","{lq_tmp$x##1022 : (FibHeap.FibTree a) | lq_tmp$x##1022 == minTr2##a23R\n                                        && FibHeap.size lq_tmp$x##1022 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1022)\n                                        && 0 < FibHeap.size lq_tmp$x##1022}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":61,"startLine":73,"startCol":53},"realSpan":true},[["lq_anf$##7205759403792805609","{lq_tmp$x##1174 : [{lq_tmp$x##1189 : (FibHeap.FibTree {lq_tmp$x##1188 : a | $k_##1185[VV##1184:=lq_tmp$x##1188][VV##1186:=lq_tmp$x##1189][lq_tmp$x##1179:=ts2##a23S][lq_tmp$x##1180:=ts1##a23P]}) | $k_##1187[VV##1186:=lq_tmp$x##1189][lq_tmp$x##1179:=ts2##a23S][lq_tmp$x##1180:=ts1##a23P]}] | len lq_tmp$x##1174 == len ts2##a23S + len ts1##a23P}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":61,"startLine":106,"startCol":56},"realSpan":true},[["ds_d35A","{lq_tmp$x##5897 : (FibHeap.FibTree a) | lq_tmp$x##5897 == ds_d35A\n                                        && FibHeap.size lq_tmp$x##5897 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##5897)\n                                        && 0 < FibHeap.size lq_tmp$x##5897}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":63,"startLine":91,"startCol":62},"realSpan":true},[["x","{lq_tmp$x##3874 : (FibHeap.FibTree a) | lq_tmp$x##3874 == x##a240\n                                        && FibHeap.size lq_tmp$x##3874 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3874)\n                                        && 0 < FibHeap.size lq_tmp$x##3874}"]]],[{"spanInfo":{"endLine":41,"filename":"src/FibHeap.hs","endCol":16,"startLine":41,"startCol":1},"realSpan":true},[["FibHeap.notEmptyFibHeap","forall a .\nlq_tmp$x##672:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | VV <=> FibHeap.notEmptyFibHeap lq_tmp$x##672}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":67,"startLine":106,"startCol":65},"realSpan":true},[["ds_d35B","{lq_tmp$x##5938 : [(FibHeap.FibTree a)] | lq_tmp$x##5938 == ds_d35B\n                                          && FibHeap.lsize lq_tmp$x##5938 >= len lq_tmp$x##5938\n                                          && len lq_tmp$x##5938 >= 0}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":31,"startLine":91,"startCol":30},"realSpan":true},[["x","{lq_tmp$x##3735 : (FibHeap.FibTree a) | lq_tmp$x##3735 == x##a240\n                                        && FibHeap.size lq_tmp$x##3735 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3735)\n                                        && 0 < FibHeap.size lq_tmp$x##3735}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":12,"startLine":59,"startCol":11},"realSpan":true},[["x","a"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":9,"startLine":111,"startCol":1},"realSpan":true},[["FibHeap.fromList","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##1320:[a] -> (FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805723","{lq_tmp$x##5530 : [(FibHeap.FibTree {lq_tmp$x##5540 : a | $k_##5539[VV##5538:=lq_tmp$x##5540][lq_tmp$x##5534:=fix$36$$36$dOrd_a2aQ][lq_tmp$x##5535:=lq_anf$##7205759403792805722##d39w]})] | len lq_tmp$x##5530 > 0}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":21},"realSpan":true},[[null,"{lq_tmp$x##6049 : ({lq_tmp$x##6035 : (FibHeap.FibTree {lq_tmp$x##6034 : a | $k_##6006[VV##6005:=lq_tmp$x##6034][VV##6007:=lq_tmp$x##6035][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]}) | $k_##6008[VV##6007:=lq_tmp$x##6035][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]}, {lq_tmp$x##6041 : [{lq_tmp$x##6037 : (FibHeap.FibTree {lq_tmp$x##6036 : a | $k_##6010[VV##6009:=lq_tmp$x##6036][VV##6011:=lq_tmp$x##6037][VV##6018:=lq_tmp$x##6041][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]}) | $k_##6012[VV##6011:=lq_tmp$x##6037][VV##6018:=lq_tmp$x##6041][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]}]<\\lq_tmp$x##6038 VV -> {lq_tmp$x##6040 : (FibHeap.FibTree {lq_tmp$x##6039 : a | $k_##6015[VV##6014:=lq_tmp$x##6039][VV##6016:=lq_tmp$x##6040][VV##6018:=lq_tmp$x##6041][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6013:=lq_tmp$x##6038]}) | $k_##6017[VV##6016:=lq_tmp$x##6040][VV##6018:=lq_tmp$x##6041][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6013:=lq_tmp$x##6038]}> | $k_##6019[VV##6018:=lq_tmp$x##6041][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]})<\\lq_tmp$x##6042 VV -> {lq_tmp$x##6048 : [{lq_tmp$x##6044 : (FibHeap.FibTree {lq_tmp$x##6043 : a | $k_##6022[VV##6021:=lq_tmp$x##6043][VV##6023:=lq_tmp$x##6044][VV##6030:=lq_tmp$x##6048][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6020:=lq_tmp$x##6042]}) | $k_##6024[VV##6023:=lq_tmp$x##6044][VV##6030:=lq_tmp$x##6048][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6020:=lq_tmp$x##6042]}]<\\lq_tmp$x##6045 VV -> {lq_tmp$x##6047 : (FibHeap.FibTree {lq_tmp$x##6046 : a | $k_##6027[VV##6026:=lq_tmp$x##6046][VV##6028:=lq_tmp$x##6047][VV##6030:=lq_tmp$x##6048][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6020:=lq_tmp$x##6042][lq_tmp$x##6025:=lq_tmp$x##6045]}) | $k_##6029[VV##6028:=lq_tmp$x##6047][VV##6030:=lq_tmp$x##6048][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6020:=lq_tmp$x##6042][lq_tmp$x##6025:=lq_tmp$x##6045]}> | $k_##6031[VV##6030:=lq_tmp$x##6048][VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B][lq_tmp$x##6020:=lq_tmp$x##6042]}> | $k_##6033[VV##6032:=lq_tmp$x##6049][lq_tmp$x##5983:=lq_anf$##7205759403792805724##d39y][lq_tmp$x##5984:=lq_anf$##7205759403792805727##d39B]}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":16},"realSpan":true},[["GHC.Num.$fNumInt","{lq_tmp$x##3267 : (GHC.Num.Num GHC.Types.Int) | lq_tmp$x##3267 == GHC.Num.$fNumInt}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":44,"startLine":64,"startCol":15},"realSpan":true},[["FibHeap.Node","{VV : forall a .\n      lq_tmp$x##2983:{lq_tmp$x##2967 : GHC.Types.Int | lq_tmp$x##2967 >= 0} -> lq_tmp$x##2984:a -> lq_tmp$x##2985:[(FibHeap.FibTree a)] -> lq_tmp$x##2986:GHC.Types.Bool -> {lq_tmp$x##2977 : (FibHeap.FibTree a) | is$FibHeap.Node lq_tmp$x##2977\n                                                                                                                                                                                                                    && lq_tmp$x##2977 == FibHeap.Node lq_tmp$x##2983 lq_tmp$x##2984 lq_tmp$x##2985 lq_tmp$x##2986\n                                                                                                                                                                                                                    && FibHeap.marked lq_tmp$x##2977 == lq_tmp$x##2986\n                                                                                                                                                                                                                    && FibHeap.rank lq_tmp$x##2977 == lq_tmp$x##2983\n                                                                                                                                                                                                                    && FibHeap.root lq_tmp$x##2977 == lq_tmp$x##2984\n                                                                                                                                                                                                                    && FibHeap.size lq_tmp$x##2977 == FibHeap.pow2 lq_tmp$x##2983\n                                                                                                                                                                                                                    && FibHeap.subtrees lq_tmp$x##2977 == lq_tmp$x##2985} | VV == FibHeap.Node}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":8,"startLine":82,"startCol":1},"realSpan":true},[["FibHeap.findMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##1402:(FibHeap.FibHeap a) -> a"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":32,"startLine":111,"startCol":30},"realSpan":true},[["xs","{lq_tmp$x##1397 : [a] | lq_tmp$x##1397 == xs##a24p\n                        && FibHeap.lsize lq_tmp$x##1397 >= len lq_tmp$x##1397\n                        && len lq_tmp$x##1397 >= 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":31,"startLine":108,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805721","lq_tmp$x##5464:{lq_tmp$x##5443 : [(FibHeap.FibTree {lq_tmp$x##5471 : a | $k_##5470[VV##5469:=lq_tmp$x##5471][lq_tmp$x##5463:=fix$36$$36$dOrd_a2aQ]})] | len lq_tmp$x##5443 > 0} -> ((FibHeap.FibTree {lq_tmp$x##5471 : a | $k_##5470[VV##5469:=lq_tmp$x##5471][lq_tmp$x##5463:=fix$36$$36$dOrd_a2aQ]}), [(FibHeap.FibTree {lq_tmp$x##5471 : a | $k_##5470[VV##5469:=lq_tmp$x##5471][lq_tmp$x##5463:=fix$36$$36$dOrd_a2aQ]})])"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":41,"startLine":99,"startCol":34},"realSpan":true},[["GHC.Tuple.(,)","{VV : forall a b <p2 :: a b -> Bool>.\n      lq_tmp$x##2053:a -> lq_tmp$x##2054:{lq_tmp$x##2045 : b<p2 lq_tmp$x##2053> | true} -> {lq_tmp$x##2050 : (a, b)<\\lq_tmp$x##2055 VV -> {lq_tmp$x##2049 : b<p2 lq_tmp$x##2055> | true}> | is$GHC.Tuple.(,) lq_tmp$x##2050\n                                                                                                                                                                                            && lq_tmp$x##2050 == GHC.Tuple.(,) lq_tmp$x##2053 lq_tmp$x##2054\n                                                                                                                                                                                            && fst lq_tmp$x##2050 == lq_tmp$x##2053\n                                                                                                                                                                                            && lqdc##$select##GHC.Tuple.(,)##1 lq_tmp$x##2050 == lq_tmp$x##2053\n                                                                                                                                                                                            && lqdc##$select##GHC.Tuple.(,)##2 lq_tmp$x##2050 == lq_tmp$x##2054\n                                                                                                                                                                                            && snd lq_tmp$x##2050 == lq_tmp$x##2054\n                                                                                                                                                                                            && x_Tuple21 lq_tmp$x##2050 == lq_tmp$x##2053\n                                                                                                                                                                                            && x_Tuple22 lq_tmp$x##2050 == lq_tmp$x##2054} | VV == GHC.Tuple.(,)}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":44},"realSpan":true},[["ts","{lq_tmp$x##3360 : [(FibHeap.FibTree a)] | lq_tmp$x##3360 == ts##a24r\n                                          && FibHeap.lsize lq_tmp$x##3360 >= len lq_tmp$x##3360\n                                          && len lq_tmp$x##3360 >= 0}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":55,"startLine":91,"startCol":53},"realSpan":true},[["xs","{lq_tmp$x##3913 : [(FibHeap.FibTree a)] | lq_tmp$x##3913 == xs##a242\n                                          && FibHeap.lsize lq_tmp$x##3913 >= len lq_tmp$x##3913\n                                          && len lq_tmp$x##3913 >= 0}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":35,"startLine":118,"startCol":30},"realSpan":true},[["minTr","{lq_tmp$x##3339 : (FibHeap.FibTree a) | lq_tmp$x##3339 == minTr##a24q\n                                        && FibHeap.size lq_tmp$x##3339 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3339)\n                                        && 0 < FibHeap.size lq_tmp$x##3339}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":90,"startCol":5},"realSpan":true},[["lq_anf$##7205759403792805699","{lq_tmp$x##3612 : [(FibHeap.FibTree a)] | lq_tmp$x##3612 == ds_d33T\n                                          && FibHeap.lsize lq_tmp$x##3612 >= len lq_tmp$x##3612\n                                          && len lq_tmp$x##3612 >= 0}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":32,"startLine":87,"startCol":28},"realSpan":true},[["lq_anf$##7205759403792805707","lq_tmp$x##3941:[(FibHeap.FibTree {lq_tmp$x##3947 : a | $k_##3946[VV##3945:=lq_tmp$x##3947][lq_tmp$x##3940:=fix$36$$36$dOrd_a2ac]})] -> lq_tmp$x##3942:(FibHeap.FibTree {lq_tmp$x##3947 : a | $k_##3946[VV##3945:=lq_tmp$x##3947][lq_tmp$x##3940:=fix$36$$36$dOrd_a2ac]}) -> {lq_tmp$x##3935 : [(FibHeap.FibTree {lq_tmp$x##3947 : a | $k_##3946[VV##3945:=lq_tmp$x##3947][lq_tmp$x##3940:=fix$36$$36$dOrd_a2ac]})] | len lq_tmp$x##3935 > 0\n                                                                                                                                                                                                                                                                                                                                                                                                                     && len lq_tmp$x##3935 <= len lq_tmp$x##3941 + 1}"]]],[{"spanInfo":{"endLine":47,"filename":"src/FibHeap.hs","endCol":15,"startLine":47,"startCol":1},"realSpan":true},[["FibHeap.isEmptyFibHeap","forall a .\nlq_tmp$x##722:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | (VV\n                                                             && not (FibHeap.notEmptyFibHeap lq_tmp$x##722))\n                                                            || (FibHeap.notEmptyFibHeap lq_tmp$x##722\n                                                                && not VV)\n                                                            && (VV <=> FibHeap.isEmptyFibHeap lq_tmp$x##722)}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":91,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805704","{lq_tmp$x##3767 : GHC.Types.Bool | (lq_tmp$x##3767 <=> lq_anf$##7205759403792805701##d39b == lq_anf$##7205759403792805702##d39c)\n                                   && lq_tmp$x##3767 == lq_anf$##7205759403792805703##d39d}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":62,"startLine":73,"startCol":35},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      lq_tmp$x##1256:(FibHeap.FibTree a) -> lq_tmp$x##1257:[(FibHeap.FibTree a)] -> {lq_tmp$x##1252 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap lq_tmp$x##1252\n                                                                                                                            && is$FibHeap.FH lq_tmp$x##1252\n                                                                                                                            && not (FibHeap.isEmptyFibHeap lq_tmp$x##1252)\n                                                                                                                            && not (is$FibHeap.E lq_tmp$x##1252)\n                                                                                                                            && lq_tmp$x##1252 == FibHeap.FH lq_tmp$x##1256 lq_tmp$x##1257\n                                                                                                                            && FibHeap.fibsize lq_tmp$x##1252 == FibHeap.size lq_tmp$x##1256 + FibHeap.lsize lq_tmp$x##1257\n                                                                                                                            && FibHeap.minTree lq_tmp$x##1252 == lq_tmp$x##1256\n                                                                                                                            && FibHeap.trees lq_tmp$x##1252 == lq_tmp$x##1257} | VV == FibHeap.FH}"]]],[{"spanInfo":{"endLine":123,"filename":"src/FibHeap.hs","endCol":13,"startLine":123,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805689","{lq_tmp$x##3176 : GHC.Prim.Int# | lq_tmp$x##3176 == 0}"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":6,"startLine":71,"startCol":1},"realSpan":true},[["FibHeap.merge","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##889:(FibHeap.FibHeap a) -> lq_tmp$x##890:{VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0} -> {VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0\n                                                                                                                                                   && (FibHeap.root (FibHeap.minTree VV##0) == FibHeap.root (FibHeap.minTree lq_tmp$x##889)\n                                                                                                                                                       && FibHeap.root (FibHeap.minTree lq_tmp$x##889) < FibHeap.root (FibHeap.minTree lq_tmp$x##890))\n                                                                                                                                                      || ((FibHeap.root (FibHeap.minTree lq_tmp$x##890) <= FibHeap.root (FibHeap.minTree lq_tmp$x##889)\n                                                                                                                                                           || not (FibHeap.notEmptyFibHeap lq_tmp$x##889))\n                                                                                                                                                          && FibHeap.root (FibHeap.minTree VV##0) == FibHeap.root (FibHeap.minTree lq_tmp$x##890))}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":18,"startLine":73,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805603","{lq_tmp$x##1009 : a | lq_tmp$x##1009 == FibHeap.root minTr1##a23O\n                      && $k_##1008[VV##1007:=lq_tmp$x##1009][lq_tmp$x##1006:=minTr1##a23O]}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":56,"startLine":73,"startCol":53},"realSpan":true},[["ts2","{lq_tmp$x##1195 : [(FibHeap.FibTree a)] | lq_tmp$x##1195 == ts2##a23S\n                                          && FibHeap.lsize lq_tmp$x##1195 >= len lq_tmp$x##1195\n                                          && len lq_tmp$x##1195 >= 0}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":35,"startLine":87,"startCol":34},"realSpan":true},[["x","{lq_tmp$x##3998 : (FibHeap.FibTree a) | lq_tmp$x##3998 == x##a23V\n                                        && FibHeap.size lq_tmp$x##3998 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3998)\n                                        && 0 < FibHeap.size lq_tmp$x##3998}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":36,"startLine":59,"startCol":31},"realSpan":true},[["GHC.Types.False","{lq_tmp$x##839 : GHC.Types.Bool | not lq_tmp$x##839\n                                  && lq_tmp$x##839 == GHC.Types.False}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":18,"startLine":99,"startCol":17},"realSpan":true},[["t","{lq_tmp$x##1905 : (FibHeap.FibTree a) | lq_tmp$x##1905 == t##a244\n                                        && FibHeap.size lq_tmp$x##1905 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1905)\n                                        && 0 < FibHeap.size lq_tmp$x##1905}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":39,"startLine":87,"startCol":22},"realSpan":true},[["Data.Foldable.$fFoldable[]","{lq_tmp$x##4030 : (Data.Foldable.Foldable []) | lq_tmp$x##4030 == Data.Foldable.$fFoldable[]}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805705","{lq_tmp$x##3782 : [{lq_tmp$x##3795 : (FibHeap.FibTree {lq_tmp$x##3794 : a | $k_##3791[VV##3790:=lq_tmp$x##3794][VV##3792:=lq_tmp$x##3795][lq_tmp$x##3786:=x'##a241][lq_tmp$x##3787:=xs##a242]}) | $k_##3793[VV##3792:=lq_tmp$x##3795][lq_tmp$x##3786:=x'##a241][lq_tmp$x##3787:=xs##a242]}]<\\lq_tmp$x##3789 VV -> {lq_tmp$x##3795 : (FibHeap.FibTree {lq_tmp$x##3794 : a | $k_##3797[VV##3796:=lq_tmp$x##3794][VV##3798:=lq_tmp$x##3795][lq_tmp$x##3786:=x'##a241][lq_tmp$x##3787:=xs##a242][lq_tmp$x##3800:=lq_tmp$x##3789]}) | $k_##3799[VV##3798:=lq_tmp$x##3795][lq_tmp$x##3786:=x'##a241][lq_tmp$x##3787:=xs##a242][lq_tmp$x##3800:=lq_tmp$x##3789]}> | is$GHC.Types.: lq_tmp$x##3782\nnot (is$GHC.Types.[] lq_tmp$x##3782)\nlq_tmp$x##3782 == GHC.Types.: x'##a241 xs##a242\nibHeap.lsize lq_tmp$x##3782 == FibHeap.size x'##a241 + FibHeap.lsize xs##a242\nhead lq_tmp$x##3782 == x'##a241\nlen lq_tmp$x##3782 == 1 + len xs##a242\nlqdc##$select##GHC.Types.:##1 lq_tmp$x##3782 == x'##a241\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##3782 == xs##a242\ntail lq_tmp$x##3782 == xs##a242}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":30,"startLine":59,"startCol":28},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {lq_tmp$x##791 : [a]<\\lq_tmp$x##792 VV -> {lq_tmp$x##790 : a<p lq_tmp$x##792> | true}> | is$GHC.Types.[] lq_tmp$x##791\n                                                                                               && not (is$GHC.Types.: lq_tmp$x##791)\n                                                                                               && lq_tmp$x##791 == GHC.Types.[]\n                                                                                               && FibHeap.lsize lq_tmp$x##791 == 0\n                                                                                               && len lq_tmp$x##791 == 0} | VV == GHC.Types.[]}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":5,"startLine":135,"startCol":1},"realSpan":true},[["FibHeap.size","forall a .\nlq_tmp$x##3090:(FibHeap.FibTree a) -> {VV : GHC.Types.Int | VV == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3090)\n                                                            && VV == FibHeap.size lq_tmp$x##3090\n                                                            && 0 < VV}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":20,"startLine":96,"startCol":19},"realSpan":true},[["t","{lq_tmp$x##1690 : (FibHeap.FibTree a) | lq_tmp$x##1690 == t##a244\n                                        && FibHeap.size lq_tmp$x##1690 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1690)\n                                        && 0 < FibHeap.size lq_tmp$x##1690}"]]],[{"spanInfo":{"endLine":104,"filename":"src/FibHeap.hs","endCol":39,"startLine":104,"startCol":38},"realSpan":true},[[null,"{VV : forall a .\n      {lq_tmp$x##4257 : (FibHeap.FibHeap a) | FibHeap.isEmptyFibHeap lq_tmp$x##4257\n                                              && is$FibHeap.E lq_tmp$x##4257\n                                              && not (FibHeap.notEmptyFibHeap lq_tmp$x##4257)\n                                              && not (is$FibHeap.FH lq_tmp$x##4257)\n                                              && lq_tmp$x##4257 == FibHeap.E} | VV == FibHeap.E}"]]],[{"spanInfo":{"endLine":41,"filename":"src/FibHeap.hs","endCol":26,"startLine":41,"startCol":21},"realSpan":true},[["GHC.Types.False","{lq_tmp$x##685 : GHC.Types.Bool | not lq_tmp$x##685\n                                  && lq_tmp$x##685 == GHC.Types.False}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805620","{lq_tmp$x##1914 : a | lq_tmp$x##1914 == FibHeap.root t'##a29b\n                      && $k_##1913[VV##1912:=lq_tmp$x##1914][lq_tmp$x##1911:=t'##a29b]}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":21},"realSpan":true},[[null,"{lq_tmp$x##5625 : ({lq_tmp$x##5611 : (FibHeap.FibTree {lq_tmp$x##5610 : a | $k_##5582[VV##5581:=lq_tmp$x##5610][VV##5583:=lq_tmp$x##5611][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]}) | $k_##5584[VV##5583:=lq_tmp$x##5611][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]}, {lq_tmp$x##5617 : [{lq_tmp$x##5613 : (FibHeap.FibTree {lq_tmp$x##5612 : a | $k_##5586[VV##5585:=lq_tmp$x##5612][VV##5587:=lq_tmp$x##5613][VV##5594:=lq_tmp$x##5617][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]}) | $k_##5588[VV##5587:=lq_tmp$x##5613][VV##5594:=lq_tmp$x##5617][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]}]<\\lq_tmp$x##5614 VV -> {lq_tmp$x##5616 : (FibHeap.FibTree {lq_tmp$x##5615 : a | $k_##5591[VV##5590:=lq_tmp$x##5615][VV##5592:=lq_tmp$x##5616][VV##5594:=lq_tmp$x##5617][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5589:=lq_tmp$x##5614]}) | $k_##5593[VV##5592:=lq_tmp$x##5616][VV##5594:=lq_tmp$x##5617][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5589:=lq_tmp$x##5614]}> | $k_##5595[VV##5594:=lq_tmp$x##5617][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]})<\\lq_tmp$x##5618 VV -> {lq_tmp$x##5624 : [{lq_tmp$x##5620 : (FibHeap.FibTree {lq_tmp$x##5619 : a | $k_##5598[VV##5597:=lq_tmp$x##5619][VV##5599:=lq_tmp$x##5620][VV##5606:=lq_tmp$x##5624][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5596:=lq_tmp$x##5618]}) | $k_##5600[VV##5599:=lq_tmp$x##5620][VV##5606:=lq_tmp$x##5624][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5596:=lq_tmp$x##5618]}]<\\lq_tmp$x##5621 VV -> {lq_tmp$x##5623 : (FibHeap.FibTree {lq_tmp$x##5622 : a | $k_##5603[VV##5602:=lq_tmp$x##5622][VV##5604:=lq_tmp$x##5623][VV##5606:=lq_tmp$x##5624][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5596:=lq_tmp$x##5618][lq_tmp$x##5601:=lq_tmp$x##5621]}) | $k_##5605[VV##5604:=lq_tmp$x##5623][VV##5606:=lq_tmp$x##5624][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5596:=lq_tmp$x##5618][lq_tmp$x##5601:=lq_tmp$x##5621]}> | $k_##5607[VV##5606:=lq_tmp$x##5624][VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x][lq_tmp$x##5596:=lq_tmp$x##5618]}> | $k_##5609[VV##5608:=lq_tmp$x##5625][lq_tmp$x##5559:=lq_anf$##7205759403792805721##d39v][lq_tmp$x##5560:=lq_anf$##7205759403792805723##d39x]}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":11,"startLine":96,"startCol":1},"realSpan":true},[["FibHeap.extractMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##1470:{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":10},"realSpan":true},[["GHC.Num.$fNumInt","{lq_tmp$x##3078 : (GHC.Num.Num GHC.Types.Int) | lq_tmp$x##3078 == GHC.Num.$fNumInt}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":38,"startLine":64,"startCol":30},"realSpan":true},[["lq_anf$##7205759403792805677","{lq_tmp$x##2937 : [{lq_tmp$x##2950 : (FibHeap.FibTree {lq_tmp$x##2949 : a | $k_##2946[VV##2945:=lq_tmp$x##2949][VV##2947:=lq_tmp$x##2950][lq_tmp$x##2941:=lq_anf$##7205759403792805667##d38D][lq_tmp$x##2942:=ts1##a23I]}) | $k_##2948[VV##2947:=lq_tmp$x##2950][lq_tmp$x##2941:=lq_anf$##7205759403792805667##d38D][lq_tmp$x##2942:=ts1##a23I]}]<\\lq_tmp$x##2944 VV -> {lq_tmp$x##2950 : (FibHeap.FibTree {lq_tmp$x##2949 : a | $k_##2952[VV##2951:=lq_tmp$x##2949][VV##2953:=lq_tmp$x##2950][lq_tmp$x##2941:=lq_anf$##7205759403792805667##d38D][lq_tmp$x##2942:=ts1##a23I][lq_tmp$x##2955:=lq_tmp$x##2944]}) | $k_##2954[VV##2953:=lq_tmp$x##2950][lq_tmp$x##2941:=lq_anf$##7205759403792805667##d38D][lq_tmp$x##2942:=ts1##a23I][lq_tmp$x##2955:=lq_tmp$x##2944]}> | is$GHC.Types.: lq_tmp$x##2937\nnot (is$GHC.Types.[] lq_tmp$x##2937)\nlq_tmp$x##2937 == GHC.Types.: lq_anf$##7205759403792805667##d38D ts1##a23I\nibHeap.lsize lq_tmp$x##2937 == FibHeap.size lq_anf$##7205759403792805667##d38D + FibHeap.lsize ts1##a23I\nhead lq_tmp$x##2937 == lq_anf$##7205759403792805667##d38D\nlen lq_tmp$x##2937 == 1 + len ts1##a23I\nlqdc##$select##GHC.Types.:##1 lq_tmp$x##2937 == lq_anf$##7205759403792805667##d38D\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##2937 == ts1##a23I\ntail lq_tmp$x##2937 == ts1##a23I}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":33,"startLine":65,"startCol":32},"realSpan":true},[["y","{lq_tmp$x##2890 : a | lq_tmp$x##2890 == y##a23K}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":23},"realSpan":true},[["FibHeap.pow2","lq_tmp$x##3142:{lq_tmp$x##3139 : GHC.Types.Int | lq_tmp$x##3139 >= 0} -> {lq_tmp$x##3140 : GHC.Types.Int | lq_tmp$x##3140 == FibHeap.pow2 lq_tmp$x##3142\n                                                                                                           && lq_tmp$x##3140 == (if 0 == lq_tmp$x##3142 then 1 else 2 * FibHeap.pow2 (lq_tmp$x##3142 - 1))\n                                                                                                           && 0 < lq_tmp$x##3140}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805693","{lq_tmp$x##3283 : GHC.Prim.Addr# | lq_tmp$x##3283 == \"src/FibHeap.hs:118:1-45|function fibsize\"}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":31,"startLine":91,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805701","{lq_tmp$x##3728 : GHC.Types.Int | lq_tmp$x##3728 == FibHeap.rank x##a240\n                                  && lq_tmp$x##3728 >= 0}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":52,"startLine":73,"startCol":46},"realSpan":true},[["minTr2","{lq_tmp$x##1234 : (FibHeap.FibTree a) | lq_tmp$x##1234 == minTr2##a23R\n                                        && FibHeap.size lq_tmp$x##1234 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1234)\n                                        && 0 < FibHeap.size lq_tmp$x##1234}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":35,"startLine":79,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805611","{lq_tmp$x##1283 : (FibHeap.FibHeap {lq_tmp$x##1288 : a | $k_##1287[VV##1286:=lq_tmp$x##1288][lq_tmp$x##1285:=x##a23U]}) | FibHeap.notEmptyFibHeap lq_tmp$x##1283\n                                                                                                                          && FibHeap.rank (FibHeap.minTree lq_tmp$x##1283) == 1\n                                                                                                                          && FibHeap.subtrees (FibHeap.minTree lq_tmp$x##1283) == GHC.Types.[]\n                                                                                                                          && FibHeap.trees lq_tmp$x##1283 == GHC.Types.[]\n                                                                                                                          && FibHeap.root (FibHeap.minTree lq_tmp$x##1283) == x##a23U}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":31,"startLine":106,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805724","lq_tmp$x##5871:{lq_tmp$x##5850 : [(FibHeap.FibTree {lq_tmp$x##5878 : a | $k_##5877[VV##5876:=lq_tmp$x##5878][lq_tmp$x##5870:=fix$36$$36$dOrd_a2aQ]})] | len lq_tmp$x##5850 > 0} -> ((FibHeap.FibTree {lq_tmp$x##5878 : a | $k_##5877[VV##5876:=lq_tmp$x##5878][lq_tmp$x##5870:=fix$36$$36$dOrd_a2aQ]}), [(FibHeap.FibTree {lq_tmp$x##5878 : a | $k_##5877[VV##5876:=lq_tmp$x##5878][lq_tmp$x##5870:=fix$36$$36$dOrd_a2aQ]})])"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":14,"startLine":71,"startCol":13},"realSpan":true},[["h","{lq_tmp$x##906 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap lq_tmp$x##906\n                                       && (FibHeap.isEmptyFibHeap lq_tmp$x##906\n                                           && not (FibHeap.notEmptyFibHeap lq_tmp$x##906))\n                                          || (FibHeap.notEmptyFibHeap lq_tmp$x##906\n                                              && not (FibHeap.isEmptyFibHeap lq_tmp$x##906))\n                                       && lq_tmp$x##906 == h##a23M\n                                       && 0 < FibHeap.fibsize lq_tmp$x##906}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":12,"startLine":108,"startCol":6},"realSpan":true},[["minTr'","{VV##5665 : (FibHeap.FibTree {VV##5663 : a | $k_##5664}) | $k_##5666}"]]],[{"spanInfo":{"endLine":123,"filename":"src/FibHeap.hs","endCol":6,"startLine":123,"startCol":1},"realSpan":true},[["FibHeap.lsize","forall a .\nlq_tmp$x##3146:[(FibHeap.FibTree a)] -> {VV : GHC.Types.Int | VV == FibHeap.lsize lq_tmp$x##3146\n                                                              && VV >= len lq_tmp$x##3146}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":36,"startLine":99,"startCol":35},"realSpan":true},[["t","{lq_tmp$x##2093 : (FibHeap.FibTree a) | lq_tmp$x##2093 == t##a244\n                                        && FibHeap.size lq_tmp$x##2093 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##2093)\n                                        && 0 < FibHeap.size lq_tmp$x##2093}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":22,"startLine":124,"startCol":21},"realSpan":true},[["t","{lq_tmp$x##3230 : (FibHeap.FibTree a) | lq_tmp$x##3230 == t##a24s\n                                        && FibHeap.size lq_tmp$x##3230 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3230)\n                                        && 0 < FibHeap.size lq_tmp$x##3230}"]]],[{"spanInfo":{"endLine":48,"filename":"src/FibHeap.hs","endCol":25,"startLine":48,"startCol":20},"realSpan":true},[["GHC.Types.False","{lq_tmp$x##770 : GHC.Types.Bool | not lq_tmp$x##770\n                                  && lq_tmp$x##770 == GHC.Types.False}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":12,"startLine":64,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805668","{lq_tmp$x##2780 : GHC.Types.Bool | lq_tmp$x##2780 <=> x##a23H < y##a23K}"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":64,"startLine":107,"startCol":58},"realSpan":true},[["minTr'","{lq_tmp$x##5797 : (FibHeap.FibTree {lq_tmp$x##5796 : a | $k_##5664[VV##5663:=lq_tmp$x##5796][VV##5665:=lq_tmp$x##5797]}) | lq_tmp$x##5797 == minTr'##a2bl\n                                                                                                                           && FibHeap.size lq_tmp$x##5797 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##5797)\n                                                                                                                           && 0 < FibHeap.size lq_tmp$x##5797\n                                                                                                                           && $k_##5666[VV##5665:=lq_tmp$x##5797]}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":45,"startLine":105,"startCol":39},"realSpan":true},[["minTr'","{lq_tmp$x##6221 : (FibHeap.FibTree {lq_tmp$x##6220 : a | $k_##6088[VV##6087:=lq_tmp$x##6220][VV##6089:=lq_tmp$x##6221]}) | lq_tmp$x##6221 == minTr'##a2aY\n                                                                                                                           && FibHeap.size lq_tmp$x##6221 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##6221)\n                                                                                                                           && 0 < FibHeap.size lq_tmp$x##6221\n                                                                                                                           && $k_##6090[VV##6089:=lq_tmp$x##6221]}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":44,"startLine":64,"startCol":39},"realSpan":true},[["GHC.Types.False","{lq_tmp$x##3000 : GHC.Types.Bool | not lq_tmp$x##3000\n                                   && lq_tmp$x##3000 == GHC.Types.False}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":12,"startLine":86,"startCol":1},"realSpan":true},[["FibHeap.consolidate","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##3382:{t : [(FibHeap.FibTree a)] | len t > 0} -> {v : [(FibHeap.FibTree a)] | len v > 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":45,"startLine":74,"startCol":42},"realSpan":true},[["ts2","{lq_tmp$x##1089 : [(FibHeap.FibTree a)] | lq_tmp$x##1089 == ts2##a23S\n                                          && FibHeap.lsize lq_tmp$x##1089 >= len lq_tmp$x##1089\n                                          && len lq_tmp$x##1089 >= 0}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":28,"startLine":63,"startCol":26},"realSpan":true},[["t2","{t2 : (FibHeap.FibTree a) | FibHeap.rank t1##a23F == FibHeap.rank t2}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":130,"startCol":14},"realSpan":true},[["lq_anf$##7205759403792805685","{VV##0 : GHC.Types.Int | 0 < VV##0}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":65,"startCol":43},"realSpan":true},[["GHC.Types.False","{lq_tmp$x##2898 : GHC.Types.Bool | not lq_tmp$x##2898\n                                   && lq_tmp$x##2898 == GHC.Types.False}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":31,"startLine":92,"startCol":29},"realSpan":true},[["x'","{lq_tmp$x##3803 : (FibHeap.FibTree a) | lq_tmp$x##3803 == x'##a241\n                                        && FibHeap.size lq_tmp$x##3803 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3803)\n                                        && 0 < FibHeap.size lq_tmp$x##3803}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":34},"realSpan":true},[["lq_anf$##7205759403792805727","{lq_tmp$x##5954 : [(FibHeap.FibTree {lq_tmp$x##5964 : a | $k_##5963[VV##5962:=lq_tmp$x##5964][lq_tmp$x##5958:=fix$36$$36$dOrd_a2aQ][lq_tmp$x##5959:=lq_anf$##7205759403792805726##d39A]})] | len lq_tmp$x##5954 > 0}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":124,"startCol":31},"realSpan":true},[["ts","{lq_tmp$x##3251 : [(FibHeap.FibTree a)] | lq_tmp$x##3251 == ts##a24t\n                                          && len lq_tmp$x##3251 >= 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":45,"startLine":74,"startCol":37},"realSpan":true},[["lq_anf$##7205759403792805607","{lq_tmp$x##1061 : [{lq_tmp$x##1076 : (FibHeap.FibTree {lq_tmp$x##1075 : a | $k_##1072[VV##1071:=lq_tmp$x##1075][VV##1073:=lq_tmp$x##1076][lq_tmp$x##1066:=ts1##a23P][lq_tmp$x##1067:=ts2##a23S]}) | $k_##1074[VV##1073:=lq_tmp$x##1076][lq_tmp$x##1066:=ts1##a23P][lq_tmp$x##1067:=ts2##a23S]}] | len lq_tmp$x##1061 == len ts1##a23P + len ts2##a23S}"]]],[{"spanInfo":{"endLine":47,"filename":"src/FibHeap.hs","endCol":24,"startLine":47,"startCol":20},"realSpan":true},[["GHC.Types.True","{lq_tmp$x##735 : GHC.Types.Bool | lq_tmp$x##735\n                                  && lq_tmp$x##735 == GHC.Types.True}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":25,"startLine":96,"startCol":18},"realSpan":true},[["lq_anf$##7205759403792805624","{lq_tmp$x##1626 : [{lq_tmp$x##1633 : (FibHeap.FibTree {lq_tmp$x##1632 : a | $k_##1629[VV##1628:=lq_tmp$x##1632][VV##1630:=lq_tmp$x##1633]}) | $k_##1631[VV##1630:=lq_tmp$x##1633]}]<\\lq_tmp$x##1627 VV -> {lq_tmp$x##1633 : (FibHeap.FibTree {lq_tmp$x##1632 : a | $k_##1635[VV##1634:=lq_tmp$x##1632][VV##1636:=lq_tmp$x##1633][lq_tmp$x##1638:=lq_tmp$x##1627]}) | $k_##1637[VV##1636:=lq_tmp$x##1633][lq_tmp$x##1638:=lq_tmp$x##1627]}> | is$GHC.Types.[] lq_tmp$x##1626\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && not (is$GHC.Types.: lq_tmp$x##1626)\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && lq_tmp$x##1626 == GHC.Types.[]\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && FibHeap.lsize lq_tmp$x##1626 == 0\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && len lq_tmp$x##1626 == 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":17,"startLine":108,"startCol":14},"realSpan":true},[["ts'","{VV##5723 : [{VV##5716 : (FibHeap.FibTree {VV##5714 : a | $k_##5715}) | $k_##5717}]<\\lq_tmp$x##5718 VV -> {VV##5721 : (FibHeap.FibTree {VV##5719 : a | $k_##5720}) | $k_##5722}> | $k_##5724}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":23,"startLine":130,"startCol":22},"realSpan":true},[["lq_anf$##7205759403792805683","{lq_tmp$x##3037 : GHC.Types.Int | lq_tmp$x##3037 == (lq_anf$##7205759403792805682##d38S : int)}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":34,"startLine":98,"startCol":21},"realSpan":true},[["FibHeap.extractMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##1470:{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805621","{lq_tmp$x##1922 : GHC.Types.Bool | lq_tmp$x##1922 <=> lq_anf$##7205759403792805619##d37R < lq_anf$##7205759403792805620##d37S}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":61,"startLine":73,"startCol":58},"realSpan":true},[["ts1","{lq_tmp$x##1202 : [(FibHeap.FibTree a)] | lq_tmp$x##1202 == ts1##a23P\n                                          && FibHeap.lsize lq_tmp$x##1202 >= len lq_tmp$x##1202\n                                          && len lq_tmp$x##1202 >= 0}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":21},"realSpan":true},[["lq_anf$##7205759403792805604","{lq_tmp$x##1020 : a | lq_tmp$x##1020 == FibHeap.root minTr2##a23R\n                      && $k_##1019[VV##1018:=lq_tmp$x##1020][lq_tmp$x##1017:=minTr2##a23R]}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":35,"startLine":118,"startCol":25},"realSpan":true},[["lq_anf$##7205759403792805694","{lq_tmp$x##3332 : GHC.Types.Int | lq_tmp$x##3332 == FibHeap.pow2 (FibHeap.rank minTr##a24q)\n                                  && lq_tmp$x##3332 == FibHeap.size minTr##a24q\n                                  && 0 < lq_tmp$x##3332}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":53,"startLine":99,"startCol":52},"realSpan":true},[["t","{lq_tmp$x##1973 : (FibHeap.FibTree a) | lq_tmp$x##1973 == t##a244\n                                        && FibHeap.size lq_tmp$x##1973 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1973)\n                                        && 0 < FibHeap.size lq_tmp$x##1973}"]]],[{"spanInfo":{"endLine":107,"filename":"src/FibHeap.hs","endCol":68,"startLine":107,"startCol":55},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      lq_tmp$x##5790:(FibHeap.FibTree a) -> lq_tmp$x##5791:[(FibHeap.FibTree a)] -> {lq_tmp$x##5786 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap lq_tmp$x##5786\n                                                                                                                            && is$FibHeap.FH lq_tmp$x##5786\n                                                                                                                            && not (FibHeap.isEmptyFibHeap lq_tmp$x##5786)\n                                                                                                                            && not (is$FibHeap.E lq_tmp$x##5786)\n                                                                                                                            && lq_tmp$x##5786 == FibHeap.FH lq_tmp$x##5790 lq_tmp$x##5791\n                                                                                                                            && FibHeap.fibsize lq_tmp$x##5786 == FibHeap.size lq_tmp$x##5790 + FibHeap.lsize lq_tmp$x##5791\n                                                                                                                            && FibHeap.minTree lq_tmp$x##5786 == lq_tmp$x##5790\n                                                                                                                            && FibHeap.trees lq_tmp$x##5786 == lq_tmp$x##5791} | VV == FibHeap.FH}"]]],[{"spanInfo":{"endLine":105,"filename":"src/FibHeap.hs","endCol":49,"startLine":105,"startCol":46},"realSpan":true},[["ts'","{lq_tmp$x##6227 : [{lq_tmp$x##6223 : (FibHeap.FibTree {lq_tmp$x##6222 : a | $k_##6139[VV##6138:=lq_tmp$x##6222][VV##6140:=lq_tmp$x##6223][VV##6147:=lq_tmp$x##6227]}) | $k_##6141[VV##6140:=lq_tmp$x##6223][VV##6147:=lq_tmp$x##6227]}]<\\lq_tmp$x##6228 VV -> {lq_tmp$x##6226 : (FibHeap.FibTree {lq_tmp$x##6225 : a | $k_##6144[VV##6143:=lq_tmp$x##6225][VV##6145:=lq_tmp$x##6226][VV##6147:=lq_tmp$x##6227][lq_tmp$x##6142:=lq_tmp$x##6228][lq_tmp$x##6224:=lq_tmp$x##6228]}) | $k_##6146[VV##6145:=lq_tmp$x##6226][VV##6147:=lq_tmp$x##6227][lq_tmp$x##6142:=lq_tmp$x##6228][lq_tmp$x##6224:=lq_tmp$x##6228]}> | lq_tmp$x##6227 == ts'##a2b0\nibHeap.lsize lq_tmp$x##6227 >= len lq_tmp$x##6227\nlen lq_tmp$x##6227 >= 0\nk_##6148[VV##6147:=lq_tmp$x##6227]}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":8,"startLine":64,"startCol":7},"realSpan":true},[["x","{lq_tmp$x##2792 : a | lq_tmp$x##2792 == x##a23H}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":5,"startLine":63,"startCol":1},"realSpan":true},[["FibHeap.link","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##2677:(FibHeap.FibTree a) -> lq_tmp$x##2678:{t2 : (FibHeap.FibTree a) | FibHeap.rank lq_tmp$x##2677 == FibHeap.rank t2} -> {v : (FibHeap.FibTree a) | (FibHeap.root v == FibHeap.root lq_tmp$x##2677\n                                                                                                                                                                && FibHeap.root lq_tmp$x##2677 <= FibHeap.root lq_tmp$x##2678)\n                                                                                                                                                               || (FibHeap.root v == FibHeap.root lq_tmp$x##2678\n                                                                                                                                                                   && FibHeap.root lq_tmp$x##2678 <= FibHeap.root lq_tmp$x##2677)\n                                                                                                                                                               && FibHeap.rank v == 1 + FibHeap.rank lq_tmp$x##2677}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":40,"startLine":59,"startCol":38},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {lq_tmp$x##844 : [a]<\\lq_tmp$x##845 VV -> {lq_tmp$x##843 : a<p lq_tmp$x##845> | true}> | is$GHC.Types.[] lq_tmp$x##844\n                                                                                               && not (is$GHC.Types.: lq_tmp$x##844)\n                                                                                               && lq_tmp$x##844 == GHC.Types.[]\n                                                                                               && FibHeap.lsize lq_tmp$x##844 == 0\n                                                                                               && len lq_tmp$x##844 == 0} | VV == GHC.Types.[]}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":40,"startLine":74,"startCol":37},"realSpan":true},[["ts1","{lq_tmp$x##1082 : [(FibHeap.FibTree a)] | lq_tmp$x##1082 == ts1##a23P\n                                          && FibHeap.lsize lq_tmp$x##1082 >= len lq_tmp$x##1082\n                                          && len lq_tmp$x##1082 >= 0}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":33,"startLine":123,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805688","{lq_tmp$x##3155 : [(FibHeap.FibTree a)] | lq_tmp$x##3155 == ds_d303\n                                          && len lq_tmp$x##3155 >= 0}"]]],[{"spanInfo":{"endLine":135,"filename":"src/FibHeap.hs","endCol":29,"startLine":135,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805687","{lq_tmp$x##3093 : (FibHeap.FibTree a) | lq_tmp$x##3093 == ds_d2ZN}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":28,"startLine":99,"startCol":26},"realSpan":true},[["t'","{lq_tmp$x##1916 : (FibHeap.FibTree {lq_tmp$x##1915 : a | $k_##1783[VV##1782:=lq_tmp$x##1915][VV##1784:=lq_tmp$x##1916]}) | lq_tmp$x##1916 == t'##a29b\n                                                                                                                           && FibHeap.size lq_tmp$x##1916 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1916)\n                                                                                                                           && 0 < FibHeap.size lq_tmp$x##1916\n                                                                                                                           && $k_##1785[VV##1784:=lq_tmp$x##1916]}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":8,"startLine":118,"startCol":1},"realSpan":true},[["FibHeap.fibsize","forall a .\nlq_tmp$x##3270:{VV : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV} -> {VV : GHC.Types.Int | VV == FibHeap.fibsize lq_tmp$x##3270\n                                                                                                && 0 < VV}"]]],[{"spanInfo":{"endLine":104,"filename":"src/FibHeap.hs","endCol":10,"startLine":104,"startCol":1},"realSpan":true},[["FibHeap.deleteMin","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##4093:{VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0} -> (FibHeap.FibHeap a)"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":68,"startLine":106,"startCol":46},"realSpan":true},[["lq_anf$##7205759403792805726","{lq_tmp$x##5910 : [{lq_tmp$x##5925 : (FibHeap.FibTree {lq_tmp$x##5924 : a | $k_##5921[VV##5920:=lq_tmp$x##5924][VV##5922:=lq_tmp$x##5925][lq_tmp$x##5915:=lq_anf$##7205759403792805725##d39z][lq_tmp$x##5916:=ds_d35B]}) | $k_##5923[VV##5922:=lq_tmp$x##5925][lq_tmp$x##5915:=lq_anf$##7205759403792805725##d39z][lq_tmp$x##5916:=ds_d35B]}] | len lq_tmp$x##5910 == len lq_anf$##7205759403792805725##d39z + len ds_d35B}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":33,"startLine":64,"startCol":31},"realSpan":true},[["lq_anf$##7205759403792805667","{lq_tmp$x##2958 : (FibHeap.FibTree a) | is$FibHeap.Node lq_tmp$x##2958\n                                        && lq_tmp$x##2958 == lq_anf$##7205759403792805667##d38D\n                                        && lq_tmp$x##2958 == t2##a23J\n                                        && lq_tmp$x##2958 == FibHeap.Node ds_d33c y##a23K ts2##a23L ds_d33d\n                                        && FibHeap.marked lq_tmp$x##2958 == ds_d33d\n                                        && FibHeap.rank lq_tmp$x##2958 == ds_d33c\n                                        && FibHeap.rank t1##a23F == FibHeap.rank lq_tmp$x##2958\n                                        && FibHeap.root lq_tmp$x##2958 == y##a23K\n                                        && FibHeap.size lq_tmp$x##2958 == FibHeap.pow2 ds_d33c\n                                        && FibHeap.size lq_tmp$x##2958 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##2958)\n                                        && FibHeap.subtrees lq_tmp$x##2958 == ts2##a23L\n                                        && 0 < FibHeap.size lq_tmp$x##2958}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":67,"startLine":91,"startCol":48},"realSpan":true},[["meld","forall a .\n(GHC.Classes.Ord<[]> a) =>\nlq_tmp$x##3599:[(FibHeap.FibTree a)] -> lq_tmp$x##3600:(FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                                           && len v <= len lq_tmp$x##3599 + 1}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":42,"startLine":91,"startCol":35},"realSpan":true},[["lq_anf$##7205759403792805702","{lq_tmp$x##3739 : GHC.Types.Int | lq_tmp$x##3739 == FibHeap.rank x'##a241\n                                  && lq_tmp$x##3739 >= 0}"]]],[{"spanInfo":{"endLine":42,"filename":"src/FibHeap.hs","endCol":25,"startLine":42,"startCol":21},"realSpan":true},[["GHC.Types.True","{lq_tmp$x##720 : GHC.Types.Bool | lq_tmp$x##720\n                                  && lq_tmp$x##720 == GHC.Types.True}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":25},"realSpan":true},[["GHC.Num.$fNumInt","{lq_tmp$x##3376 : (GHC.Num.Num GHC.Types.Int) | lq_tmp$x##3376 == GHC.Num.$fNumInt}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":14,"startLine":90,"startCol":13},"realSpan":true},[["x","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":18,"startLine":73,"startCol":12},"realSpan":true},[["minTr1","{lq_tmp$x##1011 : (FibHeap.FibTree a) | lq_tmp$x##1011 == minTr1##a23O\n                                        && FibHeap.size lq_tmp$x##1011 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##1011)\n                                        && 0 < FibHeap.size lq_tmp$x##1011}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":21,"startLine":86,"startCol":20},"realSpan":true},[["x","{lq_tmp$x##3551 : (FibHeap.FibTree a) | lq_tmp$x##3551 == x##a23V\n                                        && FibHeap.size lq_tmp$x##3551 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3551)\n                                        && 0 < FibHeap.size lq_tmp$x##3551}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":37,"startLine":64,"startCol":34},"realSpan":true},[["ts1","{lq_tmp$x##2964 : [(FibHeap.FibTree a)] | lq_tmp$x##2964 == ts1##a23I\n                                          && FibHeap.lsize lq_tmp$x##2964 >= len lq_tmp$x##2964\n                                          && len lq_tmp$x##2964 >= 0}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":74,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805608","{lq_tmp$x##1100 : [{lq_tmp$x##1113 : (FibHeap.FibTree {lq_tmp$x##1112 : a | $k_##1109[VV##1108:=lq_tmp$x##1112][VV##1110:=lq_tmp$x##1113][lq_tmp$x##1104:=minTr1##a23O][lq_tmp$x##1105:=lq_anf$##7205759403792805607##d37F]}) | $k_##1111[VV##1110:=lq_tmp$x##1113][lq_tmp$x##1104:=minTr1##a23O][lq_tmp$x##1105:=lq_anf$##7205759403792805607##d37F]}]<\\lq_tmp$x##1107 VV -> {lq_tmp$x##1113 : (FibHeap.FibTree {lq_tmp$x##1112 : a | $k_##1115[VV##1114:=lq_tmp$x##1112][VV##1116:=lq_tmp$x##1113][lq_tmp$x##1104:=minTr1##a23O][lq_tmp$x##1105:=lq_anf$##7205759403792805607##d37F][lq_tmp$x##1118:=lq_tmp$x##1107]}) | $k_##1117[VV##1116:=lq_tmp$x##1113][lq_tmp$x##1104:=minTr1##a23O][lq_tmp$x##1105:=lq_anf$##7205759403792805607##d37F][lq_tmp$x##1118:=lq_tmp$x##1107]}> | is$GHC.Types.: lq_tmp$x##1100\nnot (is$GHC.Types.[] lq_tmp$x##1100)\nlq_tmp$x##1100 == GHC.Types.: minTr1##a23O lq_anf$##7205759403792805607##d37F\nibHeap.lsize lq_tmp$x##1100 == FibHeap.size minTr1##a23O + FibHeap.lsize lq_anf$##7205759403792805607##d37F\nhead lq_tmp$x##1100 == minTr1##a23O\nlen lq_tmp$x##1100 == 1 + len lq_anf$##7205759403792805607##d37F\nlqdc##$select##GHC.Types.:##1 lq_tmp$x##1100 == minTr1##a23O\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##1100 == lq_anf$##7205759403792805607##d37F\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     && tail lq_tmp$x##1100 == lq_anf$##7205759403792805607##d37F}"]]],[{"spanInfo":{"endLine":111,"filename":"src/FibHeap.hs","endCol":29,"startLine":111,"startCol":28},"realSpan":true},[[null,"{VV : forall a .\n      {lq_tmp$x##1344 : (FibHeap.FibHeap a) | FibHeap.isEmptyFibHeap lq_tmp$x##1344\n                                              && is$FibHeap.E lq_tmp$x##1344\n                                              && not (FibHeap.notEmptyFibHeap lq_tmp$x##1344)\n                                              && not (is$FibHeap.FH lq_tmp$x##1344)\n                                              && lq_tmp$x##1344 == FibHeap.E} | VV == FibHeap.E}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":27,"startLine":59,"startCol":26},"realSpan":true},[["x","{lq_tmp$x##831 : a | lq_tmp$x##831 == x##a23E}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":57,"startLine":99,"startCol":52},"realSpan":true},[["lq_anf$##7205759403792805623","{lq_tmp$x##1952 : [{lq_tmp$x##1965 : (FibHeap.FibTree {lq_tmp$x##1964 : a | $k_##1961[VV##1960:=lq_tmp$x##1964][VV##1962:=lq_tmp$x##1965][lq_tmp$x##1956:=t##a244][lq_tmp$x##1957:=ts'##a29d]}) | $k_##1963[VV##1962:=lq_tmp$x##1965][lq_tmp$x##1956:=t##a244][lq_tmp$x##1957:=ts'##a29d]}]<\\lq_tmp$x##1959 VV -> {lq_tmp$x##1965 : (FibHeap.FibTree {lq_tmp$x##1964 : a | $k_##1967[VV##1966:=lq_tmp$x##1964][VV##1968:=lq_tmp$x##1965][lq_tmp$x##1956:=t##a244][lq_tmp$x##1957:=ts'##a29d][lq_tmp$x##1970:=lq_tmp$x##1959]}) | $k_##1969[VV##1968:=lq_tmp$x##1965][lq_tmp$x##1956:=t##a244][lq_tmp$x##1957:=ts'##a29d][lq_tmp$x##1970:=lq_tmp$x##1959]}> | is$GHC.Types.: lq_tmp$x##1952\nnot (is$GHC.Types.[] lq_tmp$x##1952)\nlq_tmp$x##1952 == GHC.Types.: t##a244 ts'##a29d\nibHeap.lsize lq_tmp$x##1952 == FibHeap.size t##a244 + FibHeap.lsize ts'##a29d\nhead lq_tmp$x##1952 == t##a244\nlen lq_tmp$x##1952 == 1 + len ts'##a29d\nlqdc##$select##GHC.Types.:##1 lq_tmp$x##1952 == t##a244\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##1952 == ts'##a29d\ntail lq_tmp$x##1952 == ts'##a29d}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":31,"startLine":65,"startCol":24},"realSpan":true},[["lq_anf$##7205759403792805672","{lq_tmp$x##2821 : GHC.Types.Int | lq_tmp$x##2821 == r##a23G + lq_anf$##7205759403792805671##d38H}"]]],[{"spanInfo":{"endLine":79,"filename":"src/FibHeap.hs","endCol":21,"startLine":79,"startCol":20},"realSpan":true},[["h","{lq_tmp$x##1311 : (FibHeap.FibHeap a) | (FibHeap.isEmptyFibHeap lq_tmp$x##1311\n                                         && not (FibHeap.notEmptyFibHeap lq_tmp$x##1311))\n                                        || (FibHeap.notEmptyFibHeap lq_tmp$x##1311\n                                            && not (FibHeap.isEmptyFibHeap lq_tmp$x##1311))\n                                        && lq_tmp$x##1311 == h##a23T\n                                        && 0 < FibHeap.fibsize lq_tmp$x##1311}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":24,"startLine":129,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805679","{lq_tmp$x##3022 : GHC.Prim.Int# | lq_tmp$x##3022 == ds_d2ZK}"]]],[{"spanInfo":{"endLine":118,"filename":"src/FibHeap.hs","endCol":46,"startLine":118,"startCol":38},"realSpan":true},[["lq_anf$##7205759403792805695","{lq_tmp$x##3347 : GHC.Types.Int | lq_tmp$x##3347 == FibHeap.lsize ts##a24r\n                                  && lq_tmp$x##3347 >= len ts##a24r}"]]],[{"spanInfo":{"endLine":96,"filename":"src/FibHeap.hs","endCol":24,"startLine":96,"startCol":22},"realSpan":true},[[null,"{VV : forall a <p :: a a -> Bool>.\n      {lq_tmp$x##1626 : [a]<\\lq_tmp$x##1627 VV -> {lq_tmp$x##1625 : a<p lq_tmp$x##1627> | true}> | is$GHC.Types.[] lq_tmp$x##1626\n                                                                                                   && not (is$GHC.Types.: lq_tmp$x##1626)\n                                                                                                   && lq_tmp$x##1626 == GHC.Types.[]\n                                                                                                   && FibHeap.lsize lq_tmp$x##1626 == 0\n                                                                                                   && len lq_tmp$x##1626 == 0} | VV == GHC.Types.[]}"]]],[{"spanInfo":{"endLine":71,"filename":"src/FibHeap.hs","endCol":10,"startLine":71,"startCol":9},"realSpan":true},[["h","{VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":92,"startCol":32},"realSpan":true},[["xs","{lq_tmp$x##3809 : [(FibHeap.FibTree a)] | lq_tmp$x##3809 == xs##a242\n                                          && FibHeap.lsize lq_tmp$x##3809 >= len lq_tmp$x##3809\n                                          && len lq_tmp$x##3809 >= 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":58,"startLine":108,"startCol":56},"realSpan":true},[["ds_d35B","{lq_tmp$x##5514 : [(FibHeap.FibTree a)] | lq_tmp$x##5514 == ds_d35B\n                                          && FibHeap.lsize lq_tmp$x##5514 >= len lq_tmp$x##5514\n                                          && len lq_tmp$x##5514 >= 0}"]]],[{"spanInfo":{"endLine":63,"filename":"src/FibHeap.hs","endCol":8,"startLine":63,"startCol":6},"realSpan":true},[["t1","(FibHeap.FibTree a)"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":28,"startLine":92,"startCol":27},"realSpan":true},[["x","{lq_tmp$x##3841 : (FibHeap.FibTree a) | lq_tmp$x##3841 == x##a240\n                                        && FibHeap.size lq_tmp$x##3841 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##3841)\n                                        && 0 < FibHeap.size lq_tmp$x##3841}"]]],[{"spanInfo":{"endLine":48,"filename":"src/FibHeap.hs","endCol":25,"startLine":47,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805592","{lq_tmp$x##725 : (FibHeap.FibHeap a) | lq_tmp$x##725 == ds_d36p\n                                       && 0 < FibHeap.fibsize lq_tmp$x##725}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":17,"startLine":98,"startCol":14},"realSpan":true},[["ts'","{VV##1842 : [{VV##1835 : (FibHeap.FibTree {VV##1833 : a | $k_##1834}) | $k_##1836}]<\\lq_tmp$x##1837 VV -> {VV##1840 : (FibHeap.FibTree {VV##1838 : a | $k_##1839}) | $k_##1841}> | $k_##1843}"]]],[{"spanInfo":{"endLine":74,"filename":"src/FibHeap.hs","endCol":46,"startLine":74,"startCol":19},"realSpan":true},[["FibHeap.FH","{VV : forall a .\n      lq_tmp$x##1143:(FibHeap.FibTree a) -> lq_tmp$x##1144:[(FibHeap.FibTree a)] -> {lq_tmp$x##1139 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap lq_tmp$x##1139\n                                                                                                                            && is$FibHeap.FH lq_tmp$x##1139\n                                                                                                                            && not (FibHeap.isEmptyFibHeap lq_tmp$x##1139)\n                                                                                                                            && not (is$FibHeap.E lq_tmp$x##1139)\n                                                                                                                            && lq_tmp$x##1139 == FibHeap.FH lq_tmp$x##1143 lq_tmp$x##1144\n                                                                                                                            && FibHeap.fibsize lq_tmp$x##1139 == FibHeap.size lq_tmp$x##1143 + FibHeap.lsize lq_tmp$x##1144\n                                                                                                                            && FibHeap.minTree lq_tmp$x##1139 == lq_tmp$x##1143\n                                                                                                                            && FibHeap.trees lq_tmp$x##1139 == lq_tmp$x##1144} | VV == FibHeap.FH}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":18,"startLine":99,"startCol":12},"realSpan":true},[["lq_anf$##7205759403792805619","{lq_tmp$x##1903 : a | lq_tmp$x##1903 == FibHeap.root t##a244\n                      && $k_##1902[VV##1901:=lq_tmp$x##1903][lq_tmp$x##1900:=t##a244]}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":15,"startLine":82,"startCol":11},"realSpan":true},[[null,"{VV : forall a .\n      lq_tmp$x##1408:(FibHeap.FibTree a) -> {lq_tmp$x##1406 : a | lq_tmp$x##1406 == FibHeap.root lq_tmp$x##1408} | VV == FibHeap.root}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":48,"startLine":65,"startCol":19},"realSpan":true},[["FibHeap.Node","{VV : forall a .\n      lq_tmp$x##2881:{lq_tmp$x##2865 : GHC.Types.Int | lq_tmp$x##2865 >= 0} -> lq_tmp$x##2882:a -> lq_tmp$x##2883:[(FibHeap.FibTree a)] -> lq_tmp$x##2884:GHC.Types.Bool -> {lq_tmp$x##2875 : (FibHeap.FibTree a) | is$FibHeap.Node lq_tmp$x##2875\n                                                                                                                                                                                                                    && lq_tmp$x##2875 == FibHeap.Node lq_tmp$x##2881 lq_tmp$x##2882 lq_tmp$x##2883 lq_tmp$x##2884\n                                                                                                                                                                                                                    && FibHeap.marked lq_tmp$x##2875 == lq_tmp$x##2884\n                                                                                                                                                                                                                    && FibHeap.rank lq_tmp$x##2875 == lq_tmp$x##2881\n                                                                                                                                                                                                                    && FibHeap.root lq_tmp$x##2875 == lq_tmp$x##2882\n                                                                                                                                                                                                                    && FibHeap.size lq_tmp$x##2875 == FibHeap.pow2 lq_tmp$x##2881\n                                                                                                                                                                                                                    && FibHeap.subtrees lq_tmp$x##2875 == lq_tmp$x##2883} | VV == FibHeap.Node}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":30,"startLine":65,"startCol":29},"realSpan":true},[["lq_anf$##7205759403792805671","{lq_tmp$x##2805 : GHC.Types.Int | lq_tmp$x##2805 == (lq_anf$##7205759403792805670##d38G : int)}"]]],[{"spanInfo":{"endLine":98,"filename":"src/FibHeap.hs","endCol":12,"startLine":98,"startCol":10},"realSpan":true},[["t'","{VV##1784 : (FibHeap.FibTree {VV##1782 : a | $k_##1783}) | $k_##1785}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":99,"startCol":47},"realSpan":true},[["GHC.Tuple.(,)","{VV : forall a b <p2 :: a b -> Bool>.\n      lq_tmp$x##1991:a -> lq_tmp$x##1992:{lq_tmp$x##1983 : b<p2 lq_tmp$x##1991> | true} -> {lq_tmp$x##1988 : (a, b)<\\lq_tmp$x##1993 VV -> {lq_tmp$x##1987 : b<p2 lq_tmp$x##1993> | true}> | is$GHC.Tuple.(,) lq_tmp$x##1988\n                                                                                                                                                                                            && lq_tmp$x##1988 == GHC.Tuple.(,) lq_tmp$x##1991 lq_tmp$x##1992\n                                                                                                                                                                                            && fst lq_tmp$x##1988 == lq_tmp$x##1991\n                                                                                                                                                                                            && lqdc##$select##GHC.Tuple.(,)##1 lq_tmp$x##1988 == lq_tmp$x##1991\n                                                                                                                                                                                            && lqdc##$select##GHC.Tuple.(,)##2 lq_tmp$x##1988 == lq_tmp$x##1992\n                                                                                                                                                                                            && snd lq_tmp$x##1988 == lq_tmp$x##1992\n                                                                                                                                                                                            && x_Tuple21 lq_tmp$x##1988 == lq_tmp$x##1991\n                                                                                                                                                                                            && x_Tuple22 lq_tmp$x##1988 == lq_tmp$x##1992} | VV == GHC.Tuple.(,)}"]]],[{"spanInfo":{"endLine":82,"filename":"src/FibHeap.hs","endCol":25,"startLine":82,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805615","lq_tmp$x##1418:(FibHeap.FibHeap {lq_tmp$x##1421 : a | $k_##1420[VV##1419:=lq_tmp$x##1421]}) -> {lq_tmp$x##1416 : (FibHeap.FibTree {lq_tmp$x##1421 : a | $k_##1420[VV##1419:=lq_tmp$x##1421]}) | lq_tmp$x##1416 == FibHeap.minTree lq_tmp$x##1418}"]]],[{"spanInfo":{"endLine":129,"filename":"src/FibHeap.hs","endCol":11,"startLine":129,"startCol":10},"realSpan":true},[["lq_anf$##7205759403792805686","{lq_tmp$x##3083 : GHC.Prim.Int# | lq_tmp$x##3083 == 1}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":21,"startLine":130,"startCol":20},"realSpan":true},[["ds_d2ZD","{lq_tmp$x##3056 : GHC.Types.Int | lq_tmp$x##3056 == ds_d2ZD\n                                  && lq_tmp$x##3056 >= 0}"]]],[{"spanInfo":{"endLine":92,"filename":"src/FibHeap.hs","endCol":34,"startLine":86,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805698","{lq_tmp$x##3483 : [(FibHeap.FibTree a)] | lq_tmp$x##3483 == ds_d33M\n                                          && FibHeap.lsize lq_tmp$x##3483 >= len lq_tmp$x##3483\n                                          && len lq_tmp$x##3483 >= 0}"]]],[{"spanInfo":{"endLine":130,"filename":"src/FibHeap.hs","endCol":11,"startLine":130,"startCol":10},"realSpan":true},[["lq_anf$##7205759403792805681","{lq_tmp$x##3029 : GHC.Types.Int | lq_tmp$x##3029 == (lq_anf$##7205759403792805680##d38Q : int)}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":98,"startCol":5},"realSpan":true},[["lq_anf$##7205759403792805622","{lq_tmp$x##1937 : GHC.Types.Bool | (lq_tmp$x##1937 <=> lq_anf$##7205759403792805619##d37R < lq_anf$##7205759403792805620##d37S)\n                                   && lq_tmp$x##1937 == lq_anf$##7205759403792805621##d37T}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":10,"startLine":59,"startCol":1},"realSpan":true},[["FibHeap.singleton","forall a .\nlq_tmp$x##778:a -> {VV##0 : (FibHeap.FibHeap a) | FibHeap.notEmptyFibHeap VV##0\n                                                  && FibHeap.rank (FibHeap.minTree VV##0) == 1\n                                                  && FibHeap.subtrees (FibHeap.minTree VV##0) == GHC.Types.[]\n                                                  && FibHeap.trees VV##0 == GHC.Types.[]\n                                                  && FibHeap.root (FibHeap.minTree VV##0) == lq_tmp$x##778}"]]],[{"spanInfo":{"endLine":124,"filename":"src/FibHeap.hs","endCol":22,"startLine":124,"startCol":16},"realSpan":true},[["lq_anf$##7205759403792805690","{lq_tmp$x##3223 : GHC.Types.Int | lq_tmp$x##3223 == FibHeap.pow2 (FibHeap.rank t##a24s)\n                                  && lq_tmp$x##3223 == FibHeap.size t##a24s\n                                  && 0 < lq_tmp$x##3223}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":41,"startLine":65,"startCol":38},"realSpan":true},[["ts2","{lq_tmp$x##2862 : [(FibHeap.FibTree a)] | lq_tmp$x##2862 == ts2##a23L\n                                          && FibHeap.lsize lq_tmp$x##2862 >= len lq_tmp$x##2862\n                                          && len lq_tmp$x##2862 >= 0}"]]],[{"spanInfo":{"endLine":106,"filename":"src/FibHeap.hs","endCol":61,"startLine":106,"startCol":47},"realSpan":true},[["lq_anf$##7205759403792805725","{lq_tmp$x##5889 : [(FibHeap.FibTree {lq_tmp$x##5895 : a | $k_##5894[VV##5893:=lq_tmp$x##5895][lq_tmp$x##5891:=ds_d35A]})] | lq_tmp$x##5889 == FibHeap.subtrees ds_d35A}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":22,"startLine":64,"startCol":21},"realSpan":true},[["r","{lq_tmp$x##2926 : GHC.Types.Int | lq_tmp$x##2926 == r##a23G\n                                  && lq_tmp$x##2926 >= 0}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":29,"startLine":64,"startCol":28},"realSpan":true},[["x","{lq_tmp$x##2992 : a | lq_tmp$x##2992 == x##a23H}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":58,"startLine":96,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805618","{lq_tmp$x##1602 : [(FibHeap.FibTree a)] | lq_tmp$x##1602 == ds_d318\n                                          && FibHeap.lsize lq_tmp$x##1602 >= len lq_tmp$x##1602\n                                          && len lq_tmp$x##1602 >= 0}"]]],[{"spanInfo":{"endLine":64,"filename":"src/FibHeap.hs","endCol":12,"startLine":64,"startCol":11},"realSpan":true},[["y","{lq_tmp$x##2793 : a | lq_tmp$x##2793 == y##a23K}"]]],[{"spanInfo":{"endLine":65,"filename":"src/FibHeap.hs","endCol":37,"startLine":65,"startCol":35},"realSpan":true},[["lq_anf$##7205759403792805666","{lq_tmp$x##2856 : (FibHeap.FibTree a) | is$FibHeap.Node lq_tmp$x##2856\n                                        && lq_tmp$x##2856 == lq_anf$##7205759403792805666##d38C\n                                        && lq_tmp$x##2856 == t1##a23F\n                                        && lq_tmp$x##2856 == FibHeap.Node r##a23G x##a23H ts1##a23I ds_d33b\n                                        && FibHeap.marked lq_tmp$x##2856 == ds_d33b\n                                        && FibHeap.rank lq_tmp$x##2856 == r##a23G\n                                        && FibHeap.root lq_tmp$x##2856 == x##a23H\n                                        && FibHeap.size lq_tmp$x##2856 == FibHeap.pow2 r##a23G\n                                        && FibHeap.size lq_tmp$x##2856 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##2856)\n                                        && FibHeap.subtrees lq_tmp$x##2856 == ts1##a23I\n                                        && 0 < FibHeap.size lq_tmp$x##2856}"]]],[{"spanInfo":{"endLine":86,"filename":"src/FibHeap.hs","endCol":22,"startLine":86,"startCol":19},"realSpan":true},[["lq_anf$##7205759403792805710","{lq_tmp$x##3507 : [{lq_tmp$x##3514 : (FibHeap.FibTree {lq_tmp$x##3513 : a | $k_##3510[VV##3509:=lq_tmp$x##3513][VV##3511:=lq_tmp$x##3514]}) | $k_##3512[VV##3511:=lq_tmp$x##3514]}]<\\lq_tmp$x##3508 VV -> {lq_tmp$x##3514 : (FibHeap.FibTree {lq_tmp$x##3513 : a | $k_##3516[VV##3515:=lq_tmp$x##3513][VV##3517:=lq_tmp$x##3514][lq_tmp$x##3519:=lq_tmp$x##3508]}) | $k_##3518[VV##3517:=lq_tmp$x##3514][lq_tmp$x##3519:=lq_tmp$x##3508]}> | is$GHC.Types.[] lq_tmp$x##3507\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && not (is$GHC.Types.: lq_tmp$x##3507)\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && lq_tmp$x##3507 == GHC.Types.[]\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && FibHeap.lsize lq_tmp$x##3507 == 0\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && len lq_tmp$x##3507 == 0}"]]],[{"spanInfo":{"endLine":90,"filename":"src/FibHeap.hs","endCol":20,"startLine":90,"startCol":17},"realSpan":true},[["lq_anf$##7205759403792805700","{lq_tmp$x##3636 : [{lq_tmp$x##3643 : (FibHeap.FibTree {lq_tmp$x##3642 : a | $k_##3639[VV##3638:=lq_tmp$x##3642][VV##3640:=lq_tmp$x##3643]}) | $k_##3641[VV##3640:=lq_tmp$x##3643]}]<\\lq_tmp$x##3637 VV -> {lq_tmp$x##3643 : (FibHeap.FibTree {lq_tmp$x##3642 : a | $k_##3645[VV##3644:=lq_tmp$x##3642][VV##3646:=lq_tmp$x##3643][lq_tmp$x##3648:=lq_tmp$x##3637]}) | $k_##3647[VV##3646:=lq_tmp$x##3643][lq_tmp$x##3648:=lq_tmp$x##3637]}> | is$GHC.Types.[] lq_tmp$x##3636\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && not (is$GHC.Types.: lq_tmp$x##3636)\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && lq_tmp$x##3636 == GHC.Types.[]\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && FibHeap.lsize lq_tmp$x##3636 == 0\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && len lq_tmp$x##3636 == 0}"]]],[{"spanInfo":{"endLine":108,"filename":"src/FibHeap.hs","endCol":59,"startLine":108,"startCol":46},"realSpan":true},[["lq_anf$##7205759403792805722","{lq_tmp$x##5486 : [{lq_tmp$x##5501 : (FibHeap.FibTree {lq_tmp$x##5500 : a | $k_##5497[VV##5496:=lq_tmp$x##5500][VV##5498:=lq_tmp$x##5501][lq_tmp$x##5491:=lq_anf$##7205759403792805719##d39t][lq_tmp$x##5492:=ds_d35B]}) | $k_##5499[VV##5498:=lq_tmp$x##5501][lq_tmp$x##5491:=lq_anf$##7205759403792805719##d39t][lq_tmp$x##5492:=ds_d35B]}] | len lq_tmp$x##5486 == len lq_anf$##7205759403792805719##d39t + len ds_d35B}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":40,"startLine":99,"startCol":38},"realSpan":true},[["ds_d318","{lq_tmp$x##2099 : [(FibHeap.FibTree a)] | lq_tmp$x##2099 == ds_d318\n                                          && FibHeap.lsize lq_tmp$x##2099 >= len lq_tmp$x##2099\n                                          && len lq_tmp$x##2099 >= 0}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":50,"startLine":99,"startCol":48},"realSpan":true},[["t'","{lq_tmp$x##2031 : (FibHeap.FibTree {lq_tmp$x##2030 : a | $k_##1783[VV##1782:=lq_tmp$x##2030][VV##1784:=lq_tmp$x##2031]}) | lq_tmp$x##2031 == t'##a29b\n                                                                                                                           && FibHeap.size lq_tmp$x##2031 == FibHeap.pow2 (FibHeap.rank lq_tmp$x##2031)\n                                                                                                                           && 0 < FibHeap.size lq_tmp$x##2031\n                                                                                                                           && $k_##1785[VV##1784:=lq_tmp$x##2031]}"]]],[{"spanInfo":{"endLine":99,"filename":"src/FibHeap.hs","endCol":57,"startLine":99,"startCol":54},"realSpan":true},[["ts'","{lq_tmp$x##1979 : [{lq_tmp$x##1975 : (FibHeap.FibTree {lq_tmp$x##1974 : a | $k_##1834[VV##1833:=lq_tmp$x##1974][VV##1835:=lq_tmp$x##1975][VV##1842:=lq_tmp$x##1979]}) | $k_##1836[VV##1835:=lq_tmp$x##1975][VV##1842:=lq_tmp$x##1979]}]<\\lq_tmp$x##1980 VV -> {lq_tmp$x##1978 : (FibHeap.FibTree {lq_tmp$x##1977 : a | $k_##1839[VV##1838:=lq_tmp$x##1977][VV##1840:=lq_tmp$x##1978][VV##1842:=lq_tmp$x##1979][lq_tmp$x##1837:=lq_tmp$x##1980][lq_tmp$x##1976:=lq_tmp$x##1980]}) | $k_##1841[VV##1840:=lq_tmp$x##1978][VV##1842:=lq_tmp$x##1979][lq_tmp$x##1837:=lq_tmp$x##1980][lq_tmp$x##1976:=lq_tmp$x##1980]}> | lq_tmp$x##1979 == ts'##a29d\nibHeap.lsize lq_tmp$x##1979 >= len lq_tmp$x##1979\nlen lq_tmp$x##1979 >= 0\nk_##1843[VV##1842:=lq_tmp$x##1979]}"]]],[{"spanInfo":{"endLine":91,"filename":"src/FibHeap.hs","endCol":67,"startLine":91,"startCol":56},"realSpan":true},[["lq_anf$##7205759403792805706","{lq_tmp$x##3861 : (FibHeap.FibTree {lq_tmp$x##3870 : a | $k_##3869[VV##3868:=lq_tmp$x##3870][lq_tmp$x##3865:=fix$36$$36$dOrd_a2av][lq_tmp$x##3866:=x##a240][lq_tmp$x##3867:=x'##a241]}) | (FibHeap.root lq_tmp$x##3861 == FibHeap.root x##a240\n                                                                                                                                                                                           && FibHeap.root x##a240 <= FibHeap.root x'##a241)\n                                                                                                                                                                                          || (FibHeap.root lq_tmp$x##3861 == FibHeap.root x'##a241\n                                                                                                                                                                                              && FibHeap.root x'##a241 <= FibHeap.root x##a240)\n                                                                                                                                                                                          && FibHeap.rank lq_tmp$x##3861 == 1 + FibHeap.rank x##a240}"]]],[{"spanInfo":{"endLine":87,"filename":"src/FibHeap.hs","endCol":36,"startLine":87,"startCol":33},"realSpan":true},[["lq_anf$##7205759403792805709","{lq_tmp$x##3977 : [{lq_tmp$x##3990 : (FibHeap.FibTree {lq_tmp$x##3989 : a | $k_##3986[VV##3985:=lq_tmp$x##3989][VV##3987:=lq_tmp$x##3990][lq_tmp$x##3981:=x##a23V][lq_tmp$x##3982:=lq_anf$##7205759403792805708##d39i]}) | $k_##3988[VV##3987:=lq_tmp$x##3990][lq_tmp$x##3981:=x##a23V][lq_tmp$x##3982:=lq_anf$##7205759403792805708##d39i]}]<\\lq_tmp$x##3984 VV -> {lq_tmp$x##3990 : (FibHeap.FibTree {lq_tmp$x##3989 : a | $k_##3992[VV##3991:=lq_tmp$x##3989][VV##3993:=lq_tmp$x##3990][lq_tmp$x##3981:=x##a23V][lq_tmp$x##3982:=lq_anf$##7205759403792805708##d39i][lq_tmp$x##3995:=lq_tmp$x##3984]}) | $k_##3994[VV##3993:=lq_tmp$x##3990][lq_tmp$x##3981:=x##a23V][lq_tmp$x##3982:=lq_anf$##7205759403792805708##d39i][lq_tmp$x##3995:=lq_tmp$x##3984]}> | is$GHC.Types.: lq_tmp$x##3977\nnot (is$GHC.Types.[] lq_tmp$x##3977)\nlq_tmp$x##3977 == GHC.Types.: x##a23V lq_anf$##7205759403792805708##d39i\nibHeap.lsize lq_tmp$x##3977 == FibHeap.size x##a23V + FibHeap.lsize lq_anf$##7205759403792805708##d39i\nhead lq_tmp$x##3977 == x##a23V\nlen lq_tmp$x##3977 == 1 + len lq_anf$##7205759403792805708##d39i\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 && lqdc##$select##GHC.Types.:##1 lq_tmp$x##3977 == x##a23V\nlqdc##$select##GHC.Types.:##2 lq_tmp$x##3977 == lq_anf$##7205759403792805708##d39i\ntail lq_tmp$x##3977 == lq_anf$##7205759403792805708##d39i}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":40,"startLine":59,"startCol":1},"realSpan":true},[["lq_anf$##7205759403792805599","{lq_tmp$x##844 : [{lq_tmp$x##851 : (FibHeap.FibTree {lq_tmp$x##850 : a | $k_##847[VV##846:=lq_tmp$x##850][VV##848:=lq_tmp$x##851]}) | $k_##849[VV##848:=lq_tmp$x##851]}]<\\lq_tmp$x##845 VV -> {lq_tmp$x##851 : (FibHeap.FibTree {lq_tmp$x##850 : a | $k_##853[VV##852:=lq_tmp$x##850][VV##854:=lq_tmp$x##851][lq_tmp$x##856:=lq_tmp$x##845]}) | $k_##855[VV##854:=lq_tmp$x##851][lq_tmp$x##856:=lq_tmp$x##845]}> | is$GHC.Types.[] lq_tmp$x##844\n                                                                                                                                                                                                                                                                                                                                                                                                                   && not (is$GHC.Types.: lq_tmp$x##844)\n                                                                                                                                                                                                                                                                                                                                                                                                                   && lq_tmp$x##844 == GHC.Types.[]\n                                                                                                                                                                                                                                                                                                                                                                                                                   && FibHeap.lsize lq_tmp$x##844 == 0\n                                                                                                                                                                                                                                                                                                                                                                                                                   && len lq_tmp$x##844 == 0}"]]],[{"spanInfo":{"endLine":59,"filename":"src/FibHeap.hs","endCol":37,"startLine":59,"startCol":18},"realSpan":true},[["lq_anf$##7205759403792805598","{lq_tmp$x##816 : (FibHeap.FibTree {lq_tmp$x##829 : a | $k_##828[VV##827:=lq_tmp$x##829][lq_tmp$x##822:=lq_anf$##7205759403792805596##d37u][lq_tmp$x##823:=x##a23E][lq_tmp$x##824:=lq_anf$##7205759403792805597##d37v][lq_tmp$x##825:=GHC.Types.False]}) | is$FibHeap.Node lq_tmp$x##816\n                                                                                                                                                                                                                                                          && lq_tmp$x##816 == FibHeap.Node lq_anf$##7205759403792805596##d37u x##a23E lq_anf$##7205759403792805597##d37v GHC.Types.False\n                                                                                                                                                                                                                                                          && FibHeap.marked lq_tmp$x##816 == GHC.Types.False\n                                                                                                                                                                                                                                                          && FibHeap.rank lq_tmp$x##816 == lq_anf$##7205759403792805596##d37u\n                                                                                                                                                                                                                                                          && FibHeap.root lq_tmp$x##816 == x##a23E\n                                                                                                                                                                                                                                                          && FibHeap.size lq_tmp$x##816 == FibHeap.pow2 lq_anf$##7205759403792805596##d37u\n                                                                                                                                                                                                                                                          && FibHeap.subtrees lq_tmp$x##816 == lq_anf$##7205759403792805597##d37v}"]]],[{"spanInfo":{"endLine":73,"filename":"src/FibHeap.hs","endCol":32,"startLine":73,"startCol":7},"realSpan":true},[["lq_anf$##7205759403792805605","{lq_tmp$x##1028 : GHC.Types.Bool | lq_tmp$x##1028 <=> lq_anf$##7205759403792805603##d37B < lq_anf$##7205759403792805604##d37C}"]]]],"o_bots":[],"o_result":{"tag":"Safe","contents":{"numCstr":71,"numIter":114,"numBrkt":74,"numChck":389,"numVald":131}}}