(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun papp7 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807778$35$$35$d3GG () Int)
(declare-fun lq_tmp$36$x$35$$35$6165 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun lq_tmp$36$x$35$$35$7030 () Int)
(declare-fun fix$36$$36$dOrd_a2qk () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun Binomial.insert$39$ () Int)
(declare-fun lq_tmp$36$x$35$$35$7470 () Int)
(declare-fun lq_tmp$36$x$35$$35$8150 () Int)
(declare-fun lq_tmp$36$x$35$$35$6930 () Int)
(declare-fun ds_d3Ct () Int)
(declare-fun t$35$$35$a29N () Int)
(declare-fun lq_tmp$36$x$35$$35$7892 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807743$35$$35$d3G7 () Int)
(declare-fun Binomial.valid () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$7232 () Int)
(declare-fun lq_tmp$36$x$35$$35$6200 () Int)
(declare-fun lq_tmp$36$x$35$$35$7440 () Int)
(declare-fun lq_tmp$36$x$35$$35$8447 () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$200$44$1$41$$45$$40$205$44$63$41$$124$function$32$merge$39$ () Str)
(declare-fun Binomial.tail () Int)
(declare-fun ds_d3vr () Int)
(declare-fun Binomial.rankOfFirstTree () Int)
(declare-fun t1$35$$35$a2ai () Int)
(declare-fun lq_tmp$36$x$35$$35$7202 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun Language.Haskell.Liquid.Bag.fromList () Int)
(declare-fun lq_tmp$36$x$35$$35$1547 () Int)
(declare-fun lq_tmp$36$x$35$$35$8520 () Int)
(declare-fun lq_tmp$36$x$35$$35$7410 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807723$35$$35$d3FN () Int)
(declare-fun ds_d3w6 () Int)
(declare-fun Data.Map.Internal.Tip () Map)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_tmp$36$x$35$$35$2697 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun Binomial.reverseHeapList () Int)
(declare-fun lq_tmp$36$x$35$$35$7409 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_tmp$36$x$35$$35$7713 () Int)
(declare-fun ds_d3AP () Int)
(declare-fun lq_tmp$36$x$35$$35$4125 () Int)
(declare-fun lq_tmp$36$x$35$$35$9605 () Int)
(declare-fun lq_tmp$36$x$35$$35$8435 () Int)
(declare-fun lq_tmp$36$x$35$$35$8570 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807882$35$$35$d3Im () Int)
(declare-fun lq_tmp$36$x$35$$35$8569 () Int)
(declare-fun r$35$$35$a2af () Int)
(declare-fun lq_tmp$36$x$35$$35$3652 () Int)
(declare-fun fix$36$$36$krep_a2u0 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807851$35$$35$d3HR () Int)
(declare-fun lq_tmp$36$x$35$$35$2917 () Int)
(declare-fun lq_tmp$36$x$35$$35$6812 () Int)
(declare-fun lq_tmp$36$x$35$$35$5989 () Int)
(declare-fun ds_d3w1 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun ds_d3Dz () Int)
(declare-fun tail () Int)
(declare-fun ds_d3Aw () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807638$35$$35$d3Eq () Int)
(declare-fun lq_tmp$36$x$35$$35$7299 () Int)
(declare-fun sz2$35$$35$a2ar () Int)
(declare-fun lq_tmp$36$x$35$$35$1509 () Int)
(declare-fun lq_tmp$36$x$35$$35$1905 () Int)
(declare-fun lq_tmp$36$x$35$$35$5549 () Int)
(declare-fun isJust () Int)
(declare-fun lq_tmp$36$x$35$$35$3996 () Int)
(declare-fun lq_tmp$36$x$35$$35$6146 () Int)
(declare-fun ds_d3Dg () Int)
(declare-fun fix$36$$36$dOrd_a2pN () Int)
(declare-fun Binomial.treeSize () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_tmp$36$x$35$$35$6187 () Int)
(declare-fun lq_tmp$36$x$35$$35$9283 () Int)
(declare-fun lq_tmp$36$x$35$$35$4905 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807649$35$$35$d3EB () Int)
(declare-fun lq_tmp$36$x$35$$35$9867 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun ds_d3C8 () Int)
(declare-fun lq_tmp$36$x$35$$35$9823 () Int)
(declare-fun lq_tmp$36$x$35$$35$2839 () Int)
(declare-fun lit$36$Heap () Str)
(declare-fun GHC.List.span () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807887$35$$35$d3Ir () Int)
(declare-fun residual$35$$35$a2b7 () Int)
(declare-fun lq_tmp$36$x$35$$35$8902 () Int)
(declare-fun lq_tmp$36$x$35$$35$6588 () Int)
(declare-fun lq_tmp$36$x$35$$35$8939 () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$9288 () Int)
(declare-fun lq_tmp$36$x$35$$35$6159 () Int)
(declare-fun lq_tmp$36$x$35$$35$9020 () Int)
(declare-fun lq_tmp$36$x$35$$35$9345 () Int)
(declare-fun lq_tmp$36$x$35$$35$8311 () Int)
(declare-fun lq_tmp$36$x$35$$35$9266 () Int)
(declare-fun lq_tmp$36$x$35$$35$1615 () Int)
(declare-fun Binomial.assert () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807864$35$$35$d3I4 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807866$35$$35$d3I6 () Int)
(declare-fun lq_tmp$36$x$35$$35$3109 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807822$35$$35$d3Ho () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a2th () Int)
(declare-fun Binomial.Heap () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun Binomial.treeRank () Int)
(declare-fun Binomial.treeElts () Int)
(declare-fun fix$36$$36$dOrd_a2pE () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3508 () Int)
(declare-fun lq_tmp$36$x$35$$35$7573 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807755$35$$35$d3Gj () Int)
(declare-fun lq_tmp$36$x$35$$35$9359 () Int)
(declare-fun lq_tmp$36$x$35$$35$6976 () Int)
(declare-fun Binomial.rankOfTailDecreases () Int)
(declare-fun lq_tmp$36$x$35$$35$3148 () Int)
(declare-fun ds_d3C6 () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3137 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun ds_d3vk () Int)
(declare-fun Binomial.insert () Int)
(declare-fun lq_tmp$36$x$35$$35$4020 () Int)
(declare-fun lq_tmp$36$x$35$$35$6118 () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Classes.$36$fEqInt () Int)
(declare-fun lq_tmp$36$x$35$$35$7934 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$8247 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Binomial.root () Int)
(declare-fun Binomial.singleton () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807894$35$$35$d3Iy () Int)
(declare-fun lq_tmp$36$x$35$$35$7295 () Int)
(declare-fun Binomial.deleteMin$39$ () Int)
(declare-fun x$35$$35$a2aw () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun lq_tmp$36$x$35$$35$9330 () Int)
(declare-fun lq_tmp$36$x$35$$35$8089 () Int)
(declare-fun lq_tmp$36$x$35$$35$8090 () Int)
(declare-fun lq_tmp$36$x$35$$35$9671 () Int)
(declare-fun ds_d3Ds () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun Binomial.pow2Lemma () Int)
(declare-fun lq_tmp$36$x$35$$35$2677 () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun Binomial.unheapNonempty () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Language.Haskell.Liquid.Bag.get () Int)
(declare-fun lq_tmp$36$x$35$$35$3618 () Int)
(declare-fun lq_tmp$36$x$35$$35$7322 () Int)
(declare-fun Binomial.treeListToList () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_tmp$36$x$35$$35$7923 () Int)
(declare-fun lq_tmp$36$x$35$$35$7990 () Int)
(declare-fun lq_tmp$36$x$35$$35$3051 () Int)
(declare-fun lq_tmp$36$x$35$$35$1284 () Int)
(declare-fun ds_d3x4 () Int)
(declare-fun lq_tmp$36$x$35$$35$9521 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807711$35$$35$d3FB () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807809$35$$35$d3Hb () Int)
(declare-fun Binomial.link () Int)
(declare-fun lit$36$main () Str)
(declare-fun lq_tmp$36$x$35$$35$7110 () Int)
(declare-fun lq_tmp$36$x$35$$35$8483 () Int)
(declare-fun Binomial.Node () Int)
(declare-fun Data.Map.Internal.$36$WBin () Int)
(declare-fun lq_tmp$36$x$35$$35$9196 () Int)
(declare-fun Binomial.head () Int)
(declare-fun ds_d3Dx () Int)
(declare-fun Binomial.merge () Int)
(declare-fun lq_tmp$36$x$35$$35$6387 () Int)
(declare-fun lq_tmp$36$x$35$$35$8345 () Int)
(declare-fun lq_tmp$36$x$35$$35$3393 () Int)
(declare-fun Binomial.size () Int)
(declare-fun lq_tmp$36$x$35$$35$6682 () Int)
(declare-fun ds_d3DE () Int)
(declare-fun lq_tmp$36$x$35$$35$4428 () Int)
(declare-fun fix$36$$36$dOrd_a2jF () Int)
(declare-fun lq_tmp$36$x$35$$35$9308 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun sz$35$$35$a2ah () Int)
(declare-fun lq_tmp$36$x$35$$35$7951 () Int)
(declare-fun ds_d3yp () Int)
(declare-fun t$35$$35$a2ax () Int)
(declare-fun minElt$35$$35$a2sH () Int)
(declare-fun lq_tmp$36$x$35$$35$1120 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807628$35$$35$d3Eg () Str)
(declare-fun lq_tmp$36$x$35$$35$5935 () Int)
(declare-fun lq_tmp$36$x$35$$35$7261 () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun lq_tmp$36$x$35$$35$3427 () Int)
(declare-fun lq_tmp$36$x$35$$35$7306 () Int)
(declare-fun lq_tmp$36$x$35$$35$5558 () Int)
(declare-fun lq_tmp$36$x$35$$35$9657 () Int)
(declare-fun t$39$$35$$35$a2jN () Int)
(declare-fun lq_tmp$36$x$35$$35$8058 () Int)
(declare-fun lq_tmp$36$x$35$$35$4108 () Int)
(declare-fun lq_tmp$36$x$35$$35$3439 () Int)
(declare-fun lq_tmp$36$x$35$$35$6964 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun fix$36$$36$dOrd_a2pk () Int)
(declare-fun ds_d3wI () Int)
(declare-fun fromList () Int)
(declare-fun fix$36$$36$dEq_a2tG () Int)
(declare-fun lq_tmp$36$x$35$$35$3817 () Int)
(declare-fun x$35$$35$a2aC () Int)
(declare-fun fix$36$$36$dOrd_a2s0 () Int)
(declare-fun lq_tmp$36$x$35$$35$3745 () Int)
(declare-fun fix$36$$36$dOrd_a2k8 () Int)
(declare-fun Binomial.heapSort () Int)
(declare-fun lq_tmp$36$x$35$$35$6157 () Int)
(declare-fun lq_tmp$36$x$35$$35$3276 () Int)
(declare-fun lq_tmp$36$x$35$$35$3434 () Int)
(declare-fun lq_tmp$36$x$35$$35$5656 () Int)
(declare-fun lq_tmp$36$x$35$$35$4664 () Int)
(declare-fun Binomial.toList () Int)
(declare-fun Binomial.subtreeEltsAreEltsOfTree () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_tmp$36$x$35$$35$4062 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807640$35$$35$d3Es () Int)
(declare-fun lq_tmp$36$x$35$$35$7861 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_tmp$36$x$35$$35$2442 () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$7171 () Int)
(declare-fun lq_tmp$36$x$35$$35$814 () Int)
(declare-fun lq_tmp$36$x$35$$35$2318 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807850$35$$35$d3HQ () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_tmp$36$x$35$$35$3118 () Int)
(declare-fun t2$35$$35$a2an () Int)
(declare-fun x$35$$35$a2a5 () Int)
(declare-fun ds_d3CK () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6775 () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4117 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun Language.Haskell.Liquid.Bag.put () Int)
(declare-fun lq_tmp$36$x$35$$35$6731 () Int)
(declare-fun lq_tmp$36$x$35$$35$1424 () Int)
(declare-fun lq_tmp$36$x$35$$35$8641 () Int)
(declare-fun lq_tmp$36$x$35$$35$8322 () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a2tr () Int)
(declare-fun lq_tmp$36$x$35$$35$9277 () Int)
(declare-fun lq_tmp$36$x$35$$35$1741 () Int)
(declare-fun GHC.Classes.$36$p1Ord () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun ds_d3Bg () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$6176 () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$171$58$1$45$35$124$function$32$unheapNonempty () Str)
(declare-fun lq_tmp$36$x$35$$35$5627 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lq_tmp$36$x$35$$35$9272 () Int)
(declare-fun lq_tmp$36$x$35$$35$3162 () Int)
(declare-fun fix$36$$36$dOrd_a2jr () Int)
(declare-fun lq_tmp$36$x$35$$35$3005 () Int)
(declare-fun Binomial.merge$39$ () Int)
(declare-fun fix$36$$36$krep_a2tU () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$73$58$1$45$31$124$function$32$rankOfTailDecreases () Str)
(declare-fun lq_tmp$36$x$35$$35$4013 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lq_tmp$36$x$35$$35$4005 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$5581 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Binomial.$36$fEqHeap () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_tmp$36$x$35$$35$3453 () Int)
(declare-fun fix$36$$36$krep_a2u3 () Int)
(declare-fun lq_tmp$36$x$35$$35$7556 () Int)
(declare-fun h$35$$35$a2bd () Int)
(declare-fun lq_tmp$36$x$35$$35$1109 () Int)
(declare-fun fix$36$$36$krep_a2tZ () Int)
(declare-fun fix$36$$36$dOrd_a2pW () Int)
(declare-fun residual$35$$35$a2aU () Int)
(declare-fun Binomial.appendPreservingListElts () Int)
(declare-fun lq_tmp$36$x$35$$35$9793 () Int)
(declare-fun h$39$$35$$35$a2sJ () Int)
(declare-fun lq_tmp$36$x$35$$35$5133 () Int)
(declare-fun lq_tmp$36$x$35$$35$3412 () Int)
(declare-fun ds_d3yn () Int)
(declare-fun cast_as () Int)
(declare-fun lq_tmp$36$x$35$$35$8172 () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lq_tmp$36$x$35$$35$3513 () Int)
(declare-fun lq_tmp$36$x$35$$35$7012 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef () Int)
(declare-fun lq_tmp$36$x$35$$35$4725 () Int)
(declare-fun ds_d3Av () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Classes.$36$fEq$91$$93$ () Int)
(declare-fun Binomial.reverseHeapListAux () Int)
(declare-fun lq_tmp$36$x$35$$35$7909 () Int)
(declare-fun lq_tmp$36$x$35$$35$4074 () Int)
(declare-fun lq_tmp$36$x$35$$35$8869 () Int)
(declare-fun lq_tmp$36$x$35$$35$3950 () Int)
(declare-fun lq_tmp$36$x$35$$35$6199 () Int)
(declare-fun lq_tmp$36$x$35$$35$7462 () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$9215 () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$76$44$1$41$$45$$40$77$44$77$41$$124$function$32$rankOfFirstTree () Str)
(declare-fun lq_tmp$36$x$35$$35$3501 () Int)
(declare-fun ds_d3Bv () Int)
(declare-fun Binomial.empty () Int)
(declare-fun Binomial.fromList () Int)
(declare-fun lq_tmp$36$x$35$$35$8106 () Int)
(declare-fun ds_d3wF () Int)
(declare-fun lit$36$Tree () Str)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_tmp$36$x$35$$35$7580 () Int)
(declare-fun lq_tmp$36$x$35$$35$6158 () Int)
(declare-fun ds_d3sB () Int)
(declare-fun lq_tmp$36$x$35$$35$7903 () Int)
(declare-fun lq_tmp$36$x$35$$35$5923 () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_tmp$36$x$35$$35$8827 () Int)
(declare-fun lq_tmp$36$x$35$$35$10025 () Int)
(declare-fun Binomial.toSortedList () Int)
(declare-fun r$35$$35$a29I () Int)
(declare-fun lq_tmp$36$x$35$$35$2447 () Int)
(declare-fun lq_tmp$36$x$35$$35$6201 () Int)
(declare-fun ds_d3uS () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun Binomial.pow2 () Int)
(declare-fun fix$36$$36$dOrd_a2sX () Int)
(declare-fun Binomial.deleteMin () Int)
(declare-fun Language.Haskell.Liquid.Bag.empty () Map)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$70$58$1$45$16$124$function$32$tail () Str)
(declare-fun lq_tmp$36$x$35$$35$8713 () Int)
(declare-fun lq_tmp$36$x$35$$35$8508 () Int)
(declare-fun lq_tmp$36$x$35$$35$6975 () Int)
(declare-fun ds_d3DJ () Int)
(declare-fun lq_tmp$36$x$35$$35$2160 () Int)
(declare-fun lq_tmp$36$x$35$$35$7637 () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lq_tmp$36$x$35$$35$2788 () Int)
(declare-fun lq_tmp$36$x$35$$35$6931 () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun lit$36$$39$Heap () Str)
(declare-fun lq_tmp$36$x$35$$35$6776 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_tmp$36$x$35$$35$6633 () Int)
(declare-fun lq_tmp$36$x$35$$35$1661 () Int)
(declare-fun lq_tmp$36$x$35$$35$7447 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lq_tmp$36$x$35$$35$6824 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3092 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun fix$36$$36$dOrd_a2j4 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$8333 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807732$35$$35$d3FW () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807846$35$$35$d3HM () Int)
(declare-fun lq_tmp$36$x$35$$35$3451 () Int)
(declare-fun lq_tmp$36$x$35$$35$10018 () Int)
(declare-fun lit$36$Binomial () Str)
(declare-fun lq_tmp$36$x$35$$35$10045 () Int)
(declare-fun r2$35$$35$a2ap () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$x$35$$35$10001 () Int)
(declare-fun Language.Haskell.Liquid.Bag.union () Int)
(declare-fun lq_tmp$36$x$35$$35$2463 () Int)
(declare-fun ds_d3Bj () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$7313 () Int)
(declare-fun lq_tmp$36$x$35$$35$4367 () Int)
(declare-fun residual$35$$35$a2a2 () Int)
(declare-fun lq_tmp$36$x$35$$35$6998 () Int)
(declare-fun lq_tmp$36$x$35$$35$3454 () Int)
(declare-fun Binomial.treeListSize () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$68$58$1$45$14$124$function$32$head () Str)
(declare-fun Binomial.unheap () Int)
(declare-fun GHC.Types.$36$tcInt () Int)
(declare-fun lq_tmp$36$x$35$$35$2664 () Int)
(declare-fun lq_tmp$36$x$35$$35$5892 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_tmp$36$x$35$$35$9766 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_tmp$36$x$35$$35$3962 () Int)
(declare-fun residual$35$$35$a29U () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun sz1$35$$35$a2am () Int)
(declare-fun lq_tmp$36$x$35$$35$9514 () Int)
(declare-fun lq_tmp$36$x$35$$35$5848 () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun fix$36$$36$dOrd_a2lS () Int)
(declare-fun lq_tmp$36$x$35$$35$8346 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun ds_d3C9 () Int)
(declare-fun lq_tmp$36$x$35$$35$1725 () Int)
(declare-fun ds_d3wH () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807616$35$$35$d3E4 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun Binomial.null () Int)
(declare-fun lq_tmp$36$x$35$$35$3667 () Int)
(declare-fun lq_tmp$36$x$35$$35$4132 () Int)
(declare-fun lq_tmp$36$x$35$$35$1603 () Int)
(declare-fun lq_tmp$36$x$35$$35$9216 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun lq_tmp$36$x$35$$35$6587 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lit$36$$39$Node () Str)
(declare-fun ds_d3DC () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$5977 () Int)
(declare-fun new$35$$35$a2at () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun fix$36$$36$dOrd_a2o6 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_tmp$36$x$35$$35$5965 () Int)
(declare-fun t$35$$35$a2s7 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lq_tmp$36$x$35$$35$5569 () Int)
(declare-fun lq_tmp$36$x$35$$35$6977 () Int)
(declare-fun ds_d3DH () Int)
(declare-fun Language.Haskell.Liquid.Bag.bagSize () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun Binomial.listElts () Int)
(declare-fun lq_karg$36$VV$35$$35$1504$35$$35$k_$35$$35$1505 () Int)
(declare-fun ds_d3z6 () Int)
(declare-fun lq_tmp$36$x$35$$35$1215 () Int)
(declare-fun fix$36$$36$dOrd_a2sz () Int)
(declare-fun lq_tmp$36$x$35$$35$997 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$7324 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$9847 () Int)
(declare-fun Binomial.treeToList () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun ds_d3BC () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun fix$36$$36$dOrd_a2mY () Int)
(declare-fun lq_tmp$36$x$35$$35$2572 () Int)
(declare-fun ds_d3Du () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807803$35$$35$d3H5 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Binomial.subtrees () Int)
(declare-fun fix$36$$36$dOrd_a2t8 () Int)
(declare-fun lq_tmp$36$x$35$$35$9773 () Int)
(declare-fun Data.Map.Internal.Bin () Int)
(declare-fun lq_tmp$36$x$35$$35$3643 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_tmp$36$x$35$$35$1501 () Int)
(declare-fun head () Int)
(declare-fun lq_tmp$36$x$35$$35$7323 () Int)
(declare-fun bagSize () Int)
(declare-fun lq_tmp$36$x$35$$35$9840 () Int)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Binomial.treeListElts () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807873$35$$35$d3Id () Int)
(declare-fun lq_tmp$36$x$35$$35$8951 () Int)
(declare-fun lq_tmp$36$x$35$$35$3452 () Int)
(declare-fun fix$36$$36$krep_a2u2 () Int)
(declare-fun fix$36$$36$dOrd_a2mS () Int)
(declare-fun Language.Haskell.Liquid.Bag.thm_size () Int)
(declare-fun lq_tmp$36$x$35$$35$7249 () Int)
(declare-fun Language.Haskell.Liquid.Bag.thm_emp () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun ds_d3Bi () Int)
(declare-fun VV$35$$35$F$35$$35$973 () Str)
(declare-fun lq_tmp$36$x$35$$35$5580 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$8484 () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$162$44$1$41$$45$$40$167$44$36$41$$124$function$32$deleteMin$39$ () Str)
(declare-fun lq_tmp$36$x$35$$35$9203 () Int)
(declare-fun lq_tmp$36$x$35$$35$2687 () Int)
(declare-fun lq_tmp$36$x$35$$35$6049 () Int)
(declare-fun lq_tmp$36$x$35$$35$9749 () Int)
(declare-fun fix$36$$36$dOrd_a2mH () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun x$35$$35$a2aE () Int)
(declare-fun lq_tmp$36$x$35$$35$3660 () Int)
(declare-fun lq_tmp$36$x$35$$35$8542 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$9211 () Int)
(declare-fun lq_tmp$36$x$35$$35$5644 () Int)
(declare-fun lq_tmp$36$x$35$$35$4676 () Int)
(declare-fun Binomial.isOrdered () Int)
(declare-fun r1$35$$35$a2ak () Int)
(declare-fun lq_tmp$36$x$35$$35$8344 () Int)
(declare-fun ds_d3vF () Int)
(declare-fun lq_tmp$36$x$35$$35$6683 () Int)
(declare-fun lq_tmp$36$x$35$$35$7950 () Int)
(declare-fun ds_d3yq () Int)
(declare-fun new$35$$35$a2as () Int)
(declare-fun lq_tmp$36$x$35$$35$3101 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Types.$36$tc$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$6080 () Int)
(declare-fun lq_tmp$36$x$35$$35$8868 () Int)
(declare-fun lq_tmp$36$x$35$$35$7797 () Int)
(declare-fun lq_tmp$36$x$35$$35$8592 () Int)
(declare-fun lq_tmp$36$x$35$$35$5218 () Int)
(declare-fun Binomial.treeAtLeastRoot () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV () Int)
(declare-fun fix$36$$36$dEq_a2nn () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$3063 () Int)
(declare-fun lq_tmp$36$x$35$$35$7898 () Int)
(declare-fun lq_tmp$36$x$35$$35$4379 () Int)
(declare-fun lq_tmp$36$x$35$$35$6719 () Int)
(declare-fun papp2 () Int)
(declare-fun Binomial.rank () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$8944 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun Binomial.elts () Int)
(declare-fun lq_tmp$36$x$35$$35$9303 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun lq_tmp$36$x$35$$35$7860 () Int)
(declare-fun Data.Map.Internal.$36$fEqMap () Int)
(declare-fun lq_tmp$36$x$35$$35$7943 () Int)
(declare-fun lq_tmp$36$x$35$$35$7284 () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int Map) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$17 (Int Map) Str)
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Map)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$14 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Map)
(declare-fun apply$35$$35$16 (Int Map) Bool)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$3 (Int Int) Map)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) Map)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$18 (Int Map) Map)
(declare-fun apply$35$$35$15 (Int Map) Int)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$19 (Map) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$17 (Map) Str)
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Map)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$14 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Map)
(declare-fun coerce$35$$35$16 (Map) Bool)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$3 (Int) Map)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) Map)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$18 (Map) Map)
(declare-fun coerce$35$$35$15 (Map) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 (Map (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$17 (Map Str) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Map) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Map) Int)
(declare-fun smt_lambda$35$$35$16 (Map Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int Map) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Map) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$18 (Map Map) Int)
(declare-fun smt_lambda$35$$35$15 (Map Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$2$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$3$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$4$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$5$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$6$35$$35$15 () Map)
(declare-fun lam_arg$35$$35$7$35$$35$15 () Map)


(assert (distinct lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$162$44$1$41$$45$$40$167$44$36$41$$124$function$32$deleteMin$39$ lit$36$$39$Node lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$68$58$1$45$14$124$function$32$head lit$36$Binomial lit$36$$39$Heap lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$70$58$1$45$16$124$function$32$tail lit$36$Tree lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$76$44$1$41$$45$$40$77$44$77$41$$124$function$32$rankOfFirstTree lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$73$58$1$45$31$124$function$32$rankOfTailDecreases lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$171$58$1$45$35$124$function$32$unheapNonempty lit$36$main lit$36$Heap lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$200$44$1$41$$45$$40$205$44$63$41$$124$function$32$merge$39$))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$200$44$1$41$$45$$40$205$44$63$41$$124$function$32$merge$39$) 122))
(assert (= (strLen lit$36$Heap) 4))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$171$58$1$45$35$124$function$32$unheapNonempty) 122))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$73$58$1$45$31$124$function$32$rankOfTailDecreases) 126))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$76$44$1$41$$45$$40$77$44$77$41$$124$function$32$rankOfFirstTree) 129))
(assert (= (strLen lit$36$Tree) 4))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$70$58$1$45$16$124$function$32$tail) 111))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$$39$Heap) 5))
(assert (= (strLen lit$36$Binomial) 8))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$68$58$1$45$14$124$function$32$head) 111))
(assert (= (strLen lit$36$$39$Node) 5))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$$40$162$44$1$41$$45$$40$167$44$36$41$$124$function$32$deleteMin$39$) 126))
(push 1)
(define-fun b$36$$35$$35$98 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$1295 () Bool (and (= VV$35$$35$F$35$$35$973 lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$70$58$1$45$16$124$function$32$tail) (= VV$35$$35$F$35$$35$973 lq_anf$36$$35$$35$7205759403792807628$35$$35$d3Eg)))
(define-fun b$36$$35$$35$243 () Bool (= lq_anf$36$$35$$35$7205759403792807628$35$$35$d3Eg lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Binomial.hs$58$70$58$1$45$16$124$function$32$tail))
(define-fun b$36$$35$$35$94 () Bool GHC.Types.True)
(push 1)
(push 1)
(assert (and (and (= (apply$35$$35$3 (as fromList Int) ds_d3uS) (smt_map_def 0)) (>= (apply$35$$35$0 (as len Int) ds_d3uS) 0) (= 0 1) (> (apply$35$$35$0 (as len Int) ds_d3uS) 0) (= (apply$35$$35$0 (as len Int) ds_d3uS) 0) (= (apply$35$$35$3 (as fromList Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (smt_map_def 0)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= 0 1) (> (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= (apply$35$$35$3 (as fromList Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (smt_map_def 0)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= 0 1) (> (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= (apply$35$$35$3 (as fromList Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (smt_map_def 0)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= 0 1) (> (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0)) b$36$$35$$35$98 (and (= (apply$35$$35$0 (as head Int) ds_d3uS) (apply$35$$35$0 (as Binomial.head Int) ds_d3uS)) (>= (apply$35$$35$0 (as len Int) ds_d3uS) 0)) b$36$$35$$35$1295 (and (= lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef ds_d3uS) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (apply$35$$35$0 (as Binomial.head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0)) (and (= lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef ds_d3uS) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (apply$35$$35$0 (as Binomial.head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0)) (and (= lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef ds_d3uS) (= (apply$35$$35$3 (as fromList Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (smt_map_def 0)) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) (apply$35$$35$0 (as Binomial.head Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef)) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792807627$35$$35$d3Ef) 0)) b$36$$35$$35$243 b$36$$35$$35$94))
(push 1)
(assert (not (apply$35$$35$11 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
