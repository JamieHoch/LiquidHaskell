{"status":"safe","types":{"87":{"34":{"row":87,"col":34,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"33":{"row":87,"col":33,"ident":"lq_anf$##7205759403792805709","ann":"{v : [(FibHeap.FibTree a)] | head v == x\n                             && lqdc##$select v == x}"},"37":{"row":87,"col":37,"ident":"ds_d33M","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},"22":{"row":87,"col":22,"ident":"Data.Foldable.$fFoldable[]","ann":"{v : (Data.Foldable.Foldable []) | v == $fFoldable[]}"},"28":{"row":87,"col":28,"ident":"lq_anf$##7205759403792805707","ann":"x1:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x1 + 1}"}},"135":{"23":{"row":135,"col":23,"ident":"FibHeap.pow2","ann":"x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v == pow2 x1\n                                                        && v == (if 0 == x1 then 1 else 2 * pow2 (x1 - 1))\n                                                        && 0 < v}"},"1":{"row":135,"col":1,"ident":"FibHeap.size","ann":"forall a .\nx1:(FibHeap.FibTree a) -> {VV : GHC.Types.Int | VV == pow2 (rank x1)\n                                                && VV == size x1\n                                                && 0 < VV}"},"28":{"row":135,"col":28,"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"}},"59":{"38":{"row":59,"col":38,"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"},"24":{"row":59,"col":24,"ident":"lq_anf$##7205759403792805596","ann":"GHC.Types.Int"},"1":{"row":59,"col":1,"ident":"FibHeap.singleton","ann":"forall a .\nx1:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                    && rank (minTree VV) == 1\n                                    && root (minTree VV) == x1\n                                    && subtrees (minTree VV) == []\n                                    && trees VV == []}"},"26":{"row":59,"col":26,"ident":"x","ann":"{VV : a | VV == x}"},"11":{"row":59,"col":11,"ident":"x","ann":"a"},"18":{"row":59,"col":18,"ident":"lq_anf$##7205759403792805598","ann":"{v : (FibHeap.FibTree a) | marked v == False\n                           && root v == x}"},"31":{"row":59,"col":31,"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},"28":{"row":59,"col":28,"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"}},"98":{"10":{"row":98,"col":10,"ident":"t'","ann":"(FibHeap.FibTree a)"},"21":{"row":98,"col":21,"ident":"FibHeap.extractMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},"32":{"row":98,"col":32,"ident":"ds_d318","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},"14":{"row":98,"col":14,"ident":"ts'","ann":"[(FibHeap.FibTree a)]"}},"53":{"1":{"row":53,"col":1,"ident":"FibHeap.makeHeap","ann":"forall a . {VV : (FibHeap.FibHeap a) | not (notEmptyFibHeap VV)}"}},"104":{"38":{"row":104,"col":38,"ident":"_","ann":"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"},"1":{"row":104,"col":1,"ident":"FibHeap.deleteMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> (FibHeap.FibHeap a)"}},"65":{"34":{"row":65,"col":34,"ident":"lq_anf$##7205759403792805673","ann":"{v : [(FibHeap.FibTree a)] | len v == 1 + len ts2\n                             && lqdc##$select v == ts2\n                             && tail v == ts2}"},"38":{"row":65,"col":38,"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},"43":{"row":65,"col":43,"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},"24":{"row":65,"col":24,"ident":"lq_anf$##7205759403792805672","ann":"GHC.Types.Int"},"29":{"row":65,"col":29,"ident":"lq_anf$##7205759403792805671","ann":"GHC.Types.Int"},"19":{"row":65,"col":19,"ident":"FibHeap.Node","ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"},"32":{"row":65,"col":32,"ident":"y","ann":"{VV : a | VV == y}"},"35":{"row":65,"col":35,"ident":"lq_anf$##7205759403792805666","ann":"{v : (FibHeap.FibTree a) | v == t1\n                           && rank v == r\n                           && root v == x\n                           && size v == pow2 r\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts1\n                           && 0 < size v}"},"25":{"row":65,"col":25,"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"}},"108":{"34":{"row":108,"col":34,"ident":"lq_anf$##7205759403792805723","ann":"{v : [(FibHeap.FibTree a)] | len v > 0}"},"6":{"row":108,"col":6,"ident":"minTr'","ann":"(FibHeap.FibTree a)"},"21":{"row":108,"col":21,"ident":"lq_anf$##7205759403792805721","ann":"{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},"46":{"row":108,"col":46,"ident":"lq_anf$##7205759403792805722","ann":"[(FibHeap.FibTree a)]"},"47":{"row":108,"col":47,"ident":"lq_anf$##7205759403792805719","ann":"{v : [(FibHeap.FibTree a)] | v == subtr\n                             && v == : x xs\n                             && head v == x\n                             && len v == 1 + len xs\n                             && lqdc##$select v == x\n                             && lqdc##$select v == xs\n                             && lsize v == size x + lsize xs\n                             && tail v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},"14":{"row":108,"col":14,"ident":"ts'","ann":"[(FibHeap.FibTree a)]"},"56":{"row":108,"col":56,"ident":"ds_d35B","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"}},"96":{"19":{"row":96,"col":19,"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"1":{"row":96,"col":1,"ident":"FibHeap.extractMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},"18":{"row":96,"col":18,"ident":"lq_anf$##7205759403792805624","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},"22":{"row":96,"col":22,"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"}},"48":{"20":{"row":48,"col":20,"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"}},"106":{"34":{"row":106,"col":34,"ident":"lq_anf$##7205759403792805727","ann":"{v : [(FibHeap.FibTree a)] | len v > 0}"},"65":{"row":106,"col":65,"ident":"ds_d35B","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},"6":{"row":106,"col":6,"ident":"minTr'","ann":"(FibHeap.FibTree a)"},"21":{"row":106,"col":21,"ident":"lq_anf$##7205759403792805724","ann":"{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},"46":{"row":106,"col":46,"ident":"lq_anf$##7205759403792805726","ann":"[(FibHeap.FibTree a)]"},"47":{"row":106,"col":47,"ident":"lq_anf$##7205759403792805725","ann":"[(FibHeap.FibTree a)]"},"14":{"row":106,"col":14,"ident":"ts'","ann":"[(FibHeap.FibTree a)]"},"56":{"row":106,"col":56,"ident":"ds_d35A","ann":"{v : (FibHeap.FibTree a) | size v == pow2 (rank v)\n                           && 0 < size v}"}},"129":{"10":{"row":129,"col":10,"ident":"lq_anf$##7205759403792805686","ann":"{v : GHC.Prim.Int# | v == 1}"},"1":{"row":129,"col":1,"ident":"FibHeap.pow2","ann":"{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | 0 < VV}"}},"79":{"10":{"row":79,"col":10,"ident":"x","ann":"a"},"33":{"row":79,"col":33,"ident":"x","ann":"{VV : a | VV == x}"},"8":{"row":79,"col":8,"ident":"h","ann":"(FibHeap.FibHeap a)"},"1":{"row":79,"col":1,"ident":"FibHeap.insert","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                              && (root (minTree VV) == root (minTree x2)\n                                                                  && root (minTree x2) <= x3)\n                                                                 || ((x3 <= root (minTree x2)\n                                                                      || not (notEmptyFibHeap x2))\n                                                                     && root (minTree VV) == x3)}"},"20":{"row":79,"col":20,"ident":"h","ann":"{v : (FibHeap.FibHeap a) | (isEmptyFibHeap v\n                            && not (notEmptyFibHeap v))\n                           || (notEmptyFibHeap v\n                               && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"},"22":{"row":79,"col":22,"ident":"lq_anf$##7205759403792805611","ann":"{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && rank (minTree v) == 1\n                           && root (minTree v) == x\n                           && subtrees (minTree v) == []\n                           && trees v == []}"}},"118":{"38":{"row":118,"col":38,"ident":"lq_anf$##7205759403792805695","ann":"{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"},"30":{"row":118,"col":30,"ident":"minTr","ann":"{v : (FibHeap.FibTree a) | v == minTr\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"44":{"row":118,"col":44,"ident":"ts","ann":"{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0\n                             && lsize v >= len v}"},"1":{"row":118,"col":1,"ident":"FibHeap.fibsize","ann":"forall a .\nx1:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : GHC.Types.Int | VV == fibsize x1\n                                                                            && 0 < VV}"},"25":{"row":118,"col":25,"ident":"lq_anf$##7205759403792805694","ann":"{v : GHC.Types.Int | v == pow2 (rank minTr)\n                     && v == size minTr\n                     && 0 < v}"}},"123":{"1":{"row":123,"col":1,"ident":"FibHeap.lsize","ann":"forall a .\nx1:[(FibHeap.FibTree a)] -> {VV : GHC.Types.Int | VV == lsize x1\n                                                  && VV >= len x1}"},"12":{"row":123,"col":12,"ident":"lq_anf$##7205759403792805689","ann":"{v : GHC.Prim.Int# | v == 0}"}},"74":{"29":{"row":74,"col":29,"ident":"lq_anf$##7205759403792805608","ann":"{v : [(FibHeap.FibTree a)] | head v == minTr1\n                             && lqdc##$select v == minTr1}"},"30":{"row":74,"col":30,"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"19":{"row":74,"col":19,"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},"37":{"row":74,"col":37,"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},"42":{"row":74,"col":42,"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},"22":{"row":74,"col":22,"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"}},"91":{"40":{"row":91,"col":40,"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"53":{"row":91,"col":53,"ident":"xs","ann":"{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},"48":{"row":91,"col":48,"ident":"meld","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"},"30":{"row":91,"col":30,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"62":{"row":91,"col":62,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"35":{"row":91,"col":35,"ident":"lq_anf$##7205759403792805702","ann":"{v : GHC.Types.Int | v == rank x'\n                     && v >= 0}"},"64":{"row":91,"col":64,"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"25":{"row":91,"col":25,"ident":"lq_anf$##7205759403792805701","ann":"{v : GHC.Types.Int | v == rank x\n                     && v >= 0}"},"56":{"row":91,"col":56,"ident":"lq_anf$##7205759403792805706","ann":"{v : (FibHeap.FibTree a) | (root v == root x\n                            && root x <= root x')\n                           || (root v == root x'\n                               && root x' <= root x)\n                           && rank v == 1 + rank x}"}},"41":{"21":{"row":41,"col":21,"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},"1":{"row":41,"col":1,"ident":"FibHeap.notEmptyFibHeap","ann":"forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | VV <=> notEmptyFibHeap x1}"}},"105":{"36":{"row":105,"col":36,"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},"46":{"row":105,"col":46,"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},"39":{"row":105,"col":39,"ident":"minTr'","ann":"{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"}},"1":{"1":{"row":1,"col":1,"ident":"FibHeap.$trModule","ann":"GHC.Types.Module"}},"71":{"13":{"row":71,"col":13,"ident":"h","ann":"{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && (isEmptyFibHeap v\n                               && not (notEmptyFibHeap v))\n                              || (notEmptyFibHeap v\n                                  && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"},"1":{"row":71,"col":1,"ident":"FibHeap.merge","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                                                                            && (root (minTree VV) == root (minTree x2)\n                                                                                                                && root (minTree x2) < root (minTree x3))\n                                                                                                               || ((root (minTree x3) <= root (minTree x2)\n                                                                                                                    || not (notEmptyFibHeap x2))\n                                                                                                                   && root (minTree VV) == root (minTree x3))}"},"9":{"row":71,"col":9,"ident":"h","ann":"{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV}"}},"86":{"19":{"row":86,"col":19,"ident":"lq_anf$##7205759403792805710","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},"1":{"row":86,"col":1,"ident":"FibHeap.consolidate","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> {v : [(FibHeap.FibTree a)] | len v > 0}"},"20":{"row":86,"col":20,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"}},"47":{"1":{"row":47,"col":1,"ident":"FibHeap.isEmptyFibHeap","ann":"forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | (VV\n                                                  && not (notEmptyFibHeap x1))\n                                                 || (notEmptyFibHeap x1\n                                                     && not VV)\n                                                 && (VV <=> isEmptyFibHeap x1)}"},"20":{"row":47,"col":20,"ident":"GHC.Types.True","ann":"{v : GHC.Types.Bool | v\n                      && v == True}"}},"92":{"29":{"row":92,"col":29,"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"32":{"row":92,"col":32,"ident":"xs","ann":"{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},"27":{"row":92,"col":27,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"}},"99":{"34":{"row":99,"col":34,"ident":"GHC.Tuple.(,)","ann":"{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"},"54":{"row":99,"col":54,"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},"17":{"row":99,"col":17,"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"38":{"row":99,"col":38,"ident":"ds_d318","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},"21":{"row":99,"col":21,"ident":"lq_anf$##7205759403792805620","ann":"{VV : a | VV == root t'}"},"48":{"row":99,"col":48,"ident":"t'","ann":"{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"52":{"row":99,"col":52,"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"26":{"row":99,"col":26,"ident":"t'","ann":"{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"35":{"row":99,"col":35,"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"47":{"row":99,"col":47,"ident":"GHC.Tuple.(,)","ann":"{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"},"12":{"row":99,"col":12,"ident":"lq_anf$##7205759403792805619","ann":"{VV : a | VV == root t}"}},"107":{"65":{"row":107,"col":65,"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},"58":{"row":107,"col":58,"ident":"minTr'","ann":"{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"55":{"row":107,"col":55,"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"}},"64":{"34":{"row":64,"col":34,"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},"21":{"row":64,"col":21,"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"},"15":{"row":64,"col":15,"ident":"FibHeap.Node","ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"},"30":{"row":64,"col":30,"ident":"lq_anf$##7205759403792805677","ann":"{v : [(FibHeap.FibTree a)] | len v == 1 + len ts1\n                             && lqdc##$select v == ts1\n                             && tail v == ts1}"},"11":{"row":64,"col":11,"ident":"y","ann":"{VV : a | VV == y}"},"7":{"row":64,"col":7,"ident":"x","ann":"{VV : a | VV == x}"},"20":{"row":64,"col":20,"ident":"lq_anf$##7205759403792805676","ann":"GHC.Types.Int"},"39":{"row":64,"col":39,"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},"25":{"row":64,"col":25,"ident":"lq_anf$##7205759403792805675","ann":"GHC.Types.Int"},"31":{"row":64,"col":31,"ident":"lq_anf$##7205759403792805667","ann":"{v : (FibHeap.FibTree a) | v == t2\n                           && rank t1 == rank v\n                           && root v == y\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts2\n                           && 0 < size v}"},"28":{"row":64,"col":28,"ident":"x","ann":"{VV : a | VV == x}"}},"111":{"10":{"row":111,"col":10,"ident":"xs","ann":"[a]"},"21":{"row":111,"col":21,"ident":"lq_anf$##7205759403792805612","ann":"x1:(FibHeap.FibHeap a) -> x2:a -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                             && (root (minTree v) == root (minTree x1)\n                                                                 && root (minTree x1) <= x2)\n                                                                || ((x2 <= root (minTree x1)\n                                                                     || not (notEmptyFibHeap x1))\n                                                                    && root (minTree v) == x2)}"},"30":{"row":111,"col":30,"ident":"xs","ann":"{v : [a] | v == xs\n           && len v >= 0\n           && lsize v >= len v}"},"1":{"row":111,"col":1,"ident":"FibHeap.fromList","ann":"forall a . (GHC.Classes.Ord<[]> a) => [a] -> (FibHeap.FibHeap a)"},"28":{"row":111,"col":28,"ident":"_","ann":"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"}},"73":{"53":{"row":73,"col":53,"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},"38":{"row":73,"col":38,"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"21":{"row":73,"col":21,"ident":"lq_anf$##7205759403792805604","ann":"{VV : a | VV == root minTr2}"},"46":{"row":73,"col":46,"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"58":{"row":73,"col":58,"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},"26":{"row":73,"col":26,"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"35":{"row":73,"col":35,"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},"7":{"row":73,"col":7,"ident":"lq_anf$##7205759403792805603","ann":"{VV : a | VV == root minTr1}"},"45":{"row":73,"col":45,"ident":"lq_anf$##7205759403792805610","ann":"{v : [(FibHeap.FibTree a)] | head v == minTr2\n                             && lqdc##$select v == minTr2}"},"12":{"row":73,"col":12,"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"}},"124":{"21":{"row":124,"col":21,"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"16":{"row":124,"col":16,"ident":"lq_anf$##7205759403792805690","ann":"{v : GHC.Types.Int | v == pow2 (rank t)\n                     && v == size t\n                     && 0 < v}"},"25":{"row":124,"col":25,"ident":"lq_anf$##7205759403792805691","ann":"{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"},"31":{"row":124,"col":31,"ident":"ts","ann":"{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0}"}},"130":{"10":{"row":130,"col":10,"ident":"lq_anf$##7205759403792805681","ann":"GHC.Types.Int"},"19":{"row":130,"col":19,"ident":"lq_anf$##7205759403792805684","ann":"GHC.Types.Int"},"14":{"row":130,"col":14,"ident":"lq_anf$##7205759403792805685","ann":"{VV : GHC.Types.Int | 0 < VV}"},"20":{"row":130,"col":20,"ident":"ds_d2ZD","ann":"{v : GHC.Types.Int | v >= 0}"},"22":{"row":130,"col":22,"ident":"lq_anf$##7205759403792805683","ann":"GHC.Types.Int"}},"90":{"17":{"row":90,"col":17,"ident":"lq_anf$##7205759403792805700","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},"13":{"row":90,"col":13,"ident":"x","ann":"(FibHeap.FibTree a)"},"18":{"row":90,"col":18,"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},"5":{"row":90,"col":5,"ident":"meld","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"}},"42":{"21":{"row":42,"col":21,"ident":"GHC.Types.True","ann":"{v : GHC.Types.Bool | v\n                      && v == True}"}},"63":{"6":{"row":63,"col":6,"ident":"t1","ann":"(FibHeap.FibTree a)"},"1":{"row":63,"col":1,"ident":"FibHeap.link","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibTree a) -> x3:{t2 : (FibHeap.FibTree a) | rank x2 == rank t2} -> {v : (FibHeap.FibTree a) | (root v == root x2\n                                                                                                            && root x2 <= root x3)\n                                                                                                           || (root v == root x3\n                                                                                                               && root x3 <= root x2)\n                                                                                                           && rank v == 1 + rank x2}"},"26":{"row":63,"col":26,"ident":"t2","ann":"{t2 : (FibHeap.FibTree a) | rank t1 == rank t2}"}},"82":{"1":{"row":82,"col":1,"ident":"FibHeap.findMin","ann":"forall a . (GHC.Classes.Ord<[]> a) => (FibHeap.FibHeap a) -> a"},"11":{"row":82,"col":11,"ident":"_","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> {VV : a | VV == root x1} | VV == root}"},"18":{"row":82,"col":18,"ident":"_","ann":"{VV : forall a .\n      x1:(FibHeap.FibHeap a) -> {v : (FibHeap.FibTree a) | v == minTree x1} | VV == minTree}"}}},"errors":[],"sptypes":[{"start":{"line":1,"column":1},"stop":{"line":1,"column":1},"ident":"FibHeap.$trModule","ann":"GHC.Types.Module"},{"start":{"line":41,"column":1},"stop":{"line":41,"column":16},"ident":"FibHeap.notEmptyFibHeap","ann":"forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | VV <=> notEmptyFibHeap x1}"},{"start":{"line":41,"column":21},"stop":{"line":41,"column":26},"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},{"start":{"line":42,"column":21},"stop":{"line":42,"column":25},"ident":"GHC.Types.True","ann":"{v : GHC.Types.Bool | v\n                      && v == True}"},{"start":{"line":47,"column":1},"stop":{"line":47,"column":15},"ident":"FibHeap.isEmptyFibHeap","ann":"forall a .\nx1:(FibHeap.FibHeap a) -> {VV : GHC.Types.Bool | (VV\n                                                  && not (notEmptyFibHeap x1))\n                                                 || (notEmptyFibHeap x1\n                                                     && not VV)\n                                                 && (VV <=> isEmptyFibHeap x1)}"},{"start":{"line":47,"column":20},"stop":{"line":47,"column":24},"ident":"GHC.Types.True","ann":"{v : GHC.Types.Bool | v\n                      && v == True}"},{"start":{"line":48,"column":20},"stop":{"line":48,"column":25},"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},{"start":{"line":53,"column":1},"stop":{"line":53,"column":9},"ident":"FibHeap.makeHeap","ann":"forall a . {VV : (FibHeap.FibHeap a) | not (notEmptyFibHeap VV)}"},{"start":{"line":59,"column":1},"stop":{"line":59,"column":10},"ident":"FibHeap.singleton","ann":"forall a .\nx1:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                    && rank (minTree VV) == 1\n                                    && root (minTree VV) == x1\n                                    && subtrees (minTree VV) == []\n                                    && trees VV == []}"},{"start":{"line":59,"column":11},"stop":{"line":59,"column":12},"ident":"x","ann":"a"},{"start":{"line":59,"column":18},"stop":{"line":59,"column":37},"ident":"lq_anf$##7205759403792805598","ann":"{v : (FibHeap.FibTree a) | marked v == False\n                           && root v == x}"},{"start":{"line":59,"column":24},"stop":{"line":59,"column":25},"ident":"lq_anf$##7205759403792805596","ann":"GHC.Types.Int"},{"start":{"line":59,"column":26},"stop":{"line":59,"column":27},"ident":"x","ann":"{VV : a | VV == x}"},{"start":{"line":59,"column":28},"stop":{"line":59,"column":30},"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"},{"start":{"line":59,"column":31},"stop":{"line":59,"column":36},"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},{"start":{"line":59,"column":38},"stop":{"line":59,"column":40},"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"},{"start":{"line":63,"column":1},"stop":{"line":63,"column":5},"ident":"FibHeap.link","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibTree a) -> x3:{t2 : (FibHeap.FibTree a) | rank x2 == rank t2} -> {v : (FibHeap.FibTree a) | (root v == root x2\n                                                                                                            && root x2 <= root x3)\n                                                                                                           || (root v == root x3\n                                                                                                               && root x3 <= root x2)\n                                                                                                           && rank v == 1 + rank x2}"},{"start":{"line":63,"column":6},"stop":{"line":63,"column":8},"ident":"t1","ann":"(FibHeap.FibTree a)"},{"start":{"line":63,"column":26},"stop":{"line":63,"column":28},"ident":"t2","ann":"{t2 : (FibHeap.FibTree a) | rank t1 == rank t2}"},{"start":{"line":64,"column":7},"stop":{"line":64,"column":8},"ident":"x","ann":"{VV : a | VV == x}"},{"start":{"line":64,"column":11},"stop":{"line":64,"column":12},"ident":"y","ann":"{VV : a | VV == y}"},{"start":{"line":64,"column":15},"stop":{"line":64,"column":44},"ident":"FibHeap.Node","ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"},{"start":{"line":64,"column":20},"stop":{"line":64,"column":27},"ident":"lq_anf$##7205759403792805676","ann":"GHC.Types.Int"},{"start":{"line":64,"column":21},"stop":{"line":64,"column":22},"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"},{"start":{"line":64,"column":25},"stop":{"line":64,"column":26},"ident":"lq_anf$##7205759403792805675","ann":"GHC.Types.Int"},{"start":{"line":64,"column":28},"stop":{"line":64,"column":29},"ident":"x","ann":"{VV : a | VV == x}"},{"start":{"line":64,"column":30},"stop":{"line":64,"column":38},"ident":"lq_anf$##7205759403792805677","ann":"{v : [(FibHeap.FibTree a)] | len v == 1 + len ts1\n                             && lqdc##$select v == ts1\n                             && tail v == ts1}"},{"start":{"line":64,"column":31},"stop":{"line":64,"column":33},"ident":"lq_anf$##7205759403792805667","ann":"{v : (FibHeap.FibTree a) | v == t2\n                           && rank t1 == rank v\n                           && root v == y\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts2\n                           && 0 < size v}"},{"start":{"line":64,"column":34},"stop":{"line":64,"column":37},"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":64,"column":39},"stop":{"line":64,"column":44},"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},{"start":{"line":65,"column":19},"stop":{"line":65,"column":48},"ident":"FibHeap.Node","ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> x3:[(FibHeap.FibTree a)] -> x4:GHC.Types.Bool -> {v : (FibHeap.FibTree a) | v == Node x1 x2 x3 x4\n                                                                                                                             && marked v == x4\n                                                                                                                             && rank v == x1\n                                                                                                                             && root v == x2\n                                                                                                                             && size v == pow2 x1\n                                                                                                                             && subtrees v == x3} | VV == Node}"},{"start":{"line":65,"column":24},"stop":{"line":65,"column":31},"ident":"lq_anf$##7205759403792805672","ann":"GHC.Types.Int"},{"start":{"line":65,"column":25},"stop":{"line":65,"column":26},"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"},{"start":{"line":65,"column":29},"stop":{"line":65,"column":30},"ident":"lq_anf$##7205759403792805671","ann":"GHC.Types.Int"},{"start":{"line":65,"column":32},"stop":{"line":65,"column":33},"ident":"y","ann":"{VV : a | VV == y}"},{"start":{"line":65,"column":34},"stop":{"line":65,"column":42},"ident":"lq_anf$##7205759403792805673","ann":"{v : [(FibHeap.FibTree a)] | len v == 1 + len ts2\n                             && lqdc##$select v == ts2\n                             && tail v == ts2}"},{"start":{"line":65,"column":35},"stop":{"line":65,"column":37},"ident":"lq_anf$##7205759403792805666","ann":"{v : (FibHeap.FibTree a) | v == t1\n                           && rank v == r\n                           && root v == x\n                           && size v == pow2 r\n                           && size v == pow2 (rank v)\n                           && subtrees v == ts1\n                           && 0 < size v}"},{"start":{"line":65,"column":38},"stop":{"line":65,"column":41},"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":65,"column":43},"stop":{"line":65,"column":48},"ident":"GHC.Types.False","ann":"{v : GHC.Types.Bool | not v\n                      && v == False}"},{"start":{"line":71,"column":1},"stop":{"line":71,"column":6},"ident":"FibHeap.merge","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                                                                            && (root (minTree VV) == root (minTree x2)\n                                                                                                                && root (minTree x2) < root (minTree x3))\n                                                                                                               || ((root (minTree x3) <= root (minTree x2)\n                                                                                                                    || not (notEmptyFibHeap x2))\n                                                                                                                   && root (minTree VV) == root (minTree x3))}"},{"start":{"line":71,"column":9},"stop":{"line":71,"column":10},"ident":"h","ann":"{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV}"},{"start":{"line":71,"column":13},"stop":{"line":71,"column":14},"ident":"h","ann":"{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && (isEmptyFibHeap v\n                               && not (notEmptyFibHeap v))\n                              || (notEmptyFibHeap v\n                                  && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"},{"start":{"line":73,"column":7},"stop":{"line":73,"column":18},"ident":"lq_anf$##7205759403792805603","ann":"{VV : a | VV == root minTr1}"},{"start":{"line":73,"column":12},"stop":{"line":73,"column":18},"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":73,"column":21},"stop":{"line":73,"column":32},"ident":"lq_anf$##7205759403792805604","ann":"{VV : a | VV == root minTr2}"},{"start":{"line":73,"column":26},"stop":{"line":73,"column":32},"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":73,"column":35},"stop":{"line":73,"column":62},"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},{"start":{"line":73,"column":38},"stop":{"line":73,"column":44},"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":73,"column":45},"stop":{"line":73,"column":62},"ident":"lq_anf$##7205759403792805610","ann":"{v : [(FibHeap.FibTree a)] | head v == minTr2\n                             && lqdc##$select v == minTr2}"},{"start":{"line":73,"column":46},"stop":{"line":73,"column":52},"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":73,"column":53},"stop":{"line":73,"column":56},"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":73,"column":58},"stop":{"line":73,"column":61},"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":74,"column":19},"stop":{"line":74,"column":46},"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},{"start":{"line":74,"column":22},"stop":{"line":74,"column":28},"ident":"minTr2","ann":"{v : (FibHeap.FibTree a) | v == minTr2\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":74,"column":29},"stop":{"line":74,"column":46},"ident":"lq_anf$##7205759403792805608","ann":"{v : [(FibHeap.FibTree a)] | head v == minTr1\n                             && lqdc##$select v == minTr1}"},{"start":{"line":74,"column":30},"stop":{"line":74,"column":36},"ident":"minTr1","ann":"{v : (FibHeap.FibTree a) | v == minTr1\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":74,"column":37},"stop":{"line":74,"column":40},"ident":"ts1","ann":"{v : [(FibHeap.FibTree a)] | v == ts1\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":74,"column":42},"stop":{"line":74,"column":45},"ident":"ts2","ann":"{v : [(FibHeap.FibTree a)] | v == ts2\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":79,"column":1},"stop":{"line":79,"column":7},"ident":"FibHeap.insert","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(FibHeap.FibHeap a) -> x3:a -> {VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV\n                                                              && (root (minTree VV) == root (minTree x2)\n                                                                  && root (minTree x2) <= x3)\n                                                                 || ((x3 <= root (minTree x2)\n                                                                      || not (notEmptyFibHeap x2))\n                                                                     && root (minTree VV) == x3)}"},{"start":{"line":79,"column":8},"stop":{"line":79,"column":9},"ident":"h","ann":"(FibHeap.FibHeap a)"},{"start":{"line":79,"column":10},"stop":{"line":79,"column":11},"ident":"x","ann":"a"},{"start":{"line":79,"column":20},"stop":{"line":79,"column":21},"ident":"h","ann":"{v : (FibHeap.FibHeap a) | (isEmptyFibHeap v\n                            && not (notEmptyFibHeap v))\n                           || (notEmptyFibHeap v\n                               && not (isEmptyFibHeap v))\n                           && v == h\n                           && 0 < fibsize v}"},{"start":{"line":79,"column":22},"stop":{"line":79,"column":35},"ident":"lq_anf$##7205759403792805611","ann":"{v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                           && rank (minTree v) == 1\n                           && root (minTree v) == x\n                           && subtrees (minTree v) == []\n                           && trees v == []}"},{"start":{"line":79,"column":33},"stop":{"line":79,"column":34},"ident":"x","ann":"{VV : a | VV == x}"},{"start":{"line":82,"column":1},"stop":{"line":82,"column":8},"ident":"FibHeap.findMin","ann":"forall a . (GHC.Classes.Ord<[]> a) => (FibHeap.FibHeap a) -> a"},{"start":{"line":82,"column":11},"stop":{"line":82,"column":15},"ident":"_","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> {VV : a | VV == root x1} | VV == root}"},{"start":{"line":82,"column":18},"stop":{"line":82,"column":25},"ident":"_","ann":"{VV : forall a .\n      x1:(FibHeap.FibHeap a) -> {v : (FibHeap.FibTree a) | v == minTree x1} | VV == minTree}"},{"start":{"line":86,"column":1},"stop":{"line":86,"column":12},"ident":"FibHeap.consolidate","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> {v : [(FibHeap.FibTree a)] | len v > 0}"},{"start":{"line":86,"column":19},"stop":{"line":86,"column":22},"ident":"lq_anf$##7205759403792805710","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},{"start":{"line":86,"column":20},"stop":{"line":86,"column":21},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":87,"column":22},"stop":{"line":87,"column":39},"ident":"Data.Foldable.$fFoldable[]","ann":"{v : (Data.Foldable.Foldable []) | v == $fFoldable[]}"},{"start":{"line":87,"column":28},"stop":{"line":87,"column":32},"ident":"lq_anf$##7205759403792805707","ann":"x1:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x1 + 1}"},{"start":{"line":87,"column":33},"stop":{"line":87,"column":36},"ident":"lq_anf$##7205759403792805709","ann":"{v : [(FibHeap.FibTree a)] | head v == x\n                             && lqdc##$select v == x}"},{"start":{"line":87,"column":34},"stop":{"line":87,"column":35},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":87,"column":37},"stop":{"line":87,"column":39},"ident":"ds_d33M","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":90,"column":5},"stop":{"line":90,"column":9},"ident":"meld","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"},{"start":{"line":90,"column":13},"stop":{"line":90,"column":14},"ident":"x","ann":"(FibHeap.FibTree a)"},{"start":{"line":90,"column":17},"stop":{"line":90,"column":20},"ident":"lq_anf$##7205759403792805700","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},{"start":{"line":90,"column":18},"stop":{"line":90,"column":19},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":91,"column":25},"stop":{"line":91,"column":31},"ident":"lq_anf$##7205759403792805701","ann":"{v : GHC.Types.Int | v == rank x\n                     && v >= 0}"},{"start":{"line":91,"column":30},"stop":{"line":91,"column":31},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":91,"column":35},"stop":{"line":91,"column":42},"ident":"lq_anf$##7205759403792805702","ann":"{v : GHC.Types.Int | v == rank x'\n                     && v >= 0}"},{"start":{"line":91,"column":40},"stop":{"line":91,"column":42},"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":91,"column":48},"stop":{"line":91,"column":67},"ident":"meld","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(FibHeap.FibTree a)] -> (FibHeap.FibTree a) -> {v : [(FibHeap.FibTree a)] | len v > 0\n                                                                                && len v <= len x2 + 1}"},{"start":{"line":91,"column":53},"stop":{"line":91,"column":55},"ident":"xs","ann":"{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":91,"column":56},"stop":{"line":91,"column":67},"ident":"lq_anf$##7205759403792805706","ann":"{v : (FibHeap.FibTree a) | (root v == root x\n                            && root x <= root x')\n                           || (root v == root x'\n                               && root x' <= root x)\n                           && rank v == 1 + rank x}"},{"start":{"line":91,"column":62},"stop":{"line":91,"column":63},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":91,"column":64},"stop":{"line":91,"column":66},"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":92,"column":27},"stop":{"line":92,"column":28},"ident":"x","ann":"{v : (FibHeap.FibTree a) | v == x\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":92,"column":29},"stop":{"line":92,"column":31},"ident":"x'","ann":"{v : (FibHeap.FibTree a) | v == x'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":92,"column":32},"stop":{"line":92,"column":34},"ident":"xs","ann":"{v : [(FibHeap.FibTree a)] | v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":96,"column":1},"stop":{"line":96,"column":11},"ident":"FibHeap.extractMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},{"start":{"line":96,"column":18},"stop":{"line":96,"column":25},"ident":"lq_anf$##7205759403792805624","ann":"{v : [(FibHeap.FibTree a)] | v == []\n                             && len v == 0\n                             && lsize v == 0}"},{"start":{"line":96,"column":19},"stop":{"line":96,"column":20},"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":96,"column":22},"stop":{"line":96,"column":24},"ident":"_","ann":"{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && len v == 0\n                                                  && lsize v == 0} | VV == []}"},{"start":{"line":98,"column":10},"stop":{"line":98,"column":12},"ident":"t'","ann":"(FibHeap.FibTree a)"},{"start":{"line":98,"column":14},"stop":{"line":98,"column":17},"ident":"ts'","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":98,"column":21},"stop":{"line":98,"column":34},"ident":"FibHeap.extractMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{t : [(FibHeap.FibTree a)] | len t > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},{"start":{"line":98,"column":32},"stop":{"line":98,"column":34},"ident":"ds_d318","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":99,"column":12},"stop":{"line":99,"column":18},"ident":"lq_anf$##7205759403792805619","ann":"{VV : a | VV == root t}"},{"start":{"line":99,"column":17},"stop":{"line":99,"column":18},"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":99,"column":21},"stop":{"line":99,"column":28},"ident":"lq_anf$##7205759403792805620","ann":"{VV : a | VV == root t'}"},{"start":{"line":99,"column":26},"stop":{"line":99,"column":28},"ident":"t'","ann":"{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":99,"column":34},"stop":{"line":99,"column":41},"ident":"GHC.Tuple.(,)","ann":"{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"},{"start":{"line":99,"column":35},"stop":{"line":99,"column":36},"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":99,"column":38},"stop":{"line":99,"column":40},"ident":"ds_d318","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":99,"column":47},"stop":{"line":99,"column":58},"ident":"GHC.Tuple.(,)","ann":"{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"},{"start":{"line":99,"column":48},"stop":{"line":99,"column":50},"ident":"t'","ann":"{v : (FibHeap.FibTree a) | v == t'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":99,"column":52},"stop":{"line":99,"column":53},"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":99,"column":54},"stop":{"line":99,"column":57},"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":104,"column":1},"stop":{"line":104,"column":10},"ident":"FibHeap.deleteMin","ann":"forall a .\n(GHC.Classes.Ord<[]> a) =>\n{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> (FibHeap.FibHeap a)"},{"start":{"line":104,"column":38},"stop":{"line":104,"column":39},"ident":"_","ann":"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"},{"start":{"line":105,"column":36},"stop":{"line":105,"column":49},"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},{"start":{"line":105,"column":39},"stop":{"line":105,"column":45},"ident":"minTr'","ann":"{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":105,"column":46},"stop":{"line":105,"column":49},"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":106,"column":6},"stop":{"line":106,"column":12},"ident":"minTr'","ann":"(FibHeap.FibTree a)"},{"start":{"line":106,"column":14},"stop":{"line":106,"column":17},"ident":"ts'","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":106,"column":21},"stop":{"line":106,"column":31},"ident":"lq_anf$##7205759403792805724","ann":"{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},{"start":{"line":106,"column":34},"stop":{"line":106,"column":68},"ident":"lq_anf$##7205759403792805727","ann":"{v : [(FibHeap.FibTree a)] | len v > 0}"},{"start":{"line":106,"column":46},"stop":{"line":106,"column":68},"ident":"lq_anf$##7205759403792805726","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":106,"column":47},"stop":{"line":106,"column":61},"ident":"lq_anf$##7205759403792805725","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":106,"column":56},"stop":{"line":106,"column":61},"ident":"ds_d35A","ann":"{v : (FibHeap.FibTree a) | size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":106,"column":65},"stop":{"line":106,"column":67},"ident":"ds_d35B","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":107,"column":55},"stop":{"line":107,"column":68},"ident":"FibHeap.FH","ann":"{VV : forall a .\n      x1:(FibHeap.FibTree a) -> x2:[(FibHeap.FibTree a)] -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                                                       && not (isEmptyFibHeap v)\n                                                                                       && v == FH x1 x2\n                                                                                       && fibsize v == size x1 + lsize x2\n                                                                                       && minTree v == x1\n                                                                                       && trees v == x2} | VV == FH}"},{"start":{"line":107,"column":58},"stop":{"line":107,"column":64},"ident":"minTr'","ann":"{v : (FibHeap.FibTree a) | v == minTr'\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":107,"column":65},"stop":{"line":107,"column":68},"ident":"ts'","ann":"{v : [(FibHeap.FibTree a)] | v == ts'\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":108,"column":6},"stop":{"line":108,"column":12},"ident":"minTr'","ann":"(FibHeap.FibTree a)"},{"start":{"line":108,"column":14},"stop":{"line":108,"column":17},"ident":"ts'","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":108,"column":21},"stop":{"line":108,"column":31},"ident":"lq_anf$##7205759403792805721","ann":"{v : [(FibHeap.FibTree a)] | len v > 0} -> ((FibHeap.FibTree a), [(FibHeap.FibTree a)])"},{"start":{"line":108,"column":34},"stop":{"line":108,"column":59},"ident":"lq_anf$##7205759403792805723","ann":"{v : [(FibHeap.FibTree a)] | len v > 0}"},{"start":{"line":108,"column":46},"stop":{"line":108,"column":59},"ident":"lq_anf$##7205759403792805722","ann":"[(FibHeap.FibTree a)]"},{"start":{"line":108,"column":47},"stop":{"line":108,"column":52},"ident":"lq_anf$##7205759403792805719","ann":"{v : [(FibHeap.FibTree a)] | v == subtr\n                             && v == : x xs\n                             && head v == x\n                             && len v == 1 + len xs\n                             && lqdc##$select v == x\n                             && lqdc##$select v == xs\n                             && lsize v == size x + lsize xs\n                             && tail v == xs\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":108,"column":56},"stop":{"line":108,"column":58},"ident":"ds_d35B","ann":"{v : [(FibHeap.FibTree a)] | len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":111,"column":1},"stop":{"line":111,"column":9},"ident":"FibHeap.fromList","ann":"forall a . (GHC.Classes.Ord<[]> a) => [a] -> (FibHeap.FibHeap a)"},{"start":{"line":111,"column":10},"stop":{"line":111,"column":12},"ident":"xs","ann":"[a]"},{"start":{"line":111,"column":21},"stop":{"line":111,"column":27},"ident":"lq_anf$##7205759403792805612","ann":"x1:(FibHeap.FibHeap a) -> x2:a -> {v : (FibHeap.FibHeap a) | notEmptyFibHeap v\n                                                             && (root (minTree v) == root (minTree x1)\n                                                                 && root (minTree x1) <= x2)\n                                                                || ((x2 <= root (minTree x1)\n                                                                     || not (notEmptyFibHeap x1))\n                                                                    && root (minTree v) == x2)}"},{"start":{"line":111,"column":28},"stop":{"line":111,"column":29},"ident":"_","ann":"{VV : forall a .\n      {v : (FibHeap.FibHeap a) | isEmptyFibHeap v\n                                 && not (notEmptyFibHeap v)\n                                 && v == E} | VV == E}"},{"start":{"line":111,"column":30},"stop":{"line":111,"column":32},"ident":"xs","ann":"{v : [a] | v == xs\n           && len v >= 0\n           && lsize v >= len v}"},{"start":{"line":118,"column":1},"stop":{"line":118,"column":8},"ident":"FibHeap.fibsize","ann":"forall a .\nx1:{VV : (FibHeap.FibHeap a) | notEmptyFibHeap VV} -> {VV : GHC.Types.Int | VV == fibsize x1\n                                                                            && 0 < VV}"},{"start":{"line":118,"column":25},"stop":{"line":118,"column":35},"ident":"lq_anf$##7205759403792805694","ann":"{v : GHC.Types.Int | v == pow2 (rank minTr)\n                     && v == size minTr\n                     && 0 < v}"},{"start":{"line":118,"column":30},"stop":{"line":118,"column":35},"ident":"minTr","ann":"{v : (FibHeap.FibTree a) | v == minTr\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":118,"column":38},"stop":{"line":118,"column":46},"ident":"lq_anf$##7205759403792805695","ann":"{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"},{"start":{"line":118,"column":44},"stop":{"line":118,"column":46},"ident":"ts","ann":"{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0\n                             && lsize v >= len v}"},{"start":{"line":123,"column":1},"stop":{"line":123,"column":6},"ident":"FibHeap.lsize","ann":"forall a .\nx1:[(FibHeap.FibTree a)] -> {VV : GHC.Types.Int | VV == lsize x1\n                                                  && VV >= len x1}"},{"start":{"line":123,"column":12},"stop":{"line":123,"column":13},"ident":"lq_anf$##7205759403792805689","ann":"{v : GHC.Prim.Int# | v == 0}"},{"start":{"line":124,"column":16},"stop":{"line":124,"column":22},"ident":"lq_anf$##7205759403792805690","ann":"{v : GHC.Types.Int | v == pow2 (rank t)\n                     && v == size t\n                     && 0 < v}"},{"start":{"line":124,"column":21},"stop":{"line":124,"column":22},"ident":"t","ann":"{v : (FibHeap.FibTree a) | v == t\n                           && size v == pow2 (rank v)\n                           && 0 < size v}"},{"start":{"line":124,"column":25},"stop":{"line":124,"column":33},"ident":"lq_anf$##7205759403792805691","ann":"{v : GHC.Types.Int | v == lsize ts\n                     && v >= len ts}"},{"start":{"line":124,"column":31},"stop":{"line":124,"column":33},"ident":"ts","ann":"{v : [(FibHeap.FibTree a)] | v == ts\n                             && len v >= 0}"},{"start":{"line":129,"column":1},"stop":{"line":129,"column":5},"ident":"FibHeap.pow2","ann":"{VV : GHC.Types.Int | VV >= 0} -> {VV : GHC.Types.Int | 0 < VV}"},{"start":{"line":129,"column":10},"stop":{"line":129,"column":11},"ident":"lq_anf$##7205759403792805686","ann":"{v : GHC.Prim.Int# | v == 1}"},{"start":{"line":130,"column":10},"stop":{"line":130,"column":11},"ident":"lq_anf$##7205759403792805681","ann":"GHC.Types.Int"},{"start":{"line":130,"column":14},"stop":{"line":130,"column":24},"ident":"lq_anf$##7205759403792805685","ann":"{VV : GHC.Types.Int | 0 < VV}"},{"start":{"line":130,"column":19},"stop":{"line":130,"column":24},"ident":"lq_anf$##7205759403792805684","ann":"GHC.Types.Int"},{"start":{"line":130,"column":20},"stop":{"line":130,"column":21},"ident":"ds_d2ZD","ann":"{v : GHC.Types.Int | v >= 0}"},{"start":{"line":130,"column":22},"stop":{"line":130,"column":23},"ident":"lq_anf$##7205759403792805683","ann":"GHC.Types.Int"},{"start":{"line":135,"column":1},"stop":{"line":135,"column":5},"ident":"FibHeap.size","ann":"forall a .\nx1:(FibHeap.FibTree a) -> {VV : GHC.Types.Int | VV == pow2 (rank x1)\n                                                && VV == size x1\n                                                && 0 < VV}"},{"start":{"line":135,"column":23},"stop":{"line":135,"column":29},"ident":"FibHeap.pow2","ann":"x1:{v : GHC.Types.Int | v >= 0} -> {v : GHC.Types.Int | v == pow2 x1\n                                                        && v == (if 0 == x1 then 1 else 2 * pow2 (x1 - 1))\n                                                        && 0 < v}"},{"start":{"line":135,"column":28},"stop":{"line":135,"column":29},"ident":"r","ann":"{v : GHC.Types.Int | v == r\n                     && v >= 0}"}]}