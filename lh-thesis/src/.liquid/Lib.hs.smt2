(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Lib.List 1)) ((par (T0) ((Lib.Cons (Lib.Cons$35$$35$lqdc$35$$35$$36$select$35$$35$Lib.Cons$35$$35$1 T0) (Lib.Cons$35$$35$lqdc$35$$35$$36$select$35$$35$Lib.Cons$35$$35$2 (Lib.List T0))) Lib.Nil))))
(declare-datatypes ((Language.Haskell.Liquid.RTick.Tick 1)) ((par (T0) ((Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.tcost Int) (Language.Haskell.Liquid.RTick.tval T0))))))
(declare-datatypes ((GHC.Maybe.Maybe 1)) ((par (T0) (GHC.Maybe.Nothing (GHC.Maybe.Just (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 T0))))))
(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun Language.Haskell.Liquid.RTick.pure () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.step () Int)
(declare-fun Language.Haskell.Liquid.RTick.fmap () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun ys$35$$35$a1wK () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$47$$61$ () Int)
(declare-fun ds_d2wZ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_karg$36$Lib.push$35$$35$k_$35$$35$1025 () Int)
(declare-fun VV$35$$35$F$35$$35$39 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk$35$$35$k_$35$$35$949 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun xs$35$$35$a1wH () Int)
(declare-fun Language.Haskell.Liquid.RTick.ap () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs () Int)
(declare-fun Language.Haskell.Liquid.RTick.geqBind () Int)
(declare-fun VV$35$$35$F$35$$35$27 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun Language.Haskell.Liquid.RTick.goN () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$92$$62$ () Int)
(declare-fun isJust () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq () Int)
(declare-fun Language.Haskell.Liquid.RTick.wmapN () Int)
(declare-fun lq_tmp$36$x$35$$35$959 () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun a$35$$35$a1wJ () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.List.span () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1023 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1025 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1025 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt () Int)
(declare-fun lq_karg$36$Lib.pop$35$$35$k_$35$$35$1168 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun lq_karg$36$ls$35$$35$a1wI$35$$35$k_$35$$35$949 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803353$35$$35$d2xj () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803351$35$$35$d2xh () Int)
(declare-fun GHC.List.last () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$62$$61$ () Int)
(declare-fun Lib.length () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun x$35$$35$a1wM () Int)
(declare-fun lq_tmp$36$x$35$$35$1145 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$905 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf () Int)
(declare-fun lq_karg$36$Lib.push$35$$35$k_$35$$35$1023 () Int)
(declare-fun Language.Haskell.Liquid.RTick.go () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1023 () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun fromJust () Int)
(declare-fun lit$36$main () Str)
(declare-fun lq_tmp$36$x$35$$35$875 () Int)
(declare-fun lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1023 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt$35$$35$k_$35$$35$1143 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$47$$47$$60$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftM () Int)
(declare-fun lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1143 () Int)
(declare-fun lq_tmp$36$x$35$$35$1170 () Int)
(declare-fun Lib.pop () Int)
(declare-fun lq_tmp$36$x$35$$35$1164 () Int)
(declare-fun ds_d2wO () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo$35$$35$k_$35$$35$1025 () Str)
(declare-fun Language.Haskell.Liquid.RTick.wait () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$47$$60$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.wmap () Int)
(declare-fun ls$35$$35$a1wI () Int)
(declare-fun lit$36$$39$Nil () Str)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun papp3 () Int)
(declare-fun lq_tmp$36$x$35$$35$951 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftM2 () Int)
(declare-fun lq_tmp$36$x$35$$35$1301 () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun xs$35$$35$a1wF () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_karg$36$xs$35$$35$a1wN$35$$35$k_$35$$35$1143 () Int)
(declare-fun Language.Haskell.Liquid.RTick.pay () Int)
(declare-fun lq_karg$36$Lib.pop$35$$35$k_$35$$35$1025 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1168 () Int)
(declare-fun Language.Haskell.Liquid.RTick.zipWithM () Int)
(declare-fun Language.Haskell.Liquid.RTick.leqBind () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$Lib.push$35$$35$k_$35$$35$1143 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$47$$62$ () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Lib.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop () Str)
(declare-fun Language.Haskell.Liquid.ProofCombinators.pleUnfold () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1025 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1025 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm () Int)
(declare-fun cast_as () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803352$35$$35$d2xi () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lq_karg$36$a$35$$35$a1wJ$35$$35$k_$35$$35$949 () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$92$$61$ () Int)
(declare-fun GHC.List.head () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$92$$92$$62$ () Int)
(declare-fun cast_as_int () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Str)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$92$$92$$60$ () Int)
(declare-fun ds_d2wJ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$16 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1143 () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$965 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp$35$$35$k_$35$$35$1143 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1143 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_tmp$36$x$35$$35$791 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1143 () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_karg$36$VV$35$$35$948$35$$35$k_$35$$35$949 () Int)
(declare-fun VV$35$$35$F$35$$35$41 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803347$35$$35$d2xd () Int)
(declare-fun lq_tmp$36$x$35$$35$679 () Int)
(declare-fun papp6 () Int)
(declare-fun lit$36$$39$Cons () Str)
(declare-fun GHC.Real.mod () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$92$$92$$61$ () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1023 () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1023 () Int)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun lq_tmp$36$x$35$$35$904 () Int)
(declare-fun prop () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803350$35$$35$d2xg () Int)
(declare-fun Language.Haskell.Liquid.RTick.gmapN () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.waitN () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun isAdmit () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803346$35$$35$d2xc () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$42$$62$ () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun VV$35$$35$F$35$$35$38 () Int)
(declare-fun lq_tmp$36$x$35$$35$1277 () Int)
(declare-fun xs$35$$35$a1wN () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr$35$$35$k_$35$$35$1143 () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Language.Haskell.Liquid.RTick.$61$$60$$60$ () Int)
(declare-fun lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1168 () Int)
(declare-fun lit$36$List () Str)
(declare-fun lq_karg$36$x$35$$35$a1wM$35$$35$k_$35$$35$1143 () Int)
(declare-fun lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1025 () Int)
(declare-fun Lib.push () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun VV$35$$35$F$35$$35$24 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun Language.Haskell.Liquid.RTick.$61$$92$$60$ () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun lq_tmp$36$x$35$$35$1019 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1168 () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_karg$36$VV$35$$35$1167$35$$35$k_$35$$35$1168 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1168 () Int)
(declare-fun lq_tmp$36$x$35$$35$1321 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_tmp$36$x$35$$35$922 () Int)
(declare-fun Language.Haskell.Liquid.RTick.liftA2 () Int)
(declare-fun x$35$$35$a1wG () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun autolen () Int)
(declare-fun Language.Haskell.Liquid.RTick.$60$$47$$47$$62$ () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr () Int)
(declare-fun lq_tmp$36$x$35$$35$929 () Int)
(declare-fun lq_tmp$36$x$35$$35$763 () Int)
(declare-fun lq_karg$36$VV$35$$35$1142$35$$35$k_$35$$35$1143 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lq_karg$36$VV$35$$35$1024$35$$35$k_$35$$35$1025 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lq_karg$36$Lib.push$35$$35$k_$35$$35$1168 () Int)
(declare-fun lq_karg$36$VV$35$$35$1022$35$$35$k_$35$$35$1023 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$1116 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun Language.Haskell.Liquid.RTick.return () Int)
(declare-fun lq_tmp$36$x$35$$35$1139 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun charX () Int)
(declare-fun lq_karg$36$Lib.pop$35$$35$k_$35$$35$1143 () Int)
(declare-fun lq_tmp$36$x$35$$35$945 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun head () Int)
(declare-fun Language.Haskell.Liquid.RTick.gmap () Int)
(declare-fun lq_karg$36$Lib.pop$35$$35$k_$35$$35$1023 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun Language.Haskell.Liquid.RTick.eqBind () Int)
(declare-fun Language.Haskell.Liquid.RTick.$62$$47$$47$$61$ () Int)
(declare-fun lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1023 () Int)
(declare-fun lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1143 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1143 () Int)
(declare-fun ds_d2wu () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803348$35$$35$d2xe () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo$35$$35$k_$35$$35$1023 () Str)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun x$35$$35$a1wE () Int)
(declare-fun lq_tmp$36$x$35$$35$964 () Int)
(declare-fun Lib.pot () Int)
(declare-fun lit$36$Lib () Str)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1168 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$1294 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1025 () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq$35$$35$k_$35$$35$1143 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs$35$$35$k_$35$$35$1143 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803345$35$$35$d2xb () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu$35$$35$k_$35$$35$1143 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$25 (Int (GHC.Maybe.Maybe Int)) Bool)
(declare-fun apply$35$$35$28 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$29 (Int (GHC.Maybe.Maybe Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$4 (Int Int) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$27 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$26 (Int (GHC.Maybe.Maybe Int)) Str)
(declare-fun apply$35$$35$31 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Bool)
(declare-fun apply$35$$35$11 (Int Bool) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$35 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$5 (Int Int) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$16 (Int Str) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$32 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Str)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$33 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$10 (Int Bool) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$24 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun apply$35$$35$17 (Int Str) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun apply$35$$35$34 (Int (Language.Haskell.Liquid.RTick.Tick Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$30 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$25 ((GHC.Maybe.Maybe Int)) Bool)
(declare-fun coerce$35$$35$28 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$29 ((GHC.Maybe.Maybe Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$4 (Int) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$27 ((GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$26 ((GHC.Maybe.Maybe Int)) Str)
(declare-fun coerce$35$$35$31 ((Language.Haskell.Liquid.RTick.Tick Int)) Bool)
(declare-fun coerce$35$$35$11 (Bool) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$35 ((Language.Haskell.Liquid.RTick.Tick Int)) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$5 (Int) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$16 (Str) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$32 ((Language.Haskell.Liquid.RTick.Tick Int)) Str)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$33 ((Language.Haskell.Liquid.RTick.Tick Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$10 (Bool) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$24 ((GHC.Maybe.Maybe Int)) Int)
(declare-fun coerce$35$$35$17 (Str) (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun coerce$35$$35$34 ((Language.Haskell.Liquid.RTick.Tick Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$30 ((Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$25 ((GHC.Maybe.Maybe Int) Bool) Int)
(declare-fun smt_lambda$35$$35$28 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$29 ((GHC.Maybe.Maybe Int) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$27 ((GHC.Maybe.Maybe Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$26 ((GHC.Maybe.Maybe Int) Str) Int)
(declare-fun smt_lambda$35$$35$31 ((Language.Haskell.Liquid.RTick.Tick Int) Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$35 ((Language.Haskell.Liquid.RTick.Tick Int) (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$5 (Int (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$16 (Str (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$32 ((Language.Haskell.Liquid.RTick.Tick Int) Str) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$33 ((Language.Haskell.Liquid.RTick.Tick Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$24 ((GHC.Maybe.Maybe Int) Int) Int)
(declare-fun smt_lambda$35$$35$17 (Str (Language.Haskell.Liquid.RTick.Tick Int)) Int)
(declare-fun smt_lambda$35$$35$34 ((Language.Haskell.Liquid.RTick.Tick Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$30 ((Language.Haskell.Liquid.RTick.Tick Int) Int) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$1$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (Language.Haskell.Liquid.RTick.Tick Int))


(assert (distinct lit$36$Lib lit$36$List lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$$39$Cons lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Lib.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop lit$36$$39$Nil lit$36$main))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$$39$Nil) 4))
(assert (= (strLen lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Lib.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop) 112))
(assert (= (strLen lit$36$$39$Cons) 5))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$List) 4))
(assert (= (strLen lit$36$Lib) 3))
(push 1)
(define-fun b$36$$35$$35$96 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$160 () Bool (= lq_anf$36$$35$$35$7205759403792803345$35$$35$d2xb 0))
(define-fun b$36$$35$$35$192 () Bool (and (= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl ds_d2wJ) (= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl ds_d2wu) (= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl ds_d2wJ) (>= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl 0)))
(define-fun b$36$$35$$35$288 () Bool (and (= VV$35$$35$F$35$$35$23 lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt) (= VV$35$$35$F$35$$35$23 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$45$ Int) ds_d2wu) lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs)) (= VV$35$$35$F$35$$35$23 (- ds_d2wu lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs))))
(define-fun b$36$$35$$35$161 () Bool (and (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa ds_d2wZ) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0)))
(define-fun b$36$$35$$35$193 () Bool (= lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm ds_d2wJ))
(define-fun b$36$$35$$35$194 () Bool (and (= lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm ds_d2wJ) (not (= lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm 0))))
(define-fun b$36$$35$$35$163 () Bool (and (= (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wF) (apply$35$$35$0 (as len Int) xs$35$$35$a1wF)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1wF) 0)))
(define-fun b$36$$35$$35$195 () Bool (and (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn))))
(define-fun b$36$$35$$35$291 () Bool (and (= VV$35$$35$F$35$$35$26 lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Lib.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop) (= VV$35$$35$F$35$$35$26 lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo)))
(define-fun b$36$$35$$35$164 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa ds_d2wZ) (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1wE) xs$35$$35$a1wF)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (+ 1 (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wF))) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (+ 1 (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wF))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) x$35$$35$a1wE) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1wF))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) x$35$$35$a1wE) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) xs$35$$35$a1wF) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) xs$35$$35$a1wF) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0)))
(define-fun b$36$$35$$35$196 () Bool (and (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn))))
(define-fun b$36$$35$$35$292 () Bool (and (= 1 (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$27)) (= lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$27)) (= VV$35$$35$F$35$$35$27 (apply$35$$35$5 (as Language.Haskell.Liquid.RTick.wait Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk)) (= VV$35$$35$F$35$$35$27 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) 1 lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk))))
(define-fun b$36$$35$$35$165 () Bool (= lq_anf$36$$35$$35$7205759403792803346$35$$35$d2xc 1))
(define-fun b$36$$35$$35$197 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn))))
(define-fun b$36$$35$$35$166 () Bool (and (= lq_anf$36$$35$$35$7205759403792803347$35$$35$d2xd (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803346$35$$35$d2xc)) (= lq_anf$36$$35$$35$7205759403792803347$35$$35$d2xd lq_anf$36$$35$$35$7205759403792803346$35$$35$d2xc)))
(define-fun b$36$$35$$35$198 () Bool (= lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo lit$36$$47$home$47$jamie$47$Documents$47$Master$47$MasterThesis$47$master$45$thesis$45$project$47$lh$45$thesis$47$src$47$Lib.hs$58$$40$34$44$1$41$$45$$40$35$44$42$41$$124$function$32$pop))
(define-fun b$36$$35$$35$294 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) VV$35$$35$F$35$$35$29) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) VV$35$$35$F$35$$35$29)) (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (= VV$35$$35$F$35$$35$29 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1wJ) ls$35$$35$a1wI)) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as Lib.length Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as Lib.pot Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as head Int) VV$35$$35$F$35$$35$29) a$35$$35$a1wJ) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) VV$35$$35$F$35$$35$29) a$35$$35$a1wJ) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1wI) (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1wI) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0)))
(define-fun b$36$$35$$35$39 () Bool (apply$35$$35$1 isAdmit Language.Haskell.Liquid.ProofCombinators.Admit))
(define-fun b$36$$35$$35$167 () Bool (and (= lq_anf$36$$35$$35$7205759403792803348$35$$35$d2xe (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wF)) (= lq_anf$36$$35$$35$7205759403792803348$35$$35$d2xe (apply$35$$35$0 (as len Int) xs$35$$35$a1wF))))
(define-fun b$36$$35$$35$199 () Bool (and (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn))))
(define-fun b$36$$35$$35$169 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) ds_d2wO) (apply$35$$35$0 (as len Int) ds_d2wO)) (>= (apply$35$$35$0 (as len Int) ds_d2wO) 0)))
(define-fun b$36$$35$$35$201 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wN) (apply$35$$35$0 (as len Int) xs$35$$35$a1wN)) (= (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wN) (apply$35$$35$0 (as len Int) xs$35$$35$a1wN)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1wN) 0)))
(define-fun b$36$$35$$35$170 () Bool (and (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf ds_d2wO) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0)))
(define-fun b$36$$35$$35$202 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn ys$35$$35$a1wK) (= lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1wM) xs$35$$35$a1wN)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (+ 1 (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wN))) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (+ 1 (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wN))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) x$35$$35$a1wM) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1wN))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) x$35$$35$a1wM) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) xs$35$$35$a1wN) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) xs$35$$35$a1wN) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn))))
(define-fun b$36$$35$$35$171 () Bool (and (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf ds_d2wO) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0)))
(define-fun b$36$$35$$35$203 () Bool (= lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp 1))
(define-fun b$36$$35$$35$172 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf ds_d2wO) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0)))
(define-fun b$36$$35$$35$204 () Bool (and (= lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp)) (= lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp)))
(define-fun b$36$$35$$35$173 () Bool (= lq_anf$36$$35$$35$7205759403792803350$35$$35$d2xg 0))
(define-fun b$36$$35$$35$205 () Bool (= lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr 1))
(define-fun b$36$$35$$35$174 () Bool (and (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf ds_d2wO) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0)))
(define-fun b$36$$35$$35$206 () Bool (and (= lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr)) (= lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr)))
(define-fun b$36$$35$$35$207 () Bool (and (= lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$45$ Int) ds_d2wu) lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs)) (= lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt (- ds_d2wu lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs))))
(define-fun b$36$$35$$35$176 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wH) (apply$35$$35$0 (as len Int) xs$35$$35$a1wH)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$a1wH) 0)))
(define-fun b$36$$35$$35$208 () Bool (and (= lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu (apply$35$$35$5 (apply$35$$35$0 (as Lib.pop Int) lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt) xs$35$$35$a1wN)) (>= (+ (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wN) 2) (+ (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu) (apply$35$$35$0 (as Lib.pot Int) (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu))))))
(define-fun b$36$$35$$35$177 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf ds_d2wO) (= lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) x$35$$35$a1wG) xs$35$$35$a1wH)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (+ 1 (apply$35$$35$0 (as Lib.length Int) xs$35$$35$a1wH))) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (+ 1 (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wH))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) x$35$$35$a1wG) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) (+ 1 (apply$35$$35$0 (as len Int) xs$35$$35$a1wH))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) x$35$$35$a1wG) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) xs$35$$35$a1wH) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) xs$35$$35$a1wH) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803349$35$$35$d2xf) 0)))
(define-fun b$36$$35$$35$209 () Bool (and (= lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm 0) (= lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm ds_d2wJ)))
(define-fun b$36$$35$$35$178 () Bool (= lq_anf$36$$35$$35$7205759403792803351$35$$35$d2xh 1))
(define-fun b$36$$35$$35$179 () Bool (and (= lq_anf$36$$35$$35$7205759403792803352$35$$35$d2xi (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803351$35$$35$d2xh)) (= lq_anf$36$$35$$35$7205759403792803352$35$$35$d2xi lq_anf$36$$35$$35$7205759403792803351$35$$35$d2xh)))
(define-fun b$36$$35$$35$180 () Bool (and (= lq_anf$36$$35$$35$7205759403792803353$35$$35$d2xj (apply$35$$35$0 (as Lib.pot Int) xs$35$$35$a1wH)) (= lq_anf$36$$35$$35$7205759403792803353$35$$35$d2xj (apply$35$$35$0 (as len Int) xs$35$$35$a1wH))))
(define-fun b$36$$35$$35$181 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) ls$35$$35$a1wI) (apply$35$$35$0 (as len Int) ls$35$$35$a1wI)) (= (apply$35$$35$0 (as Lib.pot Int) ls$35$$35$a1wI) (apply$35$$35$0 (as len Int) ls$35$$35$a1wI)) (>= (apply$35$$35$0 (as len Int) ls$35$$35$a1wI) 0)))
(define-fun b$36$$35$$35$277 () Bool (and (= VV$35$$35$F$35$$35$36 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$43$ Int) lq_anf$36$$35$$35$7205759403792803352$35$$35$d2xi) lq_anf$36$$35$$35$7205759403792803353$35$$35$d2xj)) (= VV$35$$35$F$35$$35$36 (+ lq_anf$36$$35$$35$7205759403792803352$35$$35$d2xi lq_anf$36$$35$$35$7205759403792803353$35$$35$d2xj))))
(define-fun b$36$$35$$35$278 () Bool (and (= VV$35$$35$F$35$$35$38 (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803350$35$$35$d2xg)) (= VV$35$$35$F$35$$35$38 lq_anf$36$$35$$35$7205759403792803350$35$$35$d2xg)))
(define-fun b$36$$35$$35$279 () Bool (and (= VV$35$$35$F$35$$35$39 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$43$ Int) lq_anf$36$$35$$35$7205759403792803347$35$$35$d2xd) lq_anf$36$$35$$35$7205759403792803348$35$$35$d2xe)) (= VV$35$$35$F$35$$35$39 (+ lq_anf$36$$35$$35$7205759403792803347$35$$35$d2xd lq_anf$36$$35$$35$7205759403792803348$35$$35$d2xe))))
(define-fun b$36$$35$$35$184 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk)) (= lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1wJ) ls$35$$35$a1wI)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk)) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (+ 1 (apply$35$$35$0 (as Lib.length Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk)) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (+ 1 (apply$35$$35$0 (as Lib.pot Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as head Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) a$35$$35$a1wJ) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) a$35$$35$a1wJ) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) ls$35$$35$a1wI) (= (apply$35$$35$0 (as tail Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) ls$35$$35$a1wI) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) 0)))
(define-fun b$36$$35$$35$280 () Bool (and (= VV$35$$35$F$35$$35$41 (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792803345$35$$35$d2xb)) (= VV$35$$35$F$35$$35$41 lq_anf$36$$35$$35$7205759403792803345$35$$35$d2xb)))
(define-fun b$36$$35$$35$281 () Bool (and (= 0 (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$11)) (= VV$35$$35$F$35$$35$11 (apply$35$$35$5 (as Language.Haskell.Liquid.RTick.return Int) ys$35$$35$a1wK)) (= VV$35$$35$F$35$$35$11 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) 0 ys$35$$35$a1wK)) (= ys$35$$35$a1wK (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$11))))
(define-fun b$36$$35$$35$91 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$187 () Bool (>= ds_d2wu 0))
(define-fun b$36$$35$$35$283 () Bool (and (= VV$35$$35$F$35$$35$13 ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13))))
(define-fun b$36$$35$$35$156 () Bool (and (= (apply$35$$35$0 (as Lib.pot Int) ds_d2wZ) (apply$35$$35$0 (as len Int) ds_d2wZ)) (>= (apply$35$$35$0 (as len Int) ds_d2wZ) 0)))
(define-fun b$36$$35$$35$188 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) ys$35$$35$a1wK) (apply$35$$35$0 (as len Int) ys$35$$35$a1wK)) (= (apply$35$$35$0 (as Lib.pot Int) ys$35$$35$a1wK) (apply$35$$35$0 (as len Int) ys$35$$35$a1wK)) (>= (apply$35$$35$0 (as len Int) ys$35$$35$a1wK) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) ys$35$$35$a1wK))))
(define-fun b$36$$35$$35$284 () Bool (and (= VV$35$$35$F$35$$35$16 ((as Language.Haskell.Liquid.RTick.Tick (Language.Haskell.Liquid.RTick.Tick Int)) (+ lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu)) (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu))) (= VV$35$$35$F$35$$35$16 (apply$35$$35$35 (apply$35$$35$0 (as Language.Haskell.Liquid.RTick.step Int) lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq) lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu)) (= (Language.Haskell.Liquid.RTick.tval lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$16)) (= (+ lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq (Language.Haskell.Liquid.RTick.tcost lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu)) (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$16))))
(define-fun b$36$$35$$35$157 () Bool (and (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa ds_d2wZ) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0)))
(define-fun b$36$$35$$35$189 () Bool (and (= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl ds_d2wu) (>= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl 0)))
(define-fun b$36$$35$$35$158 () Bool (and (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa ds_d2wZ) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0)))
(define-fun b$36$$35$$35$190 () Bool (and (= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl ds_d2wu) (>= lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl 0)))
(define-fun b$36$$35$$35$286 () Bool (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) (- (apply$35$$35$0 (as len Int) xs$35$$35$a1wN) lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) 0)))
(define-fun b$36$$35$$35$159 () Bool (and (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (not (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa (as GHC.Types.$91$$93$ Int)) (= lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa ds_d2wZ) (= (apply$35$$35$0 (as Lib.length Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0) (= (apply$35$$35$0 (as Lib.pot Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa)) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792803344$35$$35$d2xa) 0)))
(define-fun b$36$$35$$35$287 () Bool (and (= VV$35$$35$F$35$$35$21 xs$35$$35$a1wN) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$21) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$21) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21) 0)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$39 b$36$$35$$35$169 b$36$$35$$35$170 b$36$$35$$35$174 b$36$$35$$35$176 b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$179 b$36$$35$$35$180 b$36$$35$$35$277 b$36$$35$$35$91))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$36 (apply$35$$35$0 (as len Int) ds_d2wO))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$39 b$36$$35$$35$169 b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$172 b$36$$35$$35$173 b$36$$35$$35$278 b$36$$35$$35$91))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$38 (apply$35$$35$0 (as len Int) ds_d2wO))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$161 b$36$$35$$35$163 b$36$$35$$35$164 b$36$$35$$35$165 b$36$$35$$35$166 b$36$$35$$35$39 b$36$$35$$35$167 b$36$$35$$35$279 b$36$$35$$35$91 b$36$$35$$35$156 b$36$$35$$35$157))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$39 (apply$35$$35$0 (as len Int) ds_d2wZ))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$160 b$36$$35$$35$39 b$36$$35$$35$280 b$36$$35$$35$91 b$36$$35$$35$156 b$36$$35$$35$157 b$36$$35$$35$158 b$36$$35$$35$159))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$41 (apply$35$$35$0 (as len Int) ds_d2wZ))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$39 b$36$$35$$35$209 b$36$$35$$35$281 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as Lib.pot Int) ys$35$$35$a1wK) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$11) (apply$35$$35$0 (as Lib.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$11))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$Lib.pop$35$$35$k_$35$$35$1168 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1168 Int) (lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1168 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1168 Int) (lq_karg$36$VV$35$$35$1167$35$$35$k_$35$$35$1168 Int) (lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1168 Int) (lq_karg$36$Lib.push$35$$35$k_$35$$35$1168 Int) (lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1168 Int)) (and (= lq_karg$36$Lib.pop$35$$35$k_$35$$35$1168 Lib.pop) (= lq_karg$36$Lib.push$35$$35$k_$35$$35$1168 Lib.push) (= lq_karg$36$VV$35$$35$1167$35$$35$k_$35$$35$1168 VV$35$$35$F$35$$35$12) (= lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1168 ds_d2wJ) (= lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1168 ds_d2wu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1168 lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1168 lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm) (= lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1168 ys$35$$35$a1wK) (exists ((VV$35$$35$F$35$$35$13 Int)) (and (= VV$35$$35$F$35$$35$13 ys$35$$35$a1wK) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$13) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13) 0) (<= ds_d2wu (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$13)) (= lq_karg$36$Lib.pop$35$$35$k_$35$$35$1168 Lib.pop) (= lq_karg$36$Lib.push$35$$35$k_$35$$35$1168 Lib.push) (= lq_karg$36$VV$35$$35$1167$35$$35$k_$35$$35$1168 VV$35$$35$F$35$$35$13) (= lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1168 ds_d2wJ) (= lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1168 ds_d2wu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1168 lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1168 lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm) (= lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1168 ys$35$$35$a1wK))))) b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$39 b$36$$35$$35$209 (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$12) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$12) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) 0)) b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$12) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1wK) ds_d2wu))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$39 b$36$$35$$35$199 b$36$$35$$35$201 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$284 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as Lib.pot Int) ys$35$$35$a1wK) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$16) (apply$35$$35$0 (as Lib.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$16))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt$35$$35$k_$35$$35$1143 Int) (lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1143 Int) (lq_karg$36$xs$35$$35$a1wN$35$$35$k_$35$$35$1143 Int) (lq_karg$36$Lib.push$35$$35$k_$35$$35$1143 Int) (lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr$35$$35$k_$35$$35$1143 Int) (lq_karg$36$x$35$$35$a1wM$35$$35$k_$35$$35$1143 Int) (lq_karg$36$VV$35$$35$1142$35$$35$k_$35$$35$1143 Int) (lq_karg$36$Lib.pop$35$$35$k_$35$$35$1143 Int) (lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs$35$$35$k_$35$$35$1143 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu$35$$35$k_$35$$35$1143 (Language.Haskell.Liquid.RTick.Tick Int))) (and (= lq_karg$36$Lib.pop$35$$35$k_$35$$35$1143 Lib.pop) (= lq_karg$36$Lib.push$35$$35$k_$35$$35$1143 Lib.push) (= lq_karg$36$VV$35$$35$1142$35$$35$k_$35$$35$1143 VV$35$$35$F$35$$35$17) (= lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1143 ds_d2wJ) (= lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1143 ds_d2wu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu) (= lq_karg$36$x$35$$35$a1wM$35$$35$k_$35$$35$1143 x$35$$35$a1wM) (= lq_karg$36$xs$35$$35$a1wN$35$$35$k_$35$$35$1143 xs$35$$35$a1wN) (= lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1143 ys$35$$35$a1wK) (exists ((VV$35$$35$F$35$$35$18 Int)) (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$18) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18)) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) (- (apply$35$$35$0 (as len Int) xs$35$$35$a1wN) lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$18) 0) (= lq_karg$36$Lib.pop$35$$35$k_$35$$35$1143 Lib.pop) (= lq_karg$36$Lib.push$35$$35$k_$35$$35$1143 Lib.push) (= lq_karg$36$VV$35$$35$1142$35$$35$k_$35$$35$1143 VV$35$$35$F$35$$35$18) (= lq_karg$36$ds_d2wJ$35$$35$k_$35$$35$1143 ds_d2wJ) (= lq_karg$36$ds_d2wu$35$$35$k_$35$$35$1143 ds_d2wu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803355$35$$35$d2xl) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803356$35$$35$d2xm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803357$35$$35$d2xn) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803359$35$$35$d2xp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803360$35$$35$d2xq) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803361$35$$35$d2xr) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803362$35$$35$d2xs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu$35$$35$k_$35$$35$1143 lq_anf$36$$35$$35$7205759403792803364$35$$35$d2xu) (= lq_karg$36$x$35$$35$a1wM$35$$35$k_$35$$35$1143 x$35$$35$a1wM) (= lq_karg$36$xs$35$$35$a1wN$35$$35$k_$35$$35$1143 xs$35$$35$a1wN) (= lq_karg$36$ys$35$$35$a1wK$35$$35$k_$35$$35$1143 ys$35$$35$a1wK))))) b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$39 b$36$$35$$35$199 b$36$$35$$35$201 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$208 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$17) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$17) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17) 0)) b$36$$35$$35$190))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$17) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1wK) ds_d2wu))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$39 b$36$$35$$35$199 b$36$$35$$35$201 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190 b$36$$35$$35$287))
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792803363$35$$35$d2xt (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$21))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$288 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$39 b$36$$35$$35$199 b$36$$35$$35$201 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$207 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$23 0)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 (= VV$35$$35$F$35$$35$24 (apply$35$$35$17 (as Control.Exception.Base.patError Int) lq_anf$36$$35$$35$7205759403792803358$35$$35$d2xo)) b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$39 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as Lib.pot Int) ys$35$$35$a1wK) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$24) (apply$35$$35$0 (as Lib.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$24))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$194 (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$25) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$25) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) 0)) b$36$$35$$35$195 b$36$$35$$35$196 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$39 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$25) (- (apply$35$$35$0 (as len Int) ys$35$$35$a1wK) ds_d2wu))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$192 b$36$$35$$35$193 b$36$$35$$35$194 b$36$$35$$35$195 b$36$$35$$35$291 b$36$$35$$35$196 b$36$$35$$35$197 b$36$$35$$35$198 b$36$$35$$35$39 b$36$$35$$35$91 b$36$$35$$35$187 b$36$$35$$35$188 b$36$$35$$35$189 b$36$$35$$35$190))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$292 b$36$$35$$35$39 b$36$$35$$35$181 b$36$$35$$35$184 b$36$$35$$35$91))
(push 1)
(assert (not (>= (+ (apply$35$$35$0 (as Lib.pot Int) ls$35$$35$a1wI) 2) (+ (Language.Haskell.Liquid.RTick.tcost VV$35$$35$F$35$$35$27) (apply$35$$35$0 (as Lib.pot Int) (Language.Haskell.Liquid.RTick.tval VV$35$$35$F$35$$35$27))))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk$35$$35$k_$35$$35$949 Int) (lq_karg$36$ls$35$$35$a1wI$35$$35$k_$35$$35$949 Int) (lq_karg$36$a$35$$35$a1wJ$35$$35$k_$35$$35$949 Int) (lq_karg$36$VV$35$$35$948$35$$35$k_$35$$35$949 Int)) (and (= lq_karg$36$VV$35$$35$948$35$$35$k_$35$$35$949 VV$35$$35$F$35$$35$28) (= lq_karg$36$a$35$$35$a1wJ$35$$35$k_$35$$35$949 a$35$$35$a1wJ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk$35$$35$k_$35$$35$949 lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (= lq_karg$36$ls$35$$35$a1wI$35$$35$k_$35$$35$949 ls$35$$35$a1wI) (exists ((VV$35$$35$F$35$$35$29 Int)) (and (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) VV$35$$35$F$35$$35$29) (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) VV$35$$35$F$35$$35$29)) (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (= VV$35$$35$F$35$$35$29 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) a$35$$35$a1wJ) ls$35$$35$a1wI)) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as Lib.length Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$29) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as Lib.pot Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as head Int) VV$35$$35$F$35$$35$29) a$35$$35$a1wJ) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1wI))) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) VV$35$$35$F$35$$35$29) a$35$$35$a1wJ) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1wI) (= (apply$35$$35$0 (as tail Int) VV$35$$35$F$35$$35$29) ls$35$$35$a1wI) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0) (= lq_karg$36$VV$35$$35$948$35$$35$k_$35$$35$949 VV$35$$35$F$35$$35$29) (= lq_karg$36$a$35$$35$a1wJ$35$$35$k_$35$$35$949 a$35$$35$a1wJ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk$35$$35$k_$35$$35$949 lq_anf$36$$35$$35$7205759403792803354$35$$35$d2xk) (= lq_karg$36$ls$35$$35$a1wI$35$$35$k_$35$$35$949 ls$35$$35$a1wI))))) b$36$$35$$35$96 (and (= (apply$35$$35$0 (as Lib.length Int) VV$35$$35$F$35$$35$28) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28)) (= (apply$35$$35$0 (as Lib.pot Int) VV$35$$35$F$35$$35$28) (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28) 0)) b$36$$35$$35$39 b$36$$35$$35$181 b$36$$35$$35$184 b$36$$35$$35$91))
(push 1)
(assert (not (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$28) (+ 1 (apply$35$$35$0 (as len Int) ls$35$$35$a1wI)))))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
