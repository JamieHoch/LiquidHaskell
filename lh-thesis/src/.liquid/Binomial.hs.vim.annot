1:1-1:1::Binomial.$trModule :: "GHC.Types.Module"
15:1-15:7::Binomial.assert :: "forall a .\n{VV : GHC.Types.Bool | VV} -> x2:a -> {VV : a | VV == x2}"
15:10-15:11::a :: "a"
26:1-26:9::Binomial.treeRank :: "forall a .\nx1:(Binomial.Tree a) -> {VV : GHC.Types.Int | VV == rank x1\n                                              && VV == treeRank x1\n                                              && VV >= 0}"
26:27-26:28::r :: "{v : GHC.Types.Int | v == r\n                     && v >= 0}"
31:1-31:13::Binomial.treeListSize :: "forall a .\nx1:[(Binomial.Tree a)] -> {VV : GHC.Types.Int | (VV == 0 <=> len x1 == 0)\n                                                && VV == treeListSize x1\n                                                && VV >= 0\n                                                && len x1 <= VV}"
31:19-31:20::lq_anf$##7205759403792867204 :: "{v : GHC.Prim.Int# | v == 0}"
32:23-32:33::lq_anf$##7205759403792867205 :: "{v : GHC.Types.Int | v == treeSize x\n                     && v == 1 + treeListSize (subtrees x)\n                     && v >= 1}"
32:32-32:33::x :: "{v : (Binomial.Tree a) | v == x\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
32:36-32:51::lq_anf$##7205759403792867206 :: "{v : GHC.Types.Int | (v == 0 <=> len xs == 0)\n                     && v == treeListSize xs\n                     && v >= 0\n                     && len xs <= v}"
32:49-32:51::xs :: "{v : [(Binomial.Tree a)] | v == xs\n                           && len v >= 0}"
54:1-54:9::Binomial.treeElts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Tree a) -> {VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == treeElts x2\n                                                                        && VV == Map_store (treeListElts (subtrees x2)) (root x2) (1 + Map_select (treeListElts (subtrees x2)) (root x2))}"
54:28-54:47::lq_anf$##7205759403792867225 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == Map_default 0}"
54:36-54:37::x :: "{VV : a | VV == x}"
54:38-54:47::_ :: "{VV : forall a .\n      {v : (Data.Map.Internal.Map a GHC.Types.Int) | v == Map_default 0} | VV == empty}"
56:9-56:10::t :: "(Binomial.Tree a)"
56:13-56:32::_ :: "(Binomial.Tree a)"
56:29-56:32::ds_dj4K :: "{v : [(Binomial.Tree {VV : a | x <= VV})]<\\x5 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                         && len v >= 0\n                                                                                                         && treeListSize v >= 0\n                                                                                                         && len v <= treeListSize v}"
57:5-57:33::lq_anf$##7205759403792867231 :: "x1:(Data.Map.Internal.Map a GHC.Types.Int) -> {v : (Data.Map.Internal.Map a GHC.Types.Int) | v == x1}"
57:12-57:33::lq_anf$##7205759403792867230 :: "GHC.Types.Bool"
57:13-57:23::lq_anf$##7205759403792867226 :: "{v : GHC.Types.Int | v == rank t\n                     && v == treeRank t\n                     && v >= 0}"
57:22-57:23::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
57:27-57:28::ds_dj4J :: "{v : GHC.Types.Int | v >= 0}"
57:31-57:32::lq_anf$##7205759403792867228 :: "GHC.Types.Int"
58:9-58:17::residual :: "{v : (Binomial.Tree a) | lqdc##$select v == ts\n                         && lqdc##$select v == x\n                         && root v == x\n                         && subtrees v == ts}"
58:20-58:57::_ :: "{v : (Binomial.Tree a) | lqdc##$select v == ts\n                         && lqdc##$select v == x\n                         && root v == x\n                         && subtrees v == ts}"
58:25-58:26::x :: "{VV : a | VV == x}"
58:27-58:34::lq_anf$##7205759403792867234 :: "GHC.Types.Int"
58:28-58:29::ds_dj4J :: "{v : GHC.Types.Int | v >= 0}"
58:32-58:33::lq_anf$##7205759403792867233 :: "GHC.Types.Int"
58:35-58:37::ts :: "{v : [(Binomial.Tree {VV : a | x <= VV})]<\\x5 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                         && v == ts\n                                                                                                         && len v >= 0\n                                                                                                         && treeListSize v >= 0\n                                                                                                         && len v <= treeListSize v}"
58:38-58:57::lq_anf$##7205759403792867236 :: "GHC.Types.Int"
58:39-58:41::ds_dj4L :: "{v : GHC.Types.Int | v >= 1}"
58:44-58:56::lq_anf$##7205759403792867235 :: "{v : GHC.Types.Int | v == treeSize t\n                     && v == 1 + treeListSize (subtrees t)\n                     && v >= 1}"
58:54-58:55::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
59:15-59:27::lq_anf$##7205759403792867237 :: "{VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == treeElts t\n                                                && VV == Map_store (treeListElts (subtrees t)) (root t) (1 + Map_select (treeListElts (subtrees t)) (root t))}"
59:25-59:26::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
59:28-59:47::lq_anf$##7205759403792867238 :: "{VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == treeElts residual\n                                                && VV == Map_store (treeListElts (subtrees residual)) (root residual) (1 + Map_select (treeListElts (subtrees residual)) (root residual))}"
59:38-59:46::residual :: "{v : (Binomial.Tree a) | v == residual\n                         && lqdc##$select v == ts\n                         && lqdc##$select v == x\n                         && root v == x\n                         && subtrees v == ts\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
63:1-63:13::Binomial.treeListElts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Binomial.Tree a)] -> {VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == treeListElts x2}"
63:19-63:28::_ :: "{VV : forall a .\n      {v : (Data.Map.Internal.Map a GHC.Types.Int) | v == Map_default 0} | VV == empty}"
64:23-64:63::$dOrd_aiWX :: "{v : (GHC.Classes.Ord a) | v == $dOrd_aiWX}"
64:33-64:45::lq_anf$##7205759403792867241 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == treeElts t\n                                               && v == Map_store (treeListElts (subtrees t)) (root t) (1 + Map_select (treeListElts (subtrees t)) (root t))}"
64:43-64:44::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
64:46-64:63::lq_anf$##7205759403792867242 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == treeListElts ts}"
64:60-64:62::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
78:1-78:20::Binomial.rankOfTailDecreases :: "forall a .\nx1:{ts : [{t : (Binomial.Tree a) | len ts > treeRank t}]<\\x2 VV -> {VV : (Binomial.Tree a) | treeRank x2 > treeRank VV}> | len ts > 0} -> {v : [{t : (Binomial.Tree a) | len x1 - 1 > treeRank t}]<\\x2 VV -> {VV : (Binomial.Tree a) | treeRank x2 > treeRank VV}> | v == tail x1}"
78:30-78:32::ts :: "{v : [(Binomial.Tree a)]<\\x5 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                        && v == ts\n                                                                                        && len v >= 0\n                                                                                        && treeListSize v >= 0\n                                                                                        && len v <= treeListSize v}"
83:1-83:16::Binomial.rankOfFirstTree :: "forall a .\nx1:{ts : [{t : (Binomial.Tree a) | len ts > treeRank t}]<\\x1 VV -> {VV : (Binomial.Tree a) | treeRank x1 > treeRank VV}> | len ts >= 1} -> {v : (Binomial.Tree a) | v == head x1\n                                                                                                                                                                    && treeRank v == len x1 - 1}"
83:23-83:24::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
84:30-84:70::lq_anf$##7205759403792867217 :: "(Binomial.Tree a)"
84:46-84:70::lq_anf$##7205759403792867216 :: "[(Binomial.Tree a)]<\\x4 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}>"
84:67-84:69::ds_dj30 :: "{v : [{v : (Binomial.Tree a) | len v > treeRank v}]<\\x6 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                                   && len v >= 0\n                                                                                                                   && len v >= 1\n                                                                                                                   && treeListSize v >= 0\n                                                                                                                   && len v <= treeListSize v}"
84:77-84:78::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
94:1-94:5::Binomial.elts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Heap a) -> {VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == elts x2\n                                                                        && VV == treeListElts (unheap x2)}"
94:18-94:33::Binomial.treeListElts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Binomial.Tree a)] -> {VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == treeListElts x2}"
94:31-94:33::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
99:1-99:9::Binomial.listElts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : (Data.Map.Internal.Map a GHC.Types.Int) | VV == listElts x2}"
99:15-99:24::_ :: "{VV : forall a .\n      {v : (Data.Map.Internal.Map a GHC.Types.Int) | v == Map_default 0} | VV == empty}"
100:21-100:66::$dOrd_aiVe :: "{v : (GHC.Classes.Ord a) | v == $dOrd_aiVe}"
100:31-100:52::lq_anf$##7205759403792867261 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
100:40-100:41::x :: "{VV : a | VV == x}"
100:42-100:51::_ :: "{VV : forall a .\n      {v : (Data.Map.Internal.Map a GHC.Types.Int) | v == Map_default 0} | VV == empty}"
100:53-100:66::lq_anf$##7205759403792867262 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == listElts xs}"
100:63-100:65::xs :: "{v : [a] | (treeListSize v == 0 <=> len v == 0)\n           && v == xs\n           && len v >= 0\n           && treeListSize v >= 0\n           && len v <= treeListSize v}"
111:1-111:16::Binomial.treeAtLeastRoot :: "forall a .\nx1:(Binomial.Tree a) -> {VV : (Binomial.Tree {VV : a | root x1 <= VV}) | VV == x1}"
111:36-111:50::Binomial.Node :: "{VV : forall a .\n      x1:a -> x2:{v : GHC.Types.Int | v >= 0} -> x3:{v : [{v : (Binomial.Tree {VV : a | x1 <= VV}) | x2 > treeRank v}]<\\x16 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | len v == x2} -> x4:{v : GHC.Types.Int | v == 1 + treeListSize x3\n                                                                                                                                                                                                                               && v >= 1} -> {v : (Binomial.Tree a) | v == Node x1 x2 x3 x4\n                                                                                                                                                                                                                                                                      && lqdc##$select v == x1\n                                                                                                                                                                                                                                                                      && lqdc##$select v == x2\n                                                                                                                                                                                                                                                                      && lqdc##$select v == x3\n                                                                                                                                                                                                                                                                      && lqdc##$select v == x4\n                                                                                                                                                                                                                                                                      && rank v == x2\n                                                                                                                                                                                                                                                                      && root v == x1\n                                                                                                                                                                                                                                                                      && subtrees v == x3\n                                                                                                                                                                                                                                                                      && treeRank v == x2\n                                                                                                                                                                                                                                                                      && treeSize v == x4} | VV == Node}"
111:41-111:42::x :: "{VV : a | VV == x}"
111:43-111:44::r :: "{v : GHC.Types.Int | v == r\n                     && v >= 0}"
111:45-111:47::ts :: "{v : [{v : (Binomial.Tree {VV : a | x <= VV}) | r > treeRank v}]<\\x6 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                                                && v == ts\n                                                                                                                                && len v == r\n                                                                                                                                && len v >= 0\n                                                                                                                                && treeListSize v >= 0\n                                                                                                                                && len v <= treeListSize v}"
111:48-111:50::sz :: "{v : GHC.Types.Int | v == sz\n                     && v == 1 + treeListSize ts\n                     && v >= 1}"
118:1-118:5::Binomial.link :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Tree a) -> x3:{t2 : (Binomial.Tree a) | rank t2 == rank x2} -> {v : (Binomial.Tree a) | rank v == rank x2 + 1\n                                                                                                     && treeElts v == Map_union (treeElts x2) (treeElts x3)\n                                                                                                     && treeSize v == treeSize x2 + treeSize x3}"
118:6-118:8::t1 :: "(Binomial.Tree a)"
118:30-118:32::t2 :: "{t2 : (Binomial.Tree a) | rank t2 == rank t1}"
119:5-119:7::x1 :: "{VV : a | VV == x1}"
119:11-119:13::x2 :: "{VV : a | VV == x2}"
120:11-120:14::new :: "{v : (Binomial.Tree a) | lqdc##$select v == x1\n                         && root v == x1}"
120:17-120:72::_ :: "{v : (Binomial.Tree a) | lqdc##$select v == x1\n                         && root v == x1}"
120:22-120:24::x1 :: "{VV : a | VV == x1}"
120:25-120:33::lq_anf$##7205759403792867296 :: "GHC.Types.Int"
120:26-120:28::r1 :: "{v : GHC.Types.Int | v == r1\n                     && v >= 0}"
120:31-120:32::lq_anf$##7205759403792867295 :: "GHC.Types.Int"
120:34-120:60::lq_anf$##7205759403792867298 :: "{v : [(Binomial.Tree a)] | len v == 1 + len ts1\n                           && lqdc##$select v == ts1\n                           && tail v == ts1}"
120:35-120:55::lq_anf$##7205759403792867297 :: "(Binomial.Tree a)"
120:52-120:54::lq_anf$##7205759403792867279 :: "{v : (Binomial.Tree a) | v == t2\n                         && v == Node v r2 ts2 sz2\n                         && lqdc##$select v == r2\n                         && lqdc##$select v == sz2\n                         && lqdc##$select v == ts2\n                         && lqdc##$select v == v\n                         && rank v == r2\n                         && rank v == rank t1\n                         && root v == v\n                         && subtrees v == ts2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r2\n                         && treeRank v == rank v\n                         && treeSize v == sz2\n                         && treeRank v >= 0}"
120:56-120:59::ts1 :: "{v : [{v : (Binomial.Tree {VV : a | x1 <= VV}) | r1 > treeRank v}]<\\x6 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                                                  && v == ts1\n                                                                                                                                  && len v == r1\n                                                                                                                                  && len v >= 0\n                                                                                                                                  && treeListSize v >= 0\n                                                                                                                                  && len v <= treeListSize v}"
120:61-120:72::lq_anf$##7205759403792867299 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
120:62-120:65::sz1 :: "{v : GHC.Types.Int | v == sz1\n                     && v == 1 + treeListSize ts1\n                     && v >= 1}"
120:68-120:71::sz2 :: "{v : GHC.Types.Int | v == sz2\n                     && v == 1 + treeListSize ts2\n                     && v >= 1}"
121:7-121:69::lq_anf$##7205759403792867305 :: "x1:(Binomial.Tree a) -> {v : (Binomial.Tree a) | v == x1}"
121:14-121:69::lq_anf$##7205759403792867304 :: "GHC.Types.Bool"
121:15-121:27::lq_anf$##7205759403792867300 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == treeElts new\n                                               && v == Map_store (treeListElts (subtrees new)) (root new) (1 + Map_select (treeListElts (subtrees new)) (root new))}"
121:24-121:27::new :: "{v : (Binomial.Tree a) | v == new\n                         && lqdc##$select v == x1\n                         && root v == x1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
121:31-121:68::lq_anf$##7205759403792867303 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
121:41-121:54::lq_anf$##7205759403792867301 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
121:51-121:53::lq_anf$##7205759403792867278 :: "{v : (Binomial.Tree a) | v == t1\n                         && v == Node x1 r1 ts1 sz1\n                         && lqdc##$select v == r1\n                         && lqdc##$select v == sz1\n                         && lqdc##$select v == ts1\n                         && lqdc##$select v == x1\n                         && rank v == r1\n                         && root v == x1\n                         && subtrees v == ts1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r1\n                         && treeRank v == rank v\n                         && treeSize v == sz1\n                         && treeRank v >= 0}"
121:55-121:68::lq_anf$##7205759403792867302 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
121:65-121:67::lq_anf$##7205759403792867279 :: "{v : (Binomial.Tree a) | v == t2\n                         && v == Node v r2 ts2 sz2\n                         && lqdc##$select v == r2\n                         && lqdc##$select v == sz2\n                         && lqdc##$select v == ts2\n                         && lqdc##$select v == v\n                         && rank v == r2\n                         && rank v == rank t1\n                         && root v == v\n                         && subtrees v == ts2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r2\n                         && treeRank v == rank v\n                         && treeSize v == sz2\n                         && treeRank v >= 0}"
122:7-122:10::new :: "{v : (Binomial.Tree a) | v == new\n                         && lqdc##$select v == x1\n                         && root v == x1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
124:11-124:14::new :: "{v : (Binomial.Tree a) | lqdc##$select v == v\n                         && root v == v}"
124:17-124:72::_ :: "{v : (Binomial.Tree a) | lqdc##$select v == v\n                         && root v == v}"
124:22-124:24::x2 :: "{VV : a | VV == x2}"
124:25-124:33::lq_anf$##7205759403792867284 :: "GHC.Types.Int"
124:26-124:28::r2 :: "{v : GHC.Types.Int | v == r2\n                     && v >= 0}"
124:31-124:32::lq_anf$##7205759403792867283 :: "GHC.Types.Int"
124:34-124:60::lq_anf$##7205759403792867286 :: "{v : [(Binomial.Tree a)] | len v == 1 + len ts2\n                           && lqdc##$select v == ts2\n                           && tail v == ts2}"
124:35-124:55::lq_anf$##7205759403792867285 :: "(Binomial.Tree a)"
124:52-124:54::lq_anf$##7205759403792867278 :: "{v : (Binomial.Tree a) | v == t1\n                         && v == Node x1 r1 ts1 sz1\n                         && lqdc##$select v == r1\n                         && lqdc##$select v == sz1\n                         && lqdc##$select v == ts1\n                         && lqdc##$select v == x1\n                         && rank v == r1\n                         && root v == x1\n                         && subtrees v == ts1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r1\n                         && treeRank v == rank v\n                         && treeSize v == sz1\n                         && treeRank v >= 0}"
124:56-124:59::ts2 :: "{v : [{v : (Binomial.Tree {VV : a | x2 <= VV}) | r2 > treeRank v}]<\\x6 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                                                                  && v == ts2\n                                                                                                                                  && len v == r2\n                                                                                                                                  && len v >= 0\n                                                                                                                                  && treeListSize v >= 0\n                                                                                                                                  && len v <= treeListSize v}"
124:61-124:72::lq_anf$##7205759403792867287 :: "{v : GHC.Types.Int | v == sz1 + sz2}"
124:62-124:65::sz1 :: "{v : GHC.Types.Int | v == sz1\n                     && v == 1 + treeListSize ts1\n                     && v >= 1}"
124:68-124:71::sz2 :: "{v : GHC.Types.Int | v == sz2\n                     && v == 1 + treeListSize ts2\n                     && v >= 1}"
125:7-125:69::lq_anf$##7205759403792867293 :: "x1:(Binomial.Tree a) -> {v : (Binomial.Tree a) | v == x1}"
125:14-125:69::lq_anf$##7205759403792867292 :: "GHC.Types.Bool"
125:15-125:27::lq_anf$##7205759403792867288 :: "{v : (Data.Map.Internal.Map a GHC.Types.Int) | v == treeElts new\n                                               && v == Map_store (treeListElts (subtrees new)) (root new) (1 + Map_select (treeListElts (subtrees new)) (root new))}"
125:24-125:27::new :: "{v : (Binomial.Tree a) | v == new\n                         && lqdc##$select v == v\n                         && root v == v\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
125:31-125:68::lq_anf$##7205759403792867291 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
125:41-125:54::lq_anf$##7205759403792867289 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
125:51-125:53::lq_anf$##7205759403792867278 :: "{v : (Binomial.Tree a) | v == t1\n                         && v == Node x1 r1 ts1 sz1\n                         && lqdc##$select v == r1\n                         && lqdc##$select v == sz1\n                         && lqdc##$select v == ts1\n                         && lqdc##$select v == x1\n                         && rank v == r1\n                         && root v == x1\n                         && subtrees v == ts1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r1\n                         && treeRank v == rank v\n                         && treeSize v == sz1\n                         && treeRank v >= 0}"
125:55-125:68::lq_anf$##7205759403792867290 :: "(Data.Map.Internal.Map a GHC.Types.Int)"
125:65-125:67::lq_anf$##7205759403792867279 :: "{v : (Binomial.Tree a) | v == t2\n                         && v == Node v r2 ts2 sz2\n                         && lqdc##$select v == r2\n                         && lqdc##$select v == sz2\n                         && lqdc##$select v == ts2\n                         && lqdc##$select v == v\n                         && rank v == r2\n                         && rank v == rank t1\n                         && root v == v\n                         && subtrees v == ts2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == r2\n                         && treeRank v == rank v\n                         && treeSize v == sz2\n                         && treeRank v >= 0}"
126:7-126:10::new :: "{v : (Binomial.Tree a) | v == new\n                         && lqdc##$select v == v\n                         && root v == v\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
134:1-134:5::Binomial.size :: "forall a .\nx1:(Binomial.Heap a) -> {VV : GHC.Types.Int | VV == size x1\n                                              && VV == treeListSize (unheap x1)\n                                              && VV >= 0\n                                              && len (unheap x1) <= VV}"
134:18-134:33::Binomial.treeListSize :: "forall a .\nx1:[(Binomial.Tree a)] -> {VV : GHC.Types.Int | (VV == 0 <=> len x1 == 0)\n                                                && VV == treeListSize x1\n                                                && VV >= 0\n                                                && len x1 <= VV}"
134:31-134:33::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
138:1-138:6::Binomial.empty :: "forall a .\n{v : (Binomial.Heap a) | elts v == Map_default 0\n                         && size v == 0}"
138:14-138:16::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
142:1-142:5::Binomial.null :: "forall a .\nx1:(Binomial.Heap a) -> {v : GHC.Types.Bool | v <=> size x1 == 0}"
142:6-142:7::h :: "(Binomial.Heap a)"
142:10-142:16::lq_anf$##7205759403792867208 :: "{v : GHC.Types.Int | v == size h\n                     && v == treeListSize (unheap h)\n                     && v >= 0\n                     && len (unheap h) <= v}"
142:15-142:16::h :: "{v : (Binomial.Heap a) | v == h\n                         && elts v == treeListElts (unheap v)\n                         && size v == treeListSize (unheap v)\n                         && size v >= 0\n                         && len (unheap v) <= size v}"
142:20-142:21::lq_anf$##7205759403792867210 :: "GHC.Types.Int"
154:1-154:10::Binomial.singleton :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:a -> {v : (Binomial.Heap a) | elts v == Map_store (Map_default 0) x2 (1 + Map_select (Map_default 0) x2)\n                                 && size v == 1}"
154:11-154:12::x :: "a"
154:20-154:35::lq_anf$##7205759403792867355 :: "[(Binomial.Tree a)]"
154:21-154:34::lq_anf$##7205759403792867353 :: "{v : (Binomial.Tree a) | lqdc##$select v == x\n                         && root v == x}"
154:26-154:27::x :: "{VV : a | VV == x}"
154:28-154:29::lq_anf$##7205759403792867349 :: "GHC.Types.Int"
154:30-154:32::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
154:33-154:34::lq_anf$##7205759403792867352 :: "GHC.Types.Int"
159:1-159:8::Binomial.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Tree a) -> x3:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeElts x2) (treeListElts x3)\n                                                                             && treeListSize v == treeSize x2 + treeListSize x3}"
159:9-159:10::t :: "(Binomial.Tree a)"
159:16-159:19::lq_anf$##7205759403792867307 :: "{v : [(Binomial.Tree a)] | v == []\n                           && fromList v == Map_default 0\n                           && len v == 0\n                           && listElts v == Map_default 0\n                           && treeListElts v == Map_default 0\n                           && treeListSize v == 0}"
159:17-159:18::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
161:5-161:11::lq_anf$##7205759403792867308 :: "{v : GHC.Types.Int | v == rank t\n                     && v >= 0}"
161:10-161:11::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
161:14-161:21::lq_anf$##7205759403792867309 :: "{v : GHC.Types.Int | v == rank t'\n                     && v >= 0}"
161:19-161:21::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
161:24-161:25::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
161:28-161:30::ds_dj5Q :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
162:5-162:11::lq_anf$##7205759403792867312 :: "{v : GHC.Types.Int | v == rank t\n                     && v >= 0}"
162:10-162:11::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
162:14-162:21::lq_anf$##7205759403792867313 :: "{v : GHC.Types.Int | v == rank t'\n                     && v >= 0}"
162:19-162:21::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
162:24-162:26::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
162:29-162:42::lq_anf$##7205759403792867317 :: "{v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeElts t) (treeListElts ts')\n                           && treeListSize v == treeSize t + treeListSize ts'}"
162:37-162:38::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
162:39-162:42::ts' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
163:23-163:46::Binomial.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Tree a) -> x3:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeElts x2) (treeListElts x3)\n                                                                             && treeListSize v == treeSize x2 + treeListSize x3}"
163:31-163:42::lq_anf$##7205759403792867316 :: "{v : (Binomial.Tree a) | rank v == rank t + 1\n                         && treeElts v == Map_union (treeElts t) (treeElts t')\n                         && treeSize v == treeSize t + treeSize t'}"
163:37-163:38::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
163:39-163:41::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
163:43-163:46::ts' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
167:1-167:7::Binomial.insert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:a -> x3:(Binomial.Heap a) -> {v : (Binomial.Heap a) | elts v == Map_union (Map_store (Map_default 0) x2 (1 + Map_select (Map_default 0) x2)) (elts x3)\n                                                         && size v == 1 + size x3}"
167:8-167:9::x :: "a"
167:22-167:55::Binomial.Heap :: "{VV : forall a .\n      x1:[(Binomial.Tree a)] -> {v : (Binomial.Heap a) | v == Heap x1\n                                                         && elts v == treeListElts x1\n                                                         && lqdc##$select v == x1\n                                                         && size v == treeListSize x1\n                                                         && unheap v == x1} | VV == Heap}"
167:27-167:55::lq_anf$##7205759403792867325 :: "[(Binomial.Tree a)]"
167:36-167:51::lq_anf$##7205759403792867324 :: "{v : (Binomial.Tree a) | lqdc##$select v == x\n                         && root v == x}"
167:42-167:43::x :: "{VV : a | VV == x}"
167:44-167:45::lq_anf$##7205759403792867320 :: "GHC.Types.Int"
167:46-167:48::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
167:49-167:50::lq_anf$##7205759403792867323 :: "GHC.Types.Int"
167:52-167:54::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
175:1-175:11::Binomial.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Binomial.Tree a)] | 0 < len VV} -> {v : ((Binomial.Tree a), [(Binomial.Tree {VV : a | root (fst v) <= VV})]) | Map_union (treeElts (fst v)) (treeListElts (snd v)) == treeListElts x2\n                                                                                                                          && treeSize (fst v) + treeListSize (snd v) == treeListSize x2}"
175:18-175:25::lq_anf$##7205759403792867275 :: "{v : [(Binomial.Tree a)] | v == []\n                           && fromList v == Map_default 0\n                           && len v == 0\n                           && listElts v == Map_default 0\n                           && treeListElts v == Map_default 0\n                           && treeListSize v == 0}"
175:19-175:20::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
175:22-175:24::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
177:8-177:10::t' :: "(Binomial.Tree a)"
177:12-177:15::ts' :: "{VV : [(Binomial.Tree {VV : a | root t' <= VV})] | len VV >= 0}"
177:19-177:32::Binomial.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Binomial.Tree a)] | 0 < len VV} -> {v : ((Binomial.Tree a), [(Binomial.Tree {VV : a | root (fst v) <= VV})]) | Map_union (treeElts (fst v)) (treeListElts (snd v)) == treeListElts x2\n                                                                                                                          && treeSize (fst v) + treeListSize (snd v) == treeListSize x2}"
177:30-177:32::ds_dj2p :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
178:6-178:12::lq_anf$##7205759403792867267 :: "{VV : a | VV == root t}"
178:11-178:12::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
178:15-178:22::lq_anf$##7205759403792867268 :: "{VV : a | VV == root t'}"
178:20-178:22::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
179:8-179:37::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
179:9-179:10::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
179:12-179:32::lq_anf$##7205759403792867273 :: "{v : (Binomial.Tree {VV : a | root t' <= VV}) | v == t'}"
179:29-179:31::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
179:33-179:36::ts' :: "{v : [(Binomial.Tree {VV : a | root t' <= VV})] | (treeListSize v == 0 <=> len v == 0)\n                                                  && v == ts'\n                                                  && len v >= 0\n                                                  && treeListSize v >= 0\n                                                  && len v <= treeListSize v}"
180:8-180:37::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | v == (,) x1 x2\n                                                                                           && fst v == x1\n                                                                                           && lqdc##$select v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
180:9-180:11::t' :: "{v : (Binomial.Tree a) | v == t'\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
180:13-180:32::lq_anf$##7205759403792867271 :: "{v : (Binomial.Tree {VV : a | root t <= VV}) | v == t}"
180:30-180:31::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
180:33-180:36::ts' :: "{v : [(Binomial.Tree {VV : a | root t' <= VV})] | (treeListSize v == 0 <=> len v == 0)\n                                                  && v == ts'\n                                                  && len v >= 0\n                                                  && treeListSize v >= 0\n                                                  && len v <= treeListSize v}"
185:1-185:15::Binomial.unheapNonempty :: "forall a .\nx1:{VV : (Binomial.Heap a) | 0 < len (unheap VV)} -> {VV : [(Binomial.Tree a)] | treeListElts VV == elts x1\n                                                                                 && treeListSize VV == size x1\n                                                                                 && 0 < len VV}"
185:34-185:36::lq_anf$##7205759403792867357 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
189:1-189:25::Binomial.subtreeEltsAreEltsOfTree :: "forall a .\nx1:(Binomial.Tree a) -> {v : [(Binomial.Tree a)] | Map_union (Map_store (Map_default 0) (root x1) (1 + Map_select (Map_default 0) (root x1))) (treeListElts v) == treeElts x1\n                                                   && 1 + treeListSize v == treeSize x1}"
189:44-189:46::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
191:9-191:10::t :: "(Binomial.Tree a)"
191:13-191:32::_ :: "(Binomial.Tree a)"
191:29-191:32::ds_dj8o :: "{v : [(Binomial.Tree a)]<\\x5 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                        && len v >= 0\n                                                                                        && treeListSize v >= 0\n                                                                                        && len v <= treeListSize v}"
192:5-192:33::lq_anf$##7205759403792867251 :: "x1:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | v == x1}"
192:12-192:33::lq_anf$##7205759403792867250 :: "GHC.Types.Bool"
192:13-192:23::lq_anf$##7205759403792867246 :: "{v : GHC.Types.Int | v == rank t\n                     && v == treeRank t\n                     && v >= 0}"
192:22-192:23::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
192:27-192:28::ds_dj8n :: "{v : GHC.Types.Int | v >= 0}"
192:31-192:32::lq_anf$##7205759403792867248 :: "GHC.Types.Int"
193:9-193:17::residual :: "{v : (Binomial.Tree a) | lqdc##$select v == ts\n                         && subtrees v == ts}"
193:20-193:57::_ :: "{v : (Binomial.Tree a) | lqdc##$select v == ts\n                         && subtrees v == ts}"
193:25-193:26::ds_dj8m :: "a"
193:27-193:34::lq_anf$##7205759403792867254 :: "GHC.Types.Int"
193:28-193:29::ds_dj8n :: "{v : GHC.Types.Int | v >= 0}"
193:32-193:33::lq_anf$##7205759403792867253 :: "GHC.Types.Int"
193:35-193:37::ts :: "{v : [(Binomial.Tree a)]<\\x5 VV -> {v : (Binomial.Tree a) | treeRank v > treeRank v}> | (treeListSize v == 0 <=> len v == 0)\n                                                                                        && v == ts\n                                                                                        && len v >= 0\n                                                                                        && treeListSize v >= 0\n                                                                                        && len v <= treeListSize v}"
193:38-193:57::lq_anf$##7205759403792867256 :: "GHC.Types.Int"
193:39-193:41::ds_dj8p :: "{v : GHC.Types.Int | v >= 1}"
193:44-193:56::lq_anf$##7205759403792867255 :: "{v : GHC.Types.Int | v == treeSize t\n                     && v == 1 + treeListSize (subtrees t)\n                     && v >= 1}"
193:54-193:55::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
194:5-194:6::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
194:9-194:42::lq_anf$##7205759403792867257 :: "{v : [(Binomial.Tree a)] | Map_union (Map_store (Map_default 0) (root residual) (1 + Map_select (Map_default 0) (root residual))) (treeListElts v) == treeElts residual\n                           && 1 + treeListSize v == treeSize residual}"
194:34-194:42::residual :: "{v : (Binomial.Tree a) | v == residual\n                         && lqdc##$select v == ts\n                         && subtrees v == ts\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
198:1-198:16::Binomial.reverseHeapList :: "forall a .\nx1:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == treeListElts x1\n                                                     && treeListSize v == treeListSize x1}"
198:17-198:19::ts :: "[(Binomial.Tree a)]"
198:41-198:43::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
198:44-198:46::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | v == []\n                                                  && fromList v == Map_default 0\n                                                  && len v == 0\n                                                  && listElts v == Map_default 0\n                                                  && treeListElts v == Map_default 0\n                                                  && treeListSize v == 0} | VV == []}"
205:1-205:19::Binomial.reverseHeapListAux :: "forall a .\nx1:[(Binomial.Tree a)] -> x2:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts x1) (treeListElts x2)\n                                                                               && treeListSize v == treeListSize x1 + treeListSize x2}"
205:23-205:26::acc :: "[(Binomial.Tree a)]"
205:29-205:32::acc :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == acc\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
206:33-206:62::Binomial.reverseHeapListAux :: "forall a .\nx1:[(Binomial.Tree a)] -> x2:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts x1) (treeListElts x2)\n                                                                               && treeListSize v == treeListSize x1 + treeListSize x2}"
206:52-206:54::ts :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
206:55-206:62::lq_anf$##7205759403792867360 :: "{v : [(Binomial.Tree a)] | v == : t acc\n                           && fromList v == Map_store (fromList acc) t (1 + Map_select (fromList acc) t)\n                           && head v == t\n                           && len v == 1 + len acc\n                           && listElts v == Map_union (Map_store (Map_default 0) t (1 + Map_select (Map_default 0) t)) (listElts acc)\n                           && lqdc##$select v == acc\n                           && lqdc##$select v == t\n                           && tail v == acc\n                           && treeListElts v == Map_union (treeElts t) (treeListElts acc)\n                           && treeListSize v == treeSize t + treeListSize acc}"
206:56-206:57::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
206:58-206:61::acc :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == acc\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
210:1-210:10::Binomial.deleteMin :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : (Binomial.Heap a) | 0 < len (unheap VV)} -> {v : (a, (Binomial.Heap {VV : a | fst v <= VV})) | Map_union (Map_store (Map_default 0) (fst v) (1 + Map_select (Map_default 0) (fst v))) (elts (snd v)) == elts x2\n                                                                                                        && 1 + size (snd v) == size x2}"
210:11-210:12::h :: "{VV : (Binomial.Heap a) | 0 < len (unheap VV)}"
211:8-211:9::t :: "(Binomial.Tree a)"
211:11-211:14::ts2 :: "{VV : [(Binomial.Tree {VV : a | root t <= VV})] | len VV >= 0}"
211:18-211:47::Binomial.deleteMin' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:{VV : [(Binomial.Tree a)] | 0 < len VV} -> {v : ((Binomial.Tree a), [(Binomial.Tree {VV : a | root (fst v) <= VV})]) | Map_union (treeElts (fst v)) (treeListElts (snd v)) == treeListElts x2\n                                                                                                                          && treeSize (fst v) + treeListSize (snd v) == treeListSize x2}"
211:29-211:47::lq_anf$##7205759403792867362 :: "{v : [(Binomial.Tree a)] | treeListElts v == elts h\n                           && treeListSize v == size h\n                           && 0 < len v}"
211:45-211:46::h :: "{v : (Binomial.Heap a) | v == h\n                         && elts v == treeListElts (unheap v)\n                         && size v == treeListSize (unheap v)\n                         && size v >= 0\n                         && 0 < len (unheap v)\n                         && len (unheap v) <= size v}"
212:7-212:10::ts1 :: "[(Binomial.Tree a)]"
212:13-212:57::_ :: "[(Binomial.Tree a)]"
212:38-212:57::lq_anf$##7205759403792867363 :: "{v : (Binomial.Tree {VV : a | root t <= VV}) | v == t}"
212:55-212:56::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
213:4-213:10::lq_anf$##7205759403792867364 :: "{VV : a | VV == root t}"
213:9-213:10::t :: "{v : (Binomial.Tree a) | v == t\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
213:12-213:51::lq_anf$##7205759403792867367 :: "(Binomial.Heap a)"
213:17-213:51::lq_anf$##7205759403792867366 :: "[(Binomial.Tree a)]"
213:25-213:46::lq_anf$##7205759403792867365 :: "{v : [(Binomial.Tree a)] | treeListElts v == treeListElts ts1\n                           && treeListSize v == treeListSize ts1}"
213:42-213:45::ts1 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
213:47-213:50::ts2 :: "{v : [(Binomial.Tree {VV : a | root t <= VV})] | (treeListSize v == 0 <=> len v == 0)\n                                                 && v == ts2\n                                                 && len v >= 0\n                                                 && treeListSize v >= 0\n                                                 && len v <= treeListSize v}"
219:1-219:6::Binomial.merge :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Heap a) -> x3:(Binomial.Heap a) -> {v : (Binomial.Heap a) | elts v == Map_union (elts x2) (elts x3)\n                                                                         && size v == size x2 + size x3}"
219:31-219:52::Binomial.Heap :: "{VV : forall a .\n      x1:[(Binomial.Tree a)] -> {v : (Binomial.Heap a) | v == Heap x1\n                                                         && elts v == treeListElts x1\n                                                         && lqdc##$select v == x1\n                                                         && size v == treeListSize x1\n                                                         && unheap v == x1} | VV == Heap}"
219:36-219:52::lq_anf$##7205759403792867346 :: "{v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts ts1) (treeListElts ts2)\n                           && treeListSize v == treeListSize ts1 + treeListSize ts2}"
219:44-219:47::ts1 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
219:48-219:51::ts2 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts2\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
225:1-225:7::Binomial.merge' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[(Binomial.Tree a)] -> x3:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts x2) (treeListElts x3)\n                                                                               && treeListSize v == treeListSize x2 + treeListSize x3}"
225:8-225:11::ts1 :: "[(Binomial.Tree a)]"
225:17-225:20::ts1 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
226:17-226:20::ds_dj6F :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
228:5-228:12::lq_anf$##7205759403792867330 :: "{v : GHC.Types.Int | v == rank t1\n                     && v >= 0}"
228:10-228:12::t1 :: "{v : (Binomial.Tree a) | v == t1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
228:15-228:22::lq_anf$##7205759403792867331 :: "{v : GHC.Types.Int | v == rank t2\n                     && v >= 0}"
228:20-228:22::t2 :: "{v : (Binomial.Tree a) | v == t2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
228:25-228:27::t1 :: "{v : (Binomial.Tree a) | v == t1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
228:30-228:45::lq_anf$##7205759403792867341 :: "[(Binomial.Tree a)]"
228:37-228:41::ts1' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
228:42-228:45::ds_dj6F :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
229:5-229:12::lq_anf$##7205759403792867334 :: "{v : GHC.Types.Int | v == rank t2\n                     && v >= 0}"
229:10-229:12::t2 :: "{v : (Binomial.Tree a) | v == t2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
229:15-229:22::lq_anf$##7205759403792867335 :: "{v : GHC.Types.Int | v == rank t1\n                     && v >= 0}"
229:20-229:22::t1 :: "{v : (Binomial.Tree a) | v == t1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
229:25-229:27::t2 :: "{v : (Binomial.Tree a) | v == t2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
229:30-229:45::lq_anf$##7205759403792867340 :: "{v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts ts1) (treeListElts ts2')\n                           && treeListSize v == treeListSize ts1 + treeListSize ts2'}"
229:37-229:40::ts1 :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
229:41-229:45::ts2' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts2'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
230:25-230:64::Binomial.insert' :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:(Binomial.Tree a) -> x3:[(Binomial.Tree a)] -> {v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeElts x2) (treeListElts x3)\n                                                                             && treeListSize v == treeSize x2 + treeListSize x3}"
230:33-230:45::lq_anf$##7205759403792867338 :: "{v : (Binomial.Tree a) | rank v == rank t1 + 1\n                         && treeElts v == Map_union (treeElts t1) (treeElts t2)\n                         && treeSize v == treeSize t1 + treeSize t2}"
230:39-230:41::t1 :: "{v : (Binomial.Tree a) | v == t1\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
230:42-230:44::t2 :: "{v : (Binomial.Tree a) | v == t2\n                         && treeElts v == Map_store (treeListElts (subtrees v)) (root v) (1 + Map_select (treeListElts (subtrees v)) (root v))\n                         && treeRank v == rank v\n                         && treeRank v >= 0}"
230:46-230:64::lq_anf$##7205759403792867339 :: "{v : [(Binomial.Tree a)] | treeListElts v == Map_union (treeListElts ts1') (treeListElts ts2')\n                           && treeListSize v == treeListSize ts1' + treeListSize ts2'}"
230:54-230:58::ts1' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts1'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"
230:59-230:63::ts2' :: "{v : [(Binomial.Tree a)] | (treeListSize v == 0 <=> len v == 0)\n                           && v == ts2'\n                           && len v >= 0\n                           && treeListSize v >= 0\n                           && len v <= treeListSize v}"